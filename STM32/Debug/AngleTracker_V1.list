
AngleTracker_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  0800b948  0800b948  0001b948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc0c  0800bc0c  0002024c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bc0c  0800bc0c  0002024c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bc0c  0800bc0c  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc0c  0800bc0c  0001bc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc10  0800bc10  0001bc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  0800bc14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d8  2000024c  0800be60  0002024c  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20001624  0800be60  00021624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af1d  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f43  00000000  00000000  0003b199  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001210  00000000  00000000  0003f0e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001018  00000000  00000000  000402f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021ba0  00000000  00000000  00041308  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001444f  00000000  00000000  00062ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b489a  00000000  00000000  000772f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012bb91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a50  00000000  00000000  0012bc0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000024c 	.word	0x2000024c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b930 	.word	0x0800b930

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000250 	.word	0x20000250
 80001cc:	0800b930 	.word	0x0800b930

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 0314 	add.w	r3, r7, #20
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000296:	4b30      	ldr	r3, [pc, #192]	; (8000358 <MX_GPIO_Init+0xd8>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a2f      	ldr	r2, [pc, #188]	; (8000358 <MX_GPIO_Init+0xd8>)
 800029c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002a0:	6153      	str	r3, [r2, #20]
 80002a2:	4b2d      	ldr	r3, [pc, #180]	; (8000358 <MX_GPIO_Init+0xd8>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80002aa:	613b      	str	r3, [r7, #16]
 80002ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ae:	4b2a      	ldr	r3, [pc, #168]	; (8000358 <MX_GPIO_Init+0xd8>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a29      	ldr	r2, [pc, #164]	; (8000358 <MX_GPIO_Init+0xd8>)
 80002b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002b8:	6153      	str	r3, [r2, #20]
 80002ba:	4b27      	ldr	r3, [pc, #156]	; (8000358 <MX_GPIO_Init+0xd8>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	4b24      	ldr	r3, [pc, #144]	; (8000358 <MX_GPIO_Init+0xd8>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a23      	ldr	r2, [pc, #140]	; (8000358 <MX_GPIO_Init+0xd8>)
 80002cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b21      	ldr	r3, [pc, #132]	; (8000358 <MX_GPIO_Init+0xd8>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002de:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <MX_GPIO_Init+0xd8>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a1d      	ldr	r2, [pc, #116]	; (8000358 <MX_GPIO_Init+0xd8>)
 80002e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <MX_GPIO_Init+0xd8>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI1_CS_Pin|LED4_Pin|LED3_Pin|LED5_Pin
 80002f6:	2200      	movs	r2, #0
 80002f8:	f64f 7108 	movw	r1, #65288	; 0xff08
 80002fc:	4817      	ldr	r0, [pc, #92]	; (800035c <MX_GPIO_Init+0xdc>)
 80002fe:	f002 f8d9 	bl	80024b4 <HAL_GPIO_WritePin>
                          |LED7_Pin|LED9_Pin|LED10_Pin|LED8_Pin
                          |LED6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8000302:	2314      	movs	r3, #20
 8000304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000306:	4b16      	ldr	r3, [pc, #88]	; (8000360 <MX_GPIO_Init+0xe0>)
 8000308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800030a:	2302      	movs	r3, #2
 800030c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800030e:	f107 0314 	add.w	r3, r7, #20
 8000312:	4619      	mov	r1, r3
 8000314:	4811      	ldr	r0, [pc, #68]	; (800035c <MX_GPIO_Init+0xdc>)
 8000316:	f001 fd7b 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LED4_Pin|LED3_Pin|LED5_Pin
 800031a:	f64f 7308 	movw	r3, #65288	; 0xff08
 800031e:	617b      	str	r3, [r7, #20]
                          |LED7_Pin|LED9_Pin|LED10_Pin|LED8_Pin
                          |LED6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000320:	2301      	movs	r3, #1
 8000322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000324:	2300      	movs	r3, #0
 8000326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000328:	2300      	movs	r3, #0
 800032a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800032c:	f107 0314 	add.w	r3, r7, #20
 8000330:	4619      	mov	r1, r3
 8000332:	480a      	ldr	r0, [pc, #40]	; (800035c <MX_GPIO_Init+0xdc>)
 8000334:	f001 fd6c 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000338:	2302      	movs	r3, #2
 800033a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800033c:	4b08      	ldr	r3, [pc, #32]	; (8000360 <MX_GPIO_Init+0xe0>)
 800033e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000340:	2300      	movs	r3, #0
 8000342:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000344:	f107 0314 	add.w	r3, r7, #20
 8000348:	4619      	mov	r1, r3
 800034a:	4804      	ldr	r0, [pc, #16]	; (800035c <MX_GPIO_Init+0xdc>)
 800034c:	f001 fd60 	bl	8001e10 <HAL_GPIO_Init>

}
 8000350:	bf00      	nop
 8000352:	3728      	adds	r7, #40	; 0x28
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40021000 	.word	0x40021000
 800035c:	48001000 	.word	0x48001000
 8000360:	10110000 	.word	0x10110000

08000364 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <MX_I2C1_Init+0x74>)
 800036a:	4a1c      	ldr	r2, [pc, #112]	; (80003dc <MX_I2C1_Init+0x78>)
 800036c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800036e:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <MX_I2C1_Init+0x74>)
 8000370:	f240 220b 	movw	r2, #523	; 0x20b
 8000374:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000376:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <MX_I2C1_Init+0x74>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <MX_I2C1_Init+0x74>)
 800037e:	2201      	movs	r2, #1
 8000380:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_I2C1_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000388:	4b13      	ldr	r3, [pc, #76]	; (80003d8 <MX_I2C1_Init+0x74>)
 800038a:	2200      	movs	r2, #0
 800038c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800038e:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_I2C1_Init+0x74>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000394:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <MX_I2C1_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_I2C1_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003a0:	480d      	ldr	r0, [pc, #52]	; (80003d8 <MX_I2C1_Init+0x74>)
 80003a2:	f002 f8cf 	bl	8002544 <HAL_I2C_Init>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003ac:	f000 ff5e 	bl	800126c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003b0:	2100      	movs	r1, #0
 80003b2:	4809      	ldr	r0, [pc, #36]	; (80003d8 <MX_I2C1_Init+0x74>)
 80003b4:	f002 fe7c 	bl	80030b0 <HAL_I2CEx_ConfigAnalogFilter>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80003be:	f000 ff55 	bl	800126c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003c2:	2100      	movs	r1, #0
 80003c4:	4804      	ldr	r0, [pc, #16]	; (80003d8 <MX_I2C1_Init+0x74>)
 80003c6:	f002 fedb 	bl	8003180 <HAL_I2CEx_ConfigDigitalFilter>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80003d0:	f000 ff4c 	bl	800126c <Error_Handler>
  }

}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	200005ec 	.word	0x200005ec
 80003dc:	40005400 	.word	0x40005400

080003e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b08a      	sub	sp, #40	; 0x28
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e8:	f107 0314 	add.w	r3, r7, #20
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a17      	ldr	r2, [pc, #92]	; (800045c <HAL_I2C_MspInit+0x7c>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d127      	bne.n	8000452 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000402:	4b17      	ldr	r3, [pc, #92]	; (8000460 <HAL_I2C_MspInit+0x80>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a16      	ldr	r2, [pc, #88]	; (8000460 <HAL_I2C_MspInit+0x80>)
 8000408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b14      	ldr	r3, [pc, #80]	; (8000460 <HAL_I2C_MspInit+0x80>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000416:	613b      	str	r3, [r7, #16]
 8000418:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800041a:	23c0      	movs	r3, #192	; 0xc0
 800041c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800041e:	2312      	movs	r3, #18
 8000420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000422:	2301      	movs	r3, #1
 8000424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000426:	2303      	movs	r3, #3
 8000428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800042a:	2304      	movs	r3, #4
 800042c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800042e:	f107 0314 	add.w	r3, r7, #20
 8000432:	4619      	mov	r1, r3
 8000434:	480b      	ldr	r0, [pc, #44]	; (8000464 <HAL_I2C_MspInit+0x84>)
 8000436:	f001 fceb 	bl	8001e10 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <HAL_I2C_MspInit+0x80>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	4a08      	ldr	r2, [pc, #32]	; (8000460 <HAL_I2C_MspInit+0x80>)
 8000440:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000444:	61d3      	str	r3, [r2, #28]
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <HAL_I2C_MspInit+0x80>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000452:	bf00      	nop
 8000454:	3728      	adds	r7, #40	; 0x28
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40005400 	.word	0x40005400
 8000460:	40021000 	.word	0x40021000
 8000464:	48000400 	.word	0x48000400

08000468 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000472:	2300      	movs	r3, #0
 8000474:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000476:	f001 f843 	bl	8001500 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800047a:	88fb      	ldrh	r3, [r7, #6]
 800047c:	b2db      	uxtb	r3, r3
 800047e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000480:	f107 030f 	add.w	r3, r7, #15
 8000484:	2201      	movs	r2, #1
 8000486:	2120      	movs	r1, #32
 8000488:	4618      	mov	r0, r3
 800048a:	f001 f87f 	bl	800158c <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 800048e:	88fb      	ldrh	r3, [r7, #6]
 8000490:	0a1b      	lsrs	r3, r3, #8
 8000492:	b29b      	uxth	r3, r3
 8000494:	b2db      	uxtb	r3, r3
 8000496:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 8000498:	f107 030f 	add.w	r3, r7, #15
 800049c:	2201      	movs	r2, #1
 800049e:	2123      	movs	r1, #35	; 0x23
 80004a0:	4618      	mov	r0, r3
 80004a2:	f001 f873 	bl	800158c <GYRO_IO_Write>
}
 80004a6:	bf00      	nop
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
}
 80004b2:	bf00      	nop
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 80004c2:	f001 f81d 	bl	8001500 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 80004c6:	1dfb      	adds	r3, r7, #7
 80004c8:	2201      	movs	r2, #1
 80004ca:	210f      	movs	r1, #15
 80004cc:	4618      	mov	r0, r3
 80004ce:	f001 f88f 	bl	80015f0 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 80004d2:	79fb      	ldrb	r3, [r7, #7]
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80004e2:	1dfb      	adds	r3, r7, #7
 80004e4:	2201      	movs	r2, #1
 80004e6:	2124      	movs	r1, #36	; 0x24
 80004e8:	4618      	mov	r0, r3
 80004ea:	f001 f881 	bl	80015f0 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80004f8:	1dfb      	adds	r3, r7, #7
 80004fa:	2201      	movs	r2, #1
 80004fc:	2124      	movs	r1, #36	; 0x24
 80004fe:	4618      	mov	r0, r3
 8000500:	f001 f844 	bl	800158c <GYRO_IO_Write>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000516:	2300      	movs	r3, #0
 8000518:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800051a:	88fb      	ldrh	r3, [r7, #6]
 800051c:	b2db      	uxtb	r3, r3
 800051e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000520:	f107 030f 	add.w	r3, r7, #15
 8000524:	2201      	movs	r2, #1
 8000526:	2120      	movs	r1, #32
 8000528:	4618      	mov	r0, r3
 800052a:	f001 f82f 	bl	800158c <GYRO_IO_Write>
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	b084      	sub	sp, #16
 800053a:	af00      	add	r7, sp, #0
 800053c:	4603      	mov	r3, r0
 800053e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000540:	2300      	movs	r3, #0
 8000542:	73fb      	strb	r3, [r7, #15]
 8000544:	2300      	movs	r3, #0
 8000546:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8000548:	f107 030f 	add.w	r3, r7, #15
 800054c:	2201      	movs	r2, #1
 800054e:	2130      	movs	r1, #48	; 0x30
 8000550:	4618      	mov	r0, r3
 8000552:	f001 f84d 	bl	80015f0 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8000556:	f107 030e 	add.w	r3, r7, #14
 800055a:	2201      	movs	r2, #1
 800055c:	2122      	movs	r1, #34	; 0x22
 800055e:	4618      	mov	r0, r3
 8000560:	f001 f846 	bl	80015f0 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800056a:	b2db      	uxtb	r3, r3
 800056c:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	121b      	asrs	r3, r3, #8
 8000574:	b25a      	sxtb	r2, r3
 8000576:	7bfb      	ldrb	r3, [r7, #15]
 8000578:	b25b      	sxtb	r3, r3
 800057a:	4313      	orrs	r3, r2
 800057c:	b25b      	sxtb	r3, r3
 800057e:	b2db      	uxtb	r3, r3
 8000580:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 8000582:	7bbb      	ldrb	r3, [r7, #14]
 8000584:	f023 0320 	bic.w	r3, r3, #32
 8000588:	b2db      	uxtb	r3, r3
 800058a:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 800058c:	88fb      	ldrh	r3, [r7, #6]
 800058e:	b2da      	uxtb	r2, r3
 8000590:	7bbb      	ldrb	r3, [r7, #14]
 8000592:	4313      	orrs	r3, r2
 8000594:	b2db      	uxtb	r3, r3
 8000596:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8000598:	f107 030f 	add.w	r3, r7, #15
 800059c:	2201      	movs	r2, #1
 800059e:	2130      	movs	r1, #48	; 0x30
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fff3 	bl	800158c <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 80005a6:	f107 030e 	add.w	r3, r7, #14
 80005aa:	2201      	movs	r2, #1
 80005ac:	2122      	movs	r1, #34	; 0x22
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 ffec 	bl	800158c <GYRO_IO_Write>
}
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80005c6:	f107 030f 	add.w	r3, r7, #15
 80005ca:	2201      	movs	r2, #1
 80005cc:	2122      	movs	r1, #34	; 0x22
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 f80e 	bl	80015f0 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d10a      	bne.n	80005f0 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	73fb      	strb	r3, [r7, #15]
 80005ee:	e00c      	b.n	800060a <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d109      	bne.n	800060a <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	f023 0308 	bic.w	r3, r3, #8
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	f043 0308 	orr.w	r3, r3, #8
 8000606:	b2db      	uxtb	r3, r3
 8000608:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800060a:	f107 030f 	add.w	r3, r7, #15
 800060e:	2201      	movs	r2, #1
 8000610:	2122      	movs	r1, #34	; 0x22
 8000612:	4618      	mov	r0, r3
 8000614:	f000 ffba 	bl	800158c <GYRO_IO_Write>
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800062a:	f107 030f 	add.w	r3, r7, #15
 800062e:	2201      	movs	r2, #1
 8000630:	2122      	movs	r1, #34	; 0x22
 8000632:	4618      	mov	r0, r3
 8000634:	f000 ffdc 	bl	80015f0 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d107      	bne.n	800064e <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000644:	b2db      	uxtb	r3, r3
 8000646:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	e009      	b.n	8000662 <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d106      	bne.n	8000662 <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	f023 0308 	bic.w	r3, r3, #8
 800065a:	b2db      	uxtb	r3, r3
 800065c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000662:	f107 030f 	add.w	r3, r7, #15
 8000666:	2201      	movs	r2, #1
 8000668:	2122      	movs	r1, #34	; 0x22
 800066a:	4618      	mov	r0, r3
 800066c:	f000 ff8e 	bl	800158c <GYRO_IO_Write>
}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8000682:	f107 030f 	add.w	r3, r7, #15
 8000686:	2201      	movs	r2, #1
 8000688:	2121      	movs	r1, #33	; 0x21
 800068a:	4618      	mov	r0, r3
 800068c:	f000 ffb0 	bl	80015f0 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000696:	b2db      	uxtb	r3, r3
 8000698:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800069a:	7bfa      	ldrb	r2, [r7, #15]
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	4313      	orrs	r3, r2
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80006a4:	f107 030f 	add.w	r3, r7, #15
 80006a8:	2201      	movs	r2, #1
 80006aa:	2121      	movs	r1, #33	; 0x21
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 ff6d 	bl	800158c <GYRO_IO_Write>
}
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b084      	sub	sp, #16
 80006be:	af00      	add	r7, sp, #0
 80006c0:	4603      	mov	r3, r0
 80006c2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80006c4:	f107 030f 	add.w	r3, r7, #15
 80006c8:	2201      	movs	r2, #1
 80006ca:	2124      	movs	r1, #36	; 0x24
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 ff8f 	bl	80015f0 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	f023 0310 	bic.w	r3, r3, #16
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 80006dc:	7bfa      	ldrb	r2, [r7, #15]
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80006e6:	f107 030f 	add.w	r3, r7, #15
 80006ea:	2201      	movs	r2, #1
 80006ec:	2124      	movs	r1, #36	; 0x24
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 ff4c 	bl	800158c <GYRO_IO_Write>
}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 8000704:	f107 0318 	add.w	r3, r7, #24
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	809a      	strh	r2, [r3, #4]
  int16_t RawData[3] = {0};
 800070e:	f107 0310 	add.w	r3, r7, #16
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800071c:	f04f 0300 	mov.w	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 8000726:	f107 030f 	add.w	r3, r7, #15
 800072a:	2201      	movs	r2, #1
 800072c:	2123      	movs	r1, #35	; 0x23
 800072e:	4618      	mov	r0, r3
 8000730:	f000 ff5e 	bl	80015f0 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 8000734:	f107 0318 	add.w	r3, r7, #24
 8000738:	2206      	movs	r2, #6
 800073a:	2128      	movs	r1, #40	; 0x28
 800073c:	4618      	mov	r0, r3
 800073e:	f000 ff57 	bl	80015f0 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000748:	2b00      	cmp	r3, #0
 800074a:	d126      	bne.n	800079a <I3G4250D_ReadXYZAngRate+0x9e>
  {
    for (i = 0; i < 3; i++)
 800074c:	2300      	movs	r3, #0
 800074e:	623b      	str	r3, [r7, #32]
 8000750:	e01f      	b.n	8000792 <I3G4250D_ReadXYZAngRate+0x96>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8000752:	6a3b      	ldr	r3, [r7, #32]
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	3301      	adds	r3, #1
 8000758:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800075c:	4413      	add	r3, r2
 800075e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000762:	b29b      	uxth	r3, r3
 8000764:	021b      	lsls	r3, r3, #8
 8000766:	b29a      	uxth	r2, r3
 8000768:	6a3b      	ldr	r3, [r7, #32]
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000770:	440b      	add	r3, r1
 8000772:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000776:	b29b      	uxth	r3, r3
 8000778:	4413      	add	r3, r2
 800077a:	b29b      	uxth	r3, r3
 800077c:	b21a      	sxth	r2, r3
 800077e:	6a3b      	ldr	r3, [r7, #32]
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000786:	440b      	add	r3, r1
 8000788:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 800078c:	6a3b      	ldr	r3, [r7, #32]
 800078e:	3301      	adds	r3, #1
 8000790:	623b      	str	r3, [r7, #32]
 8000792:	6a3b      	ldr	r3, [r7, #32]
 8000794:	2b02      	cmp	r3, #2
 8000796:	dddc      	ble.n	8000752 <I3G4250D_ReadXYZAngRate+0x56>
 8000798:	e025      	b.n	80007e6 <I3G4250D_ReadXYZAngRate+0xea>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
 800079e:	e01f      	b.n	80007e0 <I3G4250D_ReadXYZAngRate+0xe4>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 80007a0:	6a3b      	ldr	r3, [r7, #32]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80007a8:	4413      	add	r3, r2
 80007aa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	021b      	lsls	r3, r3, #8
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	6a3b      	ldr	r3, [r7, #32]
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	3301      	adds	r3, #1
 80007ba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80007be:	440b      	add	r3, r1
 80007c0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	4413      	add	r3, r2
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	6a3b      	ldr	r3, [r7, #32]
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80007d4:	440b      	add	r3, r1
 80007d6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80007da:	6a3b      	ldr	r3, [r7, #32]
 80007dc:	3301      	adds	r3, #1
 80007de:	623b      	str	r3, [r7, #32]
 80007e0:	6a3b      	ldr	r3, [r7, #32]
 80007e2:	2b02      	cmp	r3, #2
 80007e4:	dddc      	ble.n	80007a0 <I3G4250D_ReadXYZAngRate+0xa4>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80007ec:	2b10      	cmp	r3, #16
 80007ee:	d006      	beq.n	80007fe <I3G4250D_ReadXYZAngRate+0x102>
 80007f0:	2b20      	cmp	r3, #32
 80007f2:	d007      	beq.n	8000804 <I3G4250D_ReadXYZAngRate+0x108>
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d108      	bne.n	800080a <I3G4250D_ReadXYZAngRate+0x10e>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <I3G4250D_ReadXYZAngRate+0x154>)
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80007fc:	e005      	b.n	800080a <I3G4250D_ReadXYZAngRate+0x10e>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <I3G4250D_ReadXYZAngRate+0x158>)
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000802:	e002      	b.n	800080a <I3G4250D_ReadXYZAngRate+0x10e>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <I3G4250D_ReadXYZAngRate+0x15c>)
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000808:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
 800080e:	e017      	b.n	8000840 <I3G4250D_ReadXYZAngRate+0x144>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 8000810:	6a3b      	ldr	r3, [r7, #32]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000818:	4413      	add	r3, r2
 800081a:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800081e:	ee07 3a90 	vmov	s15, r3
 8000822:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000826:	6a3b      	ldr	r3, [r7, #32]
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	4413      	add	r3, r2
 800082e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000836:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 800083a:	6a3b      	ldr	r3, [r7, #32]
 800083c:	3301      	adds	r3, #1
 800083e:	623b      	str	r3, [r7, #32]
 8000840:	6a3b      	ldr	r3, [r7, #32]
 8000842:	2b02      	cmp	r3, #2
 8000844:	dde4      	ble.n	8000810 <I3G4250D_ReadXYZAngRate+0x114>
  }
}
 8000846:	bf00      	nop
 8000848:	3728      	adds	r7, #40	; 0x28
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	410c0000 	.word	0x410c0000
 8000854:	418c0000 	.word	0x418c0000
 8000858:	428c0000 	.word	0x428c0000

0800085c <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000866:	2300      	movs	r3, #0
 8000868:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800086a:	f000 fe49 	bl	8001500 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000874:	f107 030f 	add.w	r3, r7, #15
 8000878:	2201      	movs	r2, #1
 800087a:	2120      	movs	r1, #32
 800087c:	4618      	mov	r0, r3
 800087e:	f000 fe85 	bl	800158c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8000882:	88fb      	ldrh	r3, [r7, #6]
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	b29b      	uxth	r3, r3
 8000888:	b2db      	uxtb	r3, r3
 800088a:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800088c:	f107 030f 	add.w	r3, r7, #15
 8000890:	2201      	movs	r2, #1
 8000892:	2123      	movs	r1, #35	; 0x23
 8000894:	4618      	mov	r0, r3
 8000896:	f000 fe79 	bl	800158c <GYRO_IO_Write>
}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80008b6:	f000 fe23 	bl	8001500 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	2201      	movs	r2, #1
 80008be:	210f      	movs	r1, #15
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fe95 	bl	80015f0 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80008c6:	79fb      	ldrb	r3, [r7, #7]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	2201      	movs	r2, #1
 80008da:	2124      	movs	r1, #36	; 0x24
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 fe87 	bl	80015f0 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80008ec:	1dfb      	adds	r3, r7, #7
 80008ee:	2201      	movs	r2, #1
 80008f0:	2124      	movs	r1, #36	; 0x24
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fe4a 	bl	800158c <GYRO_IO_Write>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800090a:	2300      	movs	r3, #0
 800090c:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000914:	f107 030f 	add.w	r3, r7, #15
 8000918:	2201      	movs	r2, #1
 800091a:	2120      	movs	r1, #32
 800091c:	4618      	mov	r0, r3
 800091e:	f000 fe35 	bl	800158c <GYRO_IO_Write>
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b084      	sub	sp, #16
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000934:	2300      	movs	r3, #0
 8000936:	73fb      	strb	r3, [r7, #15]
 8000938:	2300      	movs	r3, #0
 800093a:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800093c:	f107 030f 	add.w	r3, r7, #15
 8000940:	2201      	movs	r2, #1
 8000942:	2130      	movs	r1, #48	; 0x30
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fe53 	bl	80015f0 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800094a:	f107 030e 	add.w	r3, r7, #14
 800094e:	2201      	movs	r2, #1
 8000950:	2122      	movs	r1, #34	; 0x22
 8000952:	4618      	mov	r0, r3
 8000954:	f000 fe4c 	bl	80015f0 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800095e:	b2db      	uxtb	r3, r3
 8000960:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	121b      	asrs	r3, r3, #8
 8000968:	b25a      	sxtb	r2, r3
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	b25b      	sxtb	r3, r3
 800096e:	4313      	orrs	r3, r2
 8000970:	b25b      	sxtb	r3, r3
 8000972:	b2db      	uxtb	r3, r3
 8000974:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8000976:	7bbb      	ldrb	r3, [r7, #14]
 8000978:	f023 0320 	bic.w	r3, r3, #32
 800097c:	b2db      	uxtb	r3, r3
 800097e:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8000980:	88fb      	ldrh	r3, [r7, #6]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	7bbb      	ldrb	r3, [r7, #14]
 8000986:	4313      	orrs	r3, r2
 8000988:	b2db      	uxtb	r3, r3
 800098a:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800098c:	f107 030f 	add.w	r3, r7, #15
 8000990:	2201      	movs	r2, #1
 8000992:	2130      	movs	r1, #48	; 0x30
 8000994:	4618      	mov	r0, r3
 8000996:	f000 fdf9 	bl	800158c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800099a:	f107 030e 	add.w	r3, r7, #14
 800099e:	2201      	movs	r2, #1
 80009a0:	2122      	movs	r1, #34	; 0x22
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 fdf2 	bl	800158c <GYRO_IO_Write>
}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80009ba:	f107 030f 	add.w	r3, r7, #15
 80009be:	2201      	movs	r2, #1
 80009c0:	2122      	movs	r1, #34	; 0x22
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fe14 	bl	80015f0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d10a      	bne.n	80009e4 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
 80009d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	73fb      	strb	r3, [r7, #15]
 80009e2:	e00c      	b.n	80009fe <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d109      	bne.n	80009fe <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	f023 0308 	bic.w	r3, r3, #8
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	f043 0308 	orr.w	r3, r3, #8
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80009fe:	f107 030f 	add.w	r3, r7, #15
 8000a02:	2201      	movs	r2, #1
 8000a04:	2122      	movs	r1, #34	; 0x22
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fdc0 	bl	800158c <GYRO_IO_Write>
}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000a1e:	f107 030f 	add.w	r3, r7, #15
 8000a22:	2201      	movs	r2, #1
 8000a24:	2122      	movs	r1, #34	; 0x22
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 fde2 	bl	80015f0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d107      	bne.n	8000a42 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	73fb      	strb	r3, [r7, #15]
 8000a40:	e009      	b.n	8000a56 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d106      	bne.n	8000a56 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	f023 0308 	bic.w	r3, r3, #8
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000a56:	f107 030f 	add.w	r3, r7, #15
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2122      	movs	r1, #34	; 0x22
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fd94 	bl	800158c <GYRO_IO_Write>
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8000a76:	f107 030f 	add.w	r3, r7, #15
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2121      	movs	r1, #33	; 0x21
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 fdb6 	bl	80015f0 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8000a8e:	7bfa      	ldrb	r2, [r7, #15]
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8000a98:	f107 030f 	add.w	r3, r7, #15
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2121      	movs	r1, #33	; 0x21
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fd73 	bl	800158c <GYRO_IO_Write>
}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b084      	sub	sp, #16
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000ab8:	f107 030f 	add.w	r3, r7, #15
 8000abc:	2201      	movs	r2, #1
 8000abe:	2124      	movs	r1, #36	; 0x24
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 fd95 	bl	80015f0 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	f023 0310 	bic.w	r3, r3, #16
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000ad0:	7bfa      	ldrb	r2, [r7, #15]
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000ada:	f107 030f 	add.w	r3, r7, #15
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2124      	movs	r1, #36	; 0x24
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fd52 	bl	800158c <GYRO_IO_Write>
}
 8000ae8:	bf00      	nop
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8000af8:	f107 0318 	add.w	r3, r7, #24
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	809a      	strh	r2, [r3, #4]
  int16_t RawData[3] = {0};
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8000b10:	f04f 0300 	mov.w	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8000b1a:	f107 030f 	add.w	r3, r7, #15
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2123      	movs	r1, #35	; 0x23
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 fd64 	bl	80015f0 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8000b28:	f107 0318 	add.w	r3, r7, #24
 8000b2c:	2206      	movs	r2, #6
 8000b2e:	2128      	movs	r1, #40	; 0x28
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 fd5d 	bl	80015f0 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d126      	bne.n	8000b8e <L3GD20_ReadXYZAngRate+0x9e>
  {
    for(i=0; i<3; i++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
 8000b44:	e01f      	b.n	8000b86 <L3GD20_ReadXYZAngRate+0x96>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8000b46:	6a3b      	ldr	r3, [r7, #32]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000b50:	4413      	add	r3, r2
 8000b52:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	021b      	lsls	r3, r3, #8
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	6a3b      	ldr	r3, [r7, #32]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b64:	440b      	add	r3, r1
 8000b66:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	4413      	add	r3, r2
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	b21a      	sxth	r2, r3
 8000b72:	6a3b      	ldr	r3, [r7, #32]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b7a:	440b      	add	r3, r1
 8000b7c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8000b80:	6a3b      	ldr	r3, [r7, #32]
 8000b82:	3301      	adds	r3, #1
 8000b84:	623b      	str	r3, [r7, #32]
 8000b86:	6a3b      	ldr	r3, [r7, #32]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	dddc      	ble.n	8000b46 <L3GD20_ReadXYZAngRate+0x56>
 8000b8c:	e025      	b.n	8000bda <L3GD20_ReadXYZAngRate+0xea>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
 8000b92:	e01f      	b.n	8000bd4 <L3GD20_ReadXYZAngRate+0xe4>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8000b94:	6a3b      	ldr	r3, [r7, #32]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000b9c:	4413      	add	r3, r2
 8000b9e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	021b      	lsls	r3, r3, #8
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	3301      	adds	r3, #1
 8000bae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000bb2:	440b      	add	r3, r1
 8000bb4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	4413      	add	r3, r2
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	b21a      	sxth	r2, r3
 8000bc0:	6a3b      	ldr	r3, [r7, #32]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000bc8:	440b      	add	r3, r1
 8000bca:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8000bce:	6a3b      	ldr	r3, [r7, #32]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	623b      	str	r3, [r7, #32]
 8000bd4:	6a3b      	ldr	r3, [r7, #32]
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	dddc      	ble.n	8000b94 <L3GD20_ReadXYZAngRate+0xa4>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000be0:	2b10      	cmp	r3, #16
 8000be2:	d006      	beq.n	8000bf2 <L3GD20_ReadXYZAngRate+0x102>
 8000be4:	2b20      	cmp	r3, #32
 8000be6:	d007      	beq.n	8000bf8 <L3GD20_ReadXYZAngRate+0x108>
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d108      	bne.n	8000bfe <L3GD20_ReadXYZAngRate+0x10e>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <L3GD20_ReadXYZAngRate+0x154>)
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8000bf0:	e005      	b.n	8000bfe <L3GD20_ReadXYZAngRate+0x10e>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <L3GD20_ReadXYZAngRate+0x158>)
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8000bf6:	e002      	b.n	8000bfe <L3GD20_ReadXYZAngRate+0x10e>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <L3GD20_ReadXYZAngRate+0x15c>)
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8000bfc:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
 8000c02:	e017      	b.n	8000c34 <L3GD20_ReadXYZAngRate+0x144>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8000c04:	6a3b      	ldr	r3, [r7, #32]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000c0c:	4413      	add	r3, r2
 8000c0e:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8000c12:	ee07 3a90 	vmov	s15, r3
 8000c16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c1a:	6a3b      	ldr	r3, [r7, #32]
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c2a:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8000c2e:	6a3b      	ldr	r3, [r7, #32]
 8000c30:	3301      	adds	r3, #1
 8000c32:	623b      	str	r3, [r7, #32]
 8000c34:	6a3b      	ldr	r3, [r7, #32]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	dde4      	ble.n	8000c04 <L3GD20_ReadXYZAngRate+0x114>
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	; 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	410c0000 	.word	0x410c0000
 8000c48:	418c0000 	.word	0x418c0000
 8000c4c:	428c0000 	.word	0x428c0000

08000c50 <error>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//LED Indication

void error(void) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <error+0x20>)
 8000c5c:	f001 fc2a 	bl	80024b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c66:	4802      	ldr	r0, [pc, #8]	; (8000c70 <error+0x20>)
 8000c68:	f001 fc24 	bl	80024b4 <HAL_GPIO_WritePin>
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	48001000 	.word	0x48001000

08000c74 <success>:

void success(void) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <success+0x20>)
 8000c80:	f001 fc18 	bl	80024b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c8a:	4802      	ldr	r0, [pc, #8]	; (8000c94 <success+0x20>)
 8000c8c:	f001 fc12 	bl	80024b4 <HAL_GPIO_WritePin>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	48001000 	.word	0x48001000

08000c98 <I2C_Read>:

//I2C Operations

static uint8_t I2C_Read(uint16_t Addr, uint8_t Reg) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af04      	add	r7, sp, #16
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	460a      	mov	r2, r1
 8000ca2:	80fb      	strh	r3, [r7, #6]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]
	uint8_t value = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8000cb0:	797b      	ldrb	r3, [r7, #5]
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	88f9      	ldrh	r1, [r7, #6]
 8000cb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cba:	9302      	str	r3, [sp, #8]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	9301      	str	r3, [sp, #4]
 8000cc0:	f107 030e 	add.w	r3, r7, #14
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	4808      	ldr	r0, [pc, #32]	; (8000cec <I2C_Read+0x54>)
 8000cca:	f001 fe71 	bl	80029b0 <HAL_I2C_Mem_Read>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) error();
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d002      	beq.n	8000cde <I2C_Read+0x46>
 8000cd8:	f7ff ffba 	bl	8000c50 <error>
 8000cdc:	e001      	b.n	8000ce2 <I2C_Read+0x4a>
	else success();
 8000cde:	f7ff ffc9 	bl	8000c74 <success>
	return value;
 8000ce2:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200005ec 	.word	0x200005ec

08000cf0 <I2C_Write>:

static void I2C_Write(uint16_t Addr, uint8_t Reg, uint8_t Value) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af04      	add	r7, sp, #16
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80fb      	strh	r3, [r7, #6]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	717b      	strb	r3, [r7, #5]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 8000d06:	797b      	ldrb	r3, [r7, #5]
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	88f9      	ldrh	r1, [r7, #6]
 8000d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d10:	9302      	str	r3, [sp, #8]
 8000d12:	2301      	movs	r3, #1
 8000d14:	9301      	str	r3, [sp, #4]
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	4808      	ldr	r0, [pc, #32]	; (8000d40 <I2C_Write+0x50>)
 8000d1e:	f001 fd25 	bl	800276c <HAL_I2C_Mem_Write>
 8000d22:	4603      	mov	r3, r0
 8000d24:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) error();
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d002      	beq.n	8000d32 <I2C_Write+0x42>
 8000d2c:	f7ff ff90 	bl	8000c50 <error>
	else success();
}
 8000d30:	e001      	b.n	8000d36 <I2C_Write+0x46>
	else success();
 8000d32:	f7ff ff9f 	bl	8000c74 <success>
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200005ec 	.word	0x200005ec

08000d44 <I2C_ReadID>:

uint8_t I2C_ReadID(uint16_t Addr) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	80fb      	strh	r3, [r7, #6]
	uint8_t ctrl = 0x00;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73fb      	strb	r3, [r7, #15]
	ctrl = I2C_Read(Addr,0x0F);
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	210f      	movs	r1, #15
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff9e 	bl	8000c98 <I2C_Read>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	73fb      	strb	r3, [r7, #15]
	return ctrl;
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <Accel_Ini>:

//Accelerometer Operations

void Accel_Ini(void) {
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
	uint8_t ctrl;
	if (I2C_ReadID(0x33)==0x33)	{
 8000d70:	2033      	movs	r0, #51	; 0x33
 8000d72:	f7ff ffe7 	bl	8000d44 <I2C_ReadID>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b33      	cmp	r3, #51	; 0x33
 8000d7a:	d11f      	bne.n	8000dbc <Accel_Ini+0x52>
		ctrl=0b10010111;
 8000d7c:	2397      	movs	r3, #151	; 0x97
 8000d7e:	71fb      	strb	r3, [r7, #7]
		I2C_Write(0x32,0x20,ctrl);
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	461a      	mov	r2, r3
 8000d84:	2120      	movs	r1, #32
 8000d86:	2032      	movs	r0, #50	; 0x32
 8000d88:	f7ff ffb2 	bl	8000cf0 <I2C_Write>
		ctrl=0b00010000;
 8000d8c:	2310      	movs	r3, #16
 8000d8e:	71fb      	strb	r3, [r7, #7]
		I2C_Write(0x32,0x22,ctrl);
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	461a      	mov	r2, r3
 8000d94:	2122      	movs	r1, #34	; 0x22
 8000d96:	2032      	movs	r0, #50	; 0x32
 8000d98:	f7ff ffaa 	bl	8000cf0 <I2C_Write>
		ctrl=0b00001000;
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	71fb      	strb	r3, [r7, #7]
		I2C_Write(0x32,0x23,ctrl);
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	461a      	mov	r2, r3
 8000da4:	2123      	movs	r1, #35	; 0x23
 8000da6:	2032      	movs	r0, #50	; 0x32
 8000da8:	f7ff ffa2 	bl	8000cf0 <I2C_Write>
		ctrl=0b00000000;
 8000dac:	2300      	movs	r3, #0
 8000dae:	71fb      	strb	r3, [r7, #7]
		I2C_Write(0x32,0x25,ctrl);
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	461a      	mov	r2, r3
 8000db4:	2125      	movs	r1, #37	; 0x25
 8000db6:	2032      	movs	r0, #50	; 0x32
 8000db8:	f7ff ff9a 	bl	8000cf0 <I2C_Write>
	}
	HAL_Delay(500);
 8000dbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc0:	f000 fe8a 	bl	8001ad8 <HAL_Delay>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <Accel_GetXYZ>:

void Accel_GetXYZ(int16_t* pData) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af04      	add	r7, sp, #16
 8000dd2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73bb      	strb	r3, [r7, #14]
	uint8_t buffer[6];
	uint8_t i=0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Read(&hi2c1, 0x32, 0x28|0x80, I2C_MEMADD_SIZE_8BIT, buffer, 6, 0x10000);
 8000ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de0:	9302      	str	r3, [sp, #8]
 8000de2:	2306      	movs	r3, #6
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2301      	movs	r3, #1
 8000dee:	22a8      	movs	r2, #168	; 0xa8
 8000df0:	2132      	movs	r1, #50	; 0x32
 8000df2:	481c      	ldr	r0, [pc, #112]	; (8000e64 <Accel_GetXYZ+0x98>)
 8000df4:	f001 fddc 	bl	80029b0 <HAL_I2C_Mem_Read>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	73bb      	strb	r3, [r7, #14]
 	if(status != HAL_OK) error();
 8000dfc:	7bbb      	ldrb	r3, [r7, #14]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d002      	beq.n	8000e08 <Accel_GetXYZ+0x3c>
 8000e02:	f7ff ff25 	bl	8000c50 <error>
 8000e06:	e001      	b.n	8000e0c <Accel_GetXYZ+0x40>
	else success();
 8000e08:	f7ff ff34 	bl	8000c74 <success>

	for(i=0;i<3;i++) {
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]
 8000e10:	e020      	b.n	8000e54 <Accel_GetXYZ+0x88>
		pData[i]=((int16_t)((uint16_t)buffer[2*i+1]<<8)+buffer[2*i]) / 16;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	3301      	adds	r3, #1
 8000e18:	f107 0210 	add.w	r2, r7, #16
 8000e1c:	4413      	add	r3, r2
 8000e1e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	461a      	mov	r2, r3
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	f107 0110 	add.w	r1, r7, #16
 8000e30:	440b      	add	r3, r1
 8000e32:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000e36:	4413      	add	r3, r2
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	da00      	bge.n	8000e3e <Accel_GetXYZ+0x72>
 8000e3c:	330f      	adds	r3, #15
 8000e3e:	111b      	asrs	r3, r3, #4
 8000e40:	4619      	mov	r1, r3
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	b20a      	sxth	r2, r1
 8000e4c:	801a      	strh	r2, [r3, #0]
	for(i=0;i<3;i++) {
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	3301      	adds	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d9db      	bls.n	8000e12 <Accel_GetXYZ+0x46>
	}
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200005ec 	.word	0x200005ec

08000e68 <Mag_Ini>:

//Magnetometer Operations

void Mag_Ini(void) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
	uint8_t ctrl;
	if (I2C_ReadID(0x3C)==0x3C)	{
 8000e6e:	203c      	movs	r0, #60	; 0x3c
 8000e70:	f7ff ff68 	bl	8000d44 <I2C_ReadID>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b3c      	cmp	r3, #60	; 0x3c
 8000e78:	d117      	bne.n	8000eaa <Mag_Ini+0x42>
		ctrl=0b00011100;
 8000e7a:	231c      	movs	r3, #28
 8000e7c:	71fb      	strb	r3, [r7, #7]
		I2C_Write(0x3C,0x00,ctrl);
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	461a      	mov	r2, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	203c      	movs	r0, #60	; 0x3c
 8000e86:	f7ff ff33 	bl	8000cf0 <I2C_Write>
		ctrl=0b11100000;
 8000e8a:	23e0      	movs	r3, #224	; 0xe0
 8000e8c:	71fb      	strb	r3, [r7, #7]
		I2C_Write(0x3C,0x01,ctrl);
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	461a      	mov	r2, r3
 8000e92:	2101      	movs	r1, #1
 8000e94:	203c      	movs	r0, #60	; 0x3c
 8000e96:	f7ff ff2b 	bl	8000cf0 <I2C_Write>
		ctrl=0b00000000;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	71fb      	strb	r3, [r7, #7]
		I2C_Write(0x3C,0x02,ctrl);
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	203c      	movs	r0, #60	; 0x3c
 8000ea6:	f7ff ff23 	bl	8000cf0 <I2C_Write>
	}
	HAL_Delay(500);
 8000eaa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eae:	f000 fe13 	bl	8001ad8 <HAL_Delay>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <Mag_GetXYZ>:

void Mag_GetXYZ(int16_t* pData) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af04      	add	r7, sp, #16
 8000ec2:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6];

	HAL_StatusTypeDef status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Read(&hi2c1, 0x3C, 0x03|0x80, I2C_MEMADD_SIZE_8BIT, buffer, 6, 0x10000);
 8000ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ecc:	9302      	str	r3, [sp, #8]
 8000ece:	2306      	movs	r3, #6
 8000ed0:	9301      	str	r3, [sp, #4]
 8000ed2:	f107 0308 	add.w	r3, r7, #8
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	2283      	movs	r2, #131	; 0x83
 8000edc:	213c      	movs	r1, #60	; 0x3c
 8000ede:	4818      	ldr	r0, [pc, #96]	; (8000f40 <Mag_GetXYZ+0x84>)
 8000ee0:	f001 fd66 	bl	80029b0 <HAL_I2C_Mem_Read>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	73fb      	strb	r3, [r7, #15]
 	if(status != HAL_OK) error();
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d002      	beq.n	8000ef4 <Mag_GetXYZ+0x38>
 8000eee:	f7ff feaf 	bl	8000c50 <error>
 8000ef2:	e001      	b.n	8000ef8 <Mag_GetXYZ+0x3c>
	else success();
 8000ef4:	f7ff febe 	bl	8000c74 <success>
	pData[0]=((int16_t)((uint16_t)buffer[0]<<8)+buffer[1]);
 8000ef8:	7a3b      	ldrb	r3, [r7, #8]
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	7a7b      	ldrb	r3, [r7, #9]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	4413      	add	r3, r2
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	b21a      	sxth	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	801a      	strh	r2, [r3, #0]
	pData[1]=((int16_t)((uint16_t)buffer[4]<<8)+buffer[5]);
 8000f0c:	7b3b      	ldrb	r3, [r7, #12]
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	7b7b      	ldrb	r3, [r7, #13]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	4413      	add	r3, r2
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	b212      	sxth	r2, r2
 8000f20:	801a      	strh	r2, [r3, #0]
	pData[2]=((int16_t)((uint16_t)buffer[2]<<8)+buffer[3]);
 8000f22:	7abb      	ldrb	r3, [r7, #10]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	7afb      	ldrb	r3, [r7, #11]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3304      	adds	r3, #4
 8000f34:	b212      	sxth	r2, r2
 8000f36:	801a      	strh	r2, [r3, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200005ec 	.word	0x200005ec

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f46:	b08b      	sub	sp, #44	; 0x2c
 8000f48:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4a:	f000 fd5f 	bl	8001a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4e:	f000 f8ef 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f52:	f7ff f995 	bl	8000280 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000f56:	f009 fbeb 	bl	800a730 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000f5a:	f7ff fa03 	bl	8000364 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f5e:	f000 f997 	bl	8001290 <MX_SPI1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000f62:	f000 f945 	bl	80011f0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000f66:	200a      	movs	r0, #10
 8000f68:	f000 ff2e 	bl	8001dc8 <HAL_NVIC_DisableIRQ>
  Accel_Ini();
 8000f6c:	f7ff fefd 	bl	8000d6a <Accel_Ini>
  Mag_Ini();
 8000f70:	f7ff ff7a 	bl	8000e68 <Mag_Ini>
  BSP_GYRO_Init();
 8000f74:	f000 fb76 	bl	8001664 <BSP_GYRO_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Accel_GetXYZ(AccelData);
 8000f78:	4861      	ldr	r0, [pc, #388]	; (8001100 <main+0x1bc>)
 8000f7a:	f7ff ff27 	bl	8000dcc <Accel_GetXYZ>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f7e:	200a      	movs	r0, #10
 8000f80:	f000 ff0a 	bl	8001d98 <HAL_NVIC_EnableIRQ>
  BSP_GYRO_EnableIT(L3GD20_INT2);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f000 fc23 	bl	80017d0 <BSP_GYRO_EnableIT>
  while (1) {
	  if (accel_flag) {
 8000f8a:	4b5e      	ldr	r3, [pc, #376]	; (8001104 <main+0x1c0>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d017      	beq.n	8000fc2 <main+0x7e>
		  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000f92:	200a      	movs	r0, #10
 8000f94:	f000 ff18 	bl	8001dc8 <HAL_NVIC_DisableIRQ>
		  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9e:	485a      	ldr	r0, [pc, #360]	; (8001108 <main+0x1c4>)
 8000fa0:	f001 fa88 	bl	80024b4 <HAL_GPIO_WritePin>
		  Accel_GetXYZ(AccelData);
 8000fa4:	4856      	ldr	r0, [pc, #344]	; (8001100 <main+0x1bc>)
 8000fa6:	f7ff ff11 	bl	8000dcc <Accel_GetXYZ>
		  HAL_Delay(10);
 8000faa:	200a      	movs	r0, #10
 8000fac:	f000 fd94 	bl	8001ad8 <HAL_Delay>
		  accel_flag = 0;
 8000fb0:	4b54      	ldr	r3, [pc, #336]	; (8001104 <main+0x1c0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
		  acc_transmit = 1;
 8000fb6:	4b55      	ldr	r3, [pc, #340]	; (800110c <main+0x1c8>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
		  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000fbc:	200a      	movs	r0, #10
 8000fbe:	f000 feeb 	bl	8001d98 <HAL_NVIC_EnableIRQ>
	  }
	  if (magn_flag) {
 8000fc2:	4b53      	ldr	r3, [pc, #332]	; (8001110 <main+0x1cc>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d014      	beq.n	8000ff4 <main+0xb0>
		  HAL_NVIC_DisableIRQ(EXTI2_TSC_IRQn);
 8000fca:	2008      	movs	r0, #8
 8000fcc:	f000 fefc 	bl	8001dc8 <HAL_NVIC_DisableIRQ>
		  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd6:	484c      	ldr	r0, [pc, #304]	; (8001108 <main+0x1c4>)
 8000fd8:	f001 fa6c 	bl	80024b4 <HAL_GPIO_WritePin>
		  Mag_GetXYZ(MagData);
 8000fdc:	484d      	ldr	r0, [pc, #308]	; (8001114 <main+0x1d0>)
 8000fde:	f7ff ff6d 	bl	8000ebc <Mag_GetXYZ>
		  magn_flag = 0;
 8000fe2:	4b4b      	ldr	r3, [pc, #300]	; (8001110 <main+0x1cc>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
		  magn_transmit = 1;
 8000fe8:	4b4b      	ldr	r3, [pc, #300]	; (8001118 <main+0x1d4>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
		  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000fee:	2008      	movs	r0, #8
 8000ff0:	f000 fed2 	bl	8001d98 <HAL_NVIC_EnableIRQ>
	  }
	  if (gyro_flag) {
 8000ff4:	4b49      	ldr	r3, [pc, #292]	; (800111c <main+0x1d8>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00e      	beq.n	800101a <main+0xd6>
		  BSP_GYRO_DisableIT(L3GD20_INT2);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f000 fbfd 	bl	80017fc <BSP_GYRO_DisableIT>
		  BSP_GYRO_GetXYZ(GyroData);
 8001002:	4847      	ldr	r0, [pc, #284]	; (8001120 <main+0x1dc>)
 8001004:	f000 fc10 	bl	8001828 <BSP_GYRO_GetXYZ>
		  gyro_flag = 0;
 8001008:	4b44      	ldr	r3, [pc, #272]	; (800111c <main+0x1d8>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
		  gyro_transmit = 1;
 800100e:	4b45      	ldr	r3, [pc, #276]	; (8001124 <main+0x1e0>)
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
		  BSP_GYRO_EnableIT(L3GD20_INT2);
 8001014:	2001      	movs	r0, #1
 8001016:	f000 fbdb 	bl	80017d0 <BSP_GYRO_EnableIT>
	  }
	  if (magn_transmit && acc_transmit && gyro_transmit) {
 800101a:	4b3f      	ldr	r3, [pc, #252]	; (8001118 <main+0x1d4>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0b3      	beq.n	8000f8a <main+0x46>
 8001022:	4b3a      	ldr	r3, [pc, #232]	; (800110c <main+0x1c8>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0af      	beq.n	8000f8a <main+0x46>
 800102a:	4b3e      	ldr	r3, [pc, #248]	; (8001124 <main+0x1e0>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0ab      	beq.n	8000f8a <main+0x46>
		  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8001032:	200a      	movs	r0, #10
 8001034:	f000 fec8 	bl	8001dc8 <HAL_NVIC_DisableIRQ>
		  HAL_NVIC_DisableIRQ(EXTI2_TSC_IRQn);
 8001038:	2008      	movs	r0, #8
 800103a:	f000 fec5 	bl	8001dc8 <HAL_NVIC_DisableIRQ>
		  BSP_GYRO_DisableIT(L3GD20_INT2);
 800103e:	2001      	movs	r0, #1
 8001040:	f000 fbdc 	bl	80017fc <BSP_GYRO_DisableIT>
		  sprintf(str1, "%d;%5d;%5d;%5d;%4d;%4d;%4d;%8d;%8d;%8d\n", HAL_GetTick(), AccelData[0], AccelData[1], AccelData[2],
 8001044:	f000 fd3c 	bl	8001ac0 <HAL_GetTick>
 8001048:	4684      	mov	ip, r0
 800104a:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <main+0x1bc>)
 800104c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001050:	469e      	mov	lr, r3
 8001052:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <main+0x1bc>)
 8001054:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001058:	461a      	mov	r2, r3
 800105a:	4b29      	ldr	r3, [pc, #164]	; (8001100 <main+0x1bc>)
 800105c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001060:	4619      	mov	r1, r3
				  MagData[0], MagData[1], MagData[2], (int)GyroData[0], (int)GyroData[1], (int)GyroData[2]);
 8001062:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <main+0x1d0>)
 8001064:	f9b3 3000 	ldrsh.w	r3, [r3]
		  sprintf(str1, "%d;%5d;%5d;%5d;%4d;%4d;%4d;%8d;%8d;%8d\n", HAL_GetTick(), AccelData[0], AccelData[1], AccelData[2],
 8001068:	4618      	mov	r0, r3
				  MagData[0], MagData[1], MagData[2], (int)GyroData[0], (int)GyroData[1], (int)GyroData[2]);
 800106a:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <main+0x1d0>)
 800106c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		  sprintf(str1, "%d;%5d;%5d;%5d;%4d;%4d;%4d;%8d;%8d;%8d\n", HAL_GetTick(), AccelData[0], AccelData[1], AccelData[2],
 8001070:	461c      	mov	r4, r3
				  MagData[0], MagData[1], MagData[2], (int)GyroData[0], (int)GyroData[1], (int)GyroData[2]);
 8001072:	4b28      	ldr	r3, [pc, #160]	; (8001114 <main+0x1d0>)
 8001074:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		  sprintf(str1, "%d;%5d;%5d;%5d;%4d;%4d;%4d;%8d;%8d;%8d\n", HAL_GetTick(), AccelData[0], AccelData[1], AccelData[2],
 8001078:	461d      	mov	r5, r3
				  MagData[0], MagData[1], MagData[2], (int)GyroData[0], (int)GyroData[1], (int)GyroData[2]);
 800107a:	4b29      	ldr	r3, [pc, #164]	; (8001120 <main+0x1dc>)
 800107c:	edd3 7a00 	vldr	s15, [r3]
		  sprintf(str1, "%d;%5d;%5d;%5d;%4d;%4d;%4d;%8d;%8d;%8d\n", HAL_GetTick(), AccelData[0], AccelData[1], AccelData[2],
 8001080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001084:	ee17 6a90 	vmov	r6, s15
				  MagData[0], MagData[1], MagData[2], (int)GyroData[0], (int)GyroData[1], (int)GyroData[2]);
 8001088:	4b25      	ldr	r3, [pc, #148]	; (8001120 <main+0x1dc>)
 800108a:	edd3 7a01 	vldr	s15, [r3, #4]
		  sprintf(str1, "%d;%5d;%5d;%5d;%4d;%4d;%4d;%8d;%8d;%8d\n", HAL_GetTick(), AccelData[0], AccelData[1], AccelData[2],
 800108e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001092:	edc7 7a01 	vstr	s15, [r7, #4]
				  MagData[0], MagData[1], MagData[2], (int)GyroData[0], (int)GyroData[1], (int)GyroData[2]);
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <main+0x1dc>)
 8001098:	edd3 7a02 	vldr	s15, [r3, #8]
		  sprintf(str1, "%d;%5d;%5d;%5d;%4d;%4d;%4d;%8d;%8d;%8d\n", HAL_GetTick(), AccelData[0], AccelData[1], AccelData[2],
 800109c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a0:	ee17 3a90 	vmov	r3, s15
 80010a4:	9307      	str	r3, [sp, #28]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	9306      	str	r3, [sp, #24]
 80010aa:	9605      	str	r6, [sp, #20]
 80010ac:	9504      	str	r5, [sp, #16]
 80010ae:	9403      	str	r4, [sp, #12]
 80010b0:	9002      	str	r0, [sp, #8]
 80010b2:	9101      	str	r1, [sp, #4]
 80010b4:	9200      	str	r2, [sp, #0]
 80010b6:	4673      	mov	r3, lr
 80010b8:	4662      	mov	r2, ip
 80010ba:	491b      	ldr	r1, [pc, #108]	; (8001128 <main+0x1e4>)
 80010bc:	481b      	ldr	r0, [pc, #108]	; (800112c <main+0x1e8>)
 80010be:	f00a f831 	bl	800b124 <siprintf>
		  CDC_Transmit_FS((uint8_t*)str1, strlen(str1));
 80010c2:	481a      	ldr	r0, [pc, #104]	; (800112c <main+0x1e8>)
 80010c4:	f7ff f884 	bl	80001d0 <strlen>
 80010c8:	4603      	mov	r3, r0
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	4619      	mov	r1, r3
 80010ce:	4817      	ldr	r0, [pc, #92]	; (800112c <main+0x1e8>)
 80010d0:	f009 fbec 	bl	800a8ac <CDC_Transmit_FS>
		  acc_transmit = magn_transmit = gyro_transmit = 0;
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <main+0x1e0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <main+0x1e0>)
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <main+0x1d4>)
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <main+0x1d4>)
 80010e4:	781a      	ldrb	r2, [r3, #0]
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <main+0x1c8>)
 80010e8:	701a      	strb	r2, [r3, #0]
		  BSP_GYRO_EnableIT(L3GD20_INT2);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 fb70 	bl	80017d0 <BSP_GYRO_EnableIT>
		  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 80010f0:	2008      	movs	r0, #8
 80010f2:	f000 fe51 	bl	8001d98 <HAL_NVIC_EnableIRQ>
		  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010f6:	200a      	movs	r0, #10
 80010f8:	f000 fe4e 	bl	8001d98 <HAL_NVIC_EnableIRQ>
	  if (accel_flag) {
 80010fc:	e745      	b.n	8000f8a <main+0x46>
 80010fe:	bf00      	nop
 8001100:	20000338 	.word	0x20000338
 8001104:	20000268 	.word	0x20000268
 8001108:	48001000 	.word	0x48001000
 800110c:	2000026b 	.word	0x2000026b
 8001110:	20000269 	.word	0x20000269
 8001114:	20000340 	.word	0x20000340
 8001118:	2000026c 	.word	0x2000026c
 800111c:	2000026a 	.word	0x2000026a
 8001120:	20000348 	.word	0x20000348
 8001124:	2000026d 	.word	0x2000026d
 8001128:	0800b948 	.word	0x0800b948
 800112c:	20000270 	.word	0x20000270

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b09e      	sub	sp, #120	; 0x78
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800113a:	2228      	movs	r2, #40	; 0x28
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f009 ffe8 	bl	800b114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001154:	463b      	mov	r3, r7
 8001156:	223c      	movs	r2, #60	; 0x3c
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f009 ffda 	bl	800b114 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001160:	2303      	movs	r3, #3
 8001162:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001164:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001168:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116e:	2301      	movs	r3, #1
 8001170:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001172:	2310      	movs	r3, #16
 8001174:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001176:	2302      	movs	r3, #2
 8001178:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800117a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800117e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001180:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001184:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001186:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800118a:	4618      	mov	r0, r3
 800118c:	f003 fb58 	bl	8004840 <HAL_RCC_OscConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001196:	f000 f869 	bl	800126c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119a:	230f      	movs	r3, #15
 800119c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119e:	2302      	movs	r3, #2
 80011a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011b4:	2102      	movs	r1, #2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 fb4e 	bl	8005858 <HAL_RCC_ClockConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011c2:	f000 f853 	bl	800126c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <SystemClock_Config+0xbc>)
 80011c8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80011ce:	2300      	movs	r3, #0
 80011d0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d2:	463b      	mov	r3, r7
 80011d4:	4618      	mov	r0, r3
 80011d6:	f004 fdc9 	bl	8005d6c <HAL_RCCEx_PeriphCLKConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80011e0:	f000 f844 	bl	800126c <Error_Handler>
  }
}
 80011e4:	bf00      	nop
 80011e6:	3778      	adds	r7, #120	; 0x78
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	00020020 	.word	0x00020020

080011f0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	200a      	movs	r0, #10
 80011fa:	f000 fda1 	bl	8001d40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011fe:	200a      	movs	r0, #10
 8001200:	f000 fdca 	bl	8001d98 <HAL_NVIC_EnableIRQ>
  /* EXTI2_TSC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	2008      	movs	r0, #8
 800120a:	f000 fd99 	bl	8001d40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 800120e:	2008      	movs	r0, #8
 8001210:	f000 fdc2 	bl	8001d98 <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	2100      	movs	r1, #0
 8001218:	2007      	movs	r0, #7
 800121a:	f000 fd91 	bl	8001d40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800121e:	2007      	movs	r0, #7
 8001220:	f000 fdba 	bl	8001d98 <HAL_NVIC_EnableIRQ>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	2b04      	cmp	r3, #4
 8001236:	d004      	beq.n	8001242 <HAL_GPIO_EXTI_Callback+0x1a>
 8001238:	2b10      	cmp	r3, #16
 800123a:	d005      	beq.n	8001248 <HAL_GPIO_EXTI_Callback+0x20>
 800123c:	2b02      	cmp	r3, #2
 800123e:	d006      	beq.n	800124e <HAL_GPIO_EXTI_Callback+0x26>
		gyro_flag = 1;
	}
	default:
		;
	}
}
 8001240:	e008      	b.n	8001254 <HAL_GPIO_EXTI_Callback+0x2c>
		magn_flag = 1;
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <HAL_GPIO_EXTI_Callback+0x38>)
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
		accel_flag = 1;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_GPIO_EXTI_Callback+0x3c>)
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
		gyro_flag = 1;
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_GPIO_EXTI_Callback+0x40>)
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	20000269 	.word	0x20000269
 8001264:	20000268 	.word	0x20000268
 8001268:	2000026a 	.word	0x2000026a

0800126c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_SPI1_Init+0x74>)
 8001296:	4a1c      	ldr	r2, [pc, #112]	; (8001308 <MX_SPI1_Init+0x78>)
 8001298:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_SPI1_Init+0x74>)
 800129c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_SPI1_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_SPI1_Init+0x74>)
 80012aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_SPI1_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_SPI1_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_SPI1_Init+0x74>)
 80012be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_SPI1_Init+0x74>)
 80012c6:	2210      	movs	r2, #16
 80012c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_SPI1_Init+0x74>)
 80012cc:	2280      	movs	r2, #128	; 0x80
 80012ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_SPI1_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <MX_SPI1_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_SPI1_Init+0x74>)
 80012de:	2207      	movs	r2, #7
 80012e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <MX_SPI1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_SPI1_Init+0x74>)
 80012ea:	2208      	movs	r2, #8
 80012ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_SPI1_Init+0x74>)
 80012f0:	f005 f862 	bl	80063b8 <HAL_SPI_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012fa:	f7ff ffb7 	bl	800126c <Error_Handler>
  }

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000638 	.word	0x20000638
 8001308:	40013000 	.word	0x40013000

0800130c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a17      	ldr	r2, [pc, #92]	; (8001388 <HAL_SPI_MspInit+0x7c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d128      	bne.n	8001380 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <HAL_SPI_MspInit+0x80>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	4a16      	ldr	r2, [pc, #88]	; (800138c <HAL_SPI_MspInit+0x80>)
 8001334:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001338:	6193      	str	r3, [r2, #24]
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <HAL_SPI_MspInit+0x80>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_SPI_MspInit+0x80>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <HAL_SPI_MspInit+0x80>)
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	6153      	str	r3, [r2, #20]
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_SPI_MspInit+0x80>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800135e:	23e0      	movs	r3, #224	; 0xe0
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800136e:	2305      	movs	r3, #5
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137c:	f000 fd48 	bl	8001e10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001380:	bf00      	nop
 8001382:	3728      	adds	r7, #40	; 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40013000 	.word	0x40013000
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_SPI_MspDeInit+0x30>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d10a      	bne.n	80013b8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_SPI_MspDeInit+0x34>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_SPI_MspDeInit+0x34>)
 80013a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013ac:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 80013ae:	21e0      	movs	r1, #224	; 0xe0
 80013b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b4:	f000 ff76 	bl	80022a4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40013000 	.word	0x40013000
 80013c4:	40021000 	.word	0x40021000

080013c8 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80013cc:	481a      	ldr	r0, [pc, #104]	; (8001438 <SPIx_Init+0x70>)
 80013ce:	f005 fc49 	bl	8006c64 <HAL_SPI_GetState>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d12c      	bne.n	8001432 <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <SPIx_Init+0x70>)
 80013da:	4a18      	ldr	r2, [pc, #96]	; (800143c <SPIx_Init+0x74>)
 80013dc:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <SPIx_Init+0x70>)
 80013e0:	2218      	movs	r2, #24
 80013e2:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <SPIx_Init+0x70>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <SPIx_Init+0x70>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <SPIx_Init+0x70>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <SPIx_Init+0x70>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <SPIx_Init+0x70>)
 80013fe:	2207      	movs	r2, #7
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <SPIx_Init+0x70>)
 8001404:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001408:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <SPIx_Init+0x70>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <SPIx_Init+0x70>)
 8001412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001416:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <SPIx_Init+0x70>)
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <SPIx_Init+0x70>)
 8001420:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001424:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001426:	4804      	ldr	r0, [pc, #16]	; (8001438 <SPIx_Init+0x70>)
 8001428:	f000 f836 	bl	8001498 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <SPIx_Init+0x70>)
 800142e:	f004 ffc3 	bl	80063b8 <HAL_SPI_Init>
  }
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000354 	.word	0x20000354
 800143c:	40013000 	.word	0x40013000

08001440 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af02      	add	r7, sp, #8
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <SPIx_WriteRead+0x38>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f107 020f 	add.w	r2, r7, #15
 8001456:	1df9      	adds	r1, r7, #7
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2301      	movs	r3, #1
 800145c:	4807      	ldr	r0, [pc, #28]	; (800147c <SPIx_WriteRead+0x3c>)
 800145e:	f005 f9e3 	bl	8006828 <HAL_SPI_TransmitReceive>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001468:	f000 f80a 	bl	8001480 <SPIx_Error>
  }
  
  return receivedbyte;
 800146c:	7bfb      	ldrb	r3, [r7, #15]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000068 	.word	0x20000068
 800147c:	20000354 	.word	0x20000354

08001480 <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001484:	4803      	ldr	r0, [pc, #12]	; (8001494 <SPIx_Error+0x14>)
 8001486:	f005 f98b 	bl	80067a0 <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 800148a:	f7ff ff9d 	bl	80013c8 <SPIx_Init>
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000354 	.word	0x20000354

08001498 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <SPIx_MspInit+0x64>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a15      	ldr	r2, [pc, #84]	; (80014fc <SPIx_MspInit+0x64>)
 80014a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <SPIx_MspInit+0x64>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80014b8:	4b10      	ldr	r3, [pc, #64]	; (80014fc <SPIx_MspInit+0x64>)
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <SPIx_MspInit+0x64>)
 80014be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c2:	6153      	str	r3, [r2, #20]
 80014c4:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <SPIx_MspInit+0x64>)
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80014d0:	23e0      	movs	r3, #224	; 0xe0
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80014e0:	2305      	movs	r3, #5
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ee:	f000 fc8f 	bl	8001e10 <HAL_GPIO_Init>
}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000

08001500 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8001506:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <GYRO_IO_Init+0x84>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	4a1e      	ldr	r2, [pc, #120]	; (8001584 <GYRO_IO_Init+0x84>)
 800150c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001510:	6153      	str	r3, [r2, #20]
 8001512:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <GYRO_IO_Init+0x84>)
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800151e:	2308      	movs	r3, #8
 8001520:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	4619      	mov	r1, r3
 8001534:	4814      	ldr	r0, [pc, #80]	; (8001588 <GYRO_IO_Init+0x88>)
 8001536:	f000 fc6b 	bl	8001e10 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 800153a:	2201      	movs	r2, #1
 800153c:	2108      	movs	r1, #8
 800153e:	4812      	ldr	r0, [pc, #72]	; (8001588 <GYRO_IO_Init+0x88>)
 8001540:	f000 ffb8 	bl	80024b4 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <GYRO_IO_Init+0x84>)
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <GYRO_IO_Init+0x84>)
 800154a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800154e:	6153      	str	r3, [r2, #20]
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <GYRO_IO_Init+0x84>)
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800155c:	2303      	movs	r3, #3
 800155e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	4619      	mov	r1, r3
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <GYRO_IO_Init+0x88>)
 8001574:	f000 fc4c 	bl	8001e10 <HAL_GPIO_Init>
  
  SPIx_Init();
 8001578:	f7ff ff26 	bl	80013c8 <SPIx_Init>
}
 800157c:	bf00      	nop
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000
 8001588:	48001000 	.word	0x48001000

0800158c <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]
 8001598:	4613      	mov	r3, r2
 800159a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800159c:	883b      	ldrh	r3, [r7, #0]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d903      	bls.n	80015aa <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a8:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80015aa:	2200      	movs	r2, #0
 80015ac:	2108      	movs	r1, #8
 80015ae:	480f      	ldr	r0, [pc, #60]	; (80015ec <GYRO_IO_Write+0x60>)
 80015b0:	f000 ff80 	bl	80024b4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff42 	bl	8001440 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80015bc:	e00a      	b.n	80015d4 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff3c 	bl	8001440 <SPIx_WriteRead>
    NumByteToWrite--;
 80015c8:	883b      	ldrh	r3, [r7, #0]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3301      	adds	r3, #1
 80015d2:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80015d4:	883b      	ldrh	r3, [r7, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f1      	bne.n	80015be <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80015da:	2201      	movs	r2, #1
 80015dc:	2108      	movs	r1, #8
 80015de:	4803      	ldr	r0, [pc, #12]	; (80015ec <GYRO_IO_Write+0x60>)
 80015e0:	f000 ff68 	bl	80024b4 <HAL_GPIO_WritePin>
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	48001000 	.word	0x48001000

080015f0 <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]
 80015fc:	4613      	mov	r3, r2
 80015fe:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8001600:	883b      	ldrh	r3, [r7, #0]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d904      	bls.n	8001610 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001606:	78fb      	ldrb	r3, [r7, #3]
 8001608:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800160c:	70fb      	strb	r3, [r7, #3]
 800160e:	e003      	b.n	8001618 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001616:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001618:	2200      	movs	r2, #0
 800161a:	2108      	movs	r1, #8
 800161c:	4810      	ldr	r0, [pc, #64]	; (8001660 <GYRO_IO_Read+0x70>)
 800161e:	f000 ff49 	bl	80024b4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001622:	78fb      	ldrb	r3, [r7, #3]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff0b 	bl	8001440 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800162a:	e00c      	b.n	8001646 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800162c:	2000      	movs	r0, #0
 800162e:	f7ff ff07 	bl	8001440 <SPIx_WriteRead>
 8001632:	4603      	mov	r3, r0
 8001634:	461a      	mov	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800163a:	883b      	ldrh	r3, [r7, #0]
 800163c:	3b01      	subs	r3, #1
 800163e:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3301      	adds	r3, #1
 8001644:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8001646:	883b      	ldrh	r3, [r7, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1ef      	bne.n	800162c <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800164c:	2201      	movs	r2, #1
 800164e:	2108      	movs	r1, #8
 8001650:	4803      	ldr	r0, [pc, #12]	; (8001660 <GYRO_IO_Read+0x70>)
 8001652:	f000 ff2f 	bl	80024b4 <HAL_GPIO_WritePin>
}  
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	48001000 	.word	0x48001000

08001664 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800166e:	2300      	movs	r3, #0
 8001670:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8001672:	2300      	movs	r3, #0
 8001674:	703b      	strb	r3, [r7, #0]
 8001676:	2300      	movs	r3, #0
 8001678:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800167a:	4b52      	ldr	r3, [pc, #328]	; (80017c4 <BSP_GYRO_Init+0x160>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	4798      	blx	r3
 8001680:	4603      	mov	r3, r0
 8001682:	2bd4      	cmp	r3, #212	; 0xd4
 8001684:	d005      	beq.n	8001692 <BSP_GYRO_Init+0x2e>
 8001686:	4b4f      	ldr	r3, [pc, #316]	; (80017c4 <BSP_GYRO_Init+0x160>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	4798      	blx	r3
 800168c:	4603      	mov	r3, r0
 800168e:	2bd5      	cmp	r3, #213	; 0xd5
 8001690:	d146      	bne.n	8001720 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8001692:	4b4d      	ldr	r3, [pc, #308]	; (80017c8 <BSP_GYRO_Init+0x164>)
 8001694:	4a4b      	ldr	r2, [pc, #300]	; (80017c4 <BSP_GYRO_Init+0x160>)
 8001696:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8001698:	2308      	movs	r3, #8
 800169a:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 800169c:	2300      	movs	r3, #0
 800169e:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 80016a0:	2307      	movs	r3, #7
 80016a2:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 80016a4:	2330      	movs	r3, #48	; 0x30
 80016a6:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 80016a8:	2300      	movs	r3, #0
 80016aa:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 80016ac:	2300      	movs	r3, #0
 80016ae:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 80016b0:	2310      	movs	r3, #16
 80016b2:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80016b4:	793a      	ldrb	r2, [r7, #4]
 80016b6:	797b      	ldrb	r3, [r7, #5]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80016bc:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80016be:	4313      	orrs	r3, r2
 80016c0:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80016c2:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80016ca:	7a3a      	ldrb	r2, [r7, #8]
 80016cc:	7a7b      	ldrb	r3, [r7, #9]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80016d2:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80016d4:	4313      	orrs	r3, r2
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	b29b      	uxth	r3, r3
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b29a      	uxth	r2, r3
 80016de:	89bb      	ldrh	r3, [r7, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80016e4:	4b38      	ldr	r3, [pc, #224]	; (80017c8 <BSP_GYRO_Init+0x164>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	89ba      	ldrh	r2, [r7, #12]
 80016ec:	4610      	mov	r0, r2
 80016ee:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 80016f0:	2300      	movs	r3, #0
 80016f2:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80016f8:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80016fa:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80016fc:	4313      	orrs	r3, r2
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8001702:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <BSP_GYRO_Init+0x164>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	89ba      	ldrh	r2, [r7, #12]
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	4610      	mov	r0, r2
 800170e:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <BSP_GYRO_Init+0x164>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001716:	2010      	movs	r0, #16
 8001718:	4798      	blx	r3

    ret = GYRO_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
 800171e:	e04b      	b.n	80017b8 <BSP_GYRO_Init+0x154>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 8001720:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <BSP_GYRO_Init+0x168>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	4798      	blx	r3
 8001726:	4603      	mov	r3, r0
 8001728:	2bd3      	cmp	r3, #211	; 0xd3
 800172a:	d145      	bne.n	80017b8 <BSP_GYRO_Init+0x154>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 800172c:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <BSP_GYRO_Init+0x164>)
 800172e:	4a27      	ldr	r2, [pc, #156]	; (80017cc <BSP_GYRO_Init+0x168>)
 8001730:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 8001732:	2308      	movs	r3, #8
 8001734:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 8001736:	2300      	movs	r3, #0
 8001738:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 800173a:	2307      	movs	r3, #7
 800173c:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 800173e:	2330      	movs	r3, #48	; 0x30
 8001740:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 8001742:	2300      	movs	r3, #0
 8001744:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 8001746:	2300      	movs	r3, #0
 8001748:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 800174a:	2310      	movs	r3, #16
 800174c:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800174e:	793a      	ldrb	r2, [r7, #4]
 8001750:	797b      	ldrb	r3, [r7, #5]
 8001752:	4313      	orrs	r3, r2
 8001754:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8001756:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001758:	4313      	orrs	r3, r2
 800175a:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800175c:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800175e:	4313      	orrs	r3, r2
 8001760:	b2db      	uxtb	r3, r3
 8001762:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8001764:	7a3a      	ldrb	r2, [r7, #8]
 8001766:	7a7b      	ldrb	r3, [r7, #9]
 8001768:	4313      	orrs	r3, r2
 800176a:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 800176c:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800176e:	4313      	orrs	r3, r2
 8001770:	b2db      	uxtb	r3, r3
 8001772:	b29b      	uxth	r3, r3
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	b29a      	uxth	r2, r3
 8001778:	89bb      	ldrh	r3, [r7, #12]
 800177a:	4313      	orrs	r3, r2
 800177c:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <BSP_GYRO_Init+0x164>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	89ba      	ldrh	r2, [r7, #12]
 8001786:	4610      	mov	r0, r2
 8001788:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 800178a:	2300      	movs	r3, #0
 800178c:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 800178e:	2300      	movs	r3, #0
 8001790:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8001792:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8001794:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8001796:	4313      	orrs	r3, r2
 8001798:	b2db      	uxtb	r3, r3
 800179a:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <BSP_GYRO_Init+0x164>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a2:	89ba      	ldrh	r2, [r7, #12]
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	4610      	mov	r0, r2
 80017a8:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <BSP_GYRO_Init+0x164>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	2010      	movs	r0, #16
 80017b2:	4798      	blx	r3

    ret = GYRO_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000034 	.word	0x20000034
 80017c8:	200003b8 	.word	0x200003b8
 80017cc:	20000000 	.word	0x20000000

080017d0 <BSP_GYRO_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2
  * @retval None
  */
void BSP_GYRO_EnableIT(uint8_t IntPin)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  if(GyroscopeDrv->EnableIT != NULL)
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <BSP_GYRO_EnableIT+0x28>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <BSP_GYRO_EnableIT+0x20>
  {
	GyroscopeDrv->EnableIT(IntPin);
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <BSP_GYRO_EnableIT+0x28>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	79fa      	ldrb	r2, [r7, #7]
 80017ec:	4610      	mov	r0, r2
 80017ee:	4798      	blx	r3
  }
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200003b8 	.word	0x200003b8

080017fc <BSP_GYRO_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2
  * @retval None
  */
void BSP_GYRO_DisableIT(uint8_t IntPin)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
  if(GyroscopeDrv->DisableIT != NULL)
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <BSP_GYRO_DisableIT+0x28>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <BSP_GYRO_DisableIT+0x20>
  {
    GyroscopeDrv->DisableIT(IntPin);
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <BSP_GYRO_DisableIT+0x28>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	79fa      	ldrb	r2, [r7, #7]
 8001818:	4610      	mov	r0, r2
 800181a:	4798      	blx	r3
  }
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	200003b8 	.word	0x200003b8

08001828 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <BSP_GYRO_GetXYZ+0x24>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	2b00      	cmp	r3, #0
 8001838:	d004      	beq.n	8001844 <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <BSP_GYRO_GetXYZ+0x24>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	4798      	blx	r3
  }
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200003b8 	.word	0x200003b8

08001850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <HAL_MspInit+0x44>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <HAL_MspInit+0x44>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6193      	str	r3, [r2, #24]
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <HAL_MspInit+0x44>)
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_MspInit+0x44>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a08      	ldr	r2, [pc, #32]	; (8001894 <HAL_MspInit+0x44>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001878:	61d3      	str	r3, [r2, #28]
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_MspInit+0x44>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler+0x4>

080018ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <MemManage_Handler+0x4>

080018b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <UsageFault_Handler+0x4>

080018be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ec:	f000 f8d4 	bl	8001a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80018f8:	2002      	movs	r0, #2
 80018fa:	f000 fe0b 	bl	8002514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}

08001902 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001906:	2004      	movs	r0, #4
 8001908:	f000 fe04 	bl	8002514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}

08001910 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001914:	2010      	movs	r0, #16
 8001916:	f000 fdfd 	bl	8002514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001926:	f001 fda3 	bl	8003470 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20001334 	.word	0x20001334

08001934 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <_sbrk+0x50>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d102      	bne.n	800194a <_sbrk+0x16>
		heap_end = &end;
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <_sbrk+0x50>)
 8001946:	4a10      	ldr	r2, [pc, #64]	; (8001988 <_sbrk+0x54>)
 8001948:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <_sbrk+0x50>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <_sbrk+0x50>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4413      	add	r3, r2
 8001958:	466a      	mov	r2, sp
 800195a:	4293      	cmp	r3, r2
 800195c:	d907      	bls.n	800196e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800195e:	f009 fbaf 	bl	800b0c0 <__errno>
 8001962:	4602      	mov	r2, r0
 8001964:	230c      	movs	r3, #12
 8001966:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800196c:	e006      	b.n	800197c <_sbrk+0x48>
	}

	heap_end += incr;
 800196e:	4b05      	ldr	r3, [pc, #20]	; (8001984 <_sbrk+0x50>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	4a03      	ldr	r2, [pc, #12]	; (8001984 <_sbrk+0x50>)
 8001978:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200003bc 	.word	0x200003bc
 8001988:	20001628 	.word	0x20001628

0800198c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <SystemInit+0x28>)
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001996:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <SystemInit+0x28>)
 8001998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800199c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <SystemInit+0x28>)
 80019a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019a6:	609a      	str	r2, [r3, #8]
#endif
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80019bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80019be:	e003      	b.n	80019c8 <LoopCopyDataInit>

080019c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80019c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80019c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80019c6:	3104      	adds	r1, #4

080019c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80019c8:	480b      	ldr	r0, [pc, #44]	; (80019f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80019cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80019ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80019d0:	d3f6      	bcc.n	80019c0 <CopyDataInit>
	ldr	r2, =_sbss
 80019d2:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <LoopForever+0x12>)
	b	LoopFillZerobss
 80019d4:	e002      	b.n	80019dc <LoopFillZerobss>

080019d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80019d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80019d8:	f842 3b04 	str.w	r3, [r2], #4

080019dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <LoopForever+0x16>)
	cmp	r2, r3
 80019de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80019e0:	d3f9      	bcc.n	80019d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019e2:	f7ff ffd3 	bl	800198c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019e6:	f009 fb71 	bl	800b0cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ea:	f7ff faab 	bl	8000f44 <main>

080019ee <LoopForever>:

LoopForever:
    b LoopForever
 80019ee:	e7fe      	b.n	80019ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019f0:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80019f4:	0800bc14 	.word	0x0800bc14
	ldr	r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80019fc:	2000024c 	.word	0x2000024c
	ldr	r2, =_sbss
 8001a00:	2000024c 	.word	0x2000024c
	ldr	r3, = _ebss
 8001a04:	20001624 	.word	0x20001624

08001a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC1_2_IRQHandler>
	...

08001a0c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_Init+0x28>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <HAL_Init+0x28>)
 8001a16:	f043 0310 	orr.w	r3, r3, #16
 8001a1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1c:	2003      	movs	r0, #3
 8001a1e:	f000 f96f 	bl	8001d00 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a22:	2000      	movs	r0, #0
 8001a24:	f000 f808 	bl	8001a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a28:	f7ff ff12 	bl	8001850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40022000 	.word	0x40022000

08001a38 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_InitTick+0x54>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_InitTick+0x58>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f9ce 	bl	8001df8 <HAL_SYSTICK_Config>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00e      	b.n	8001a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0f      	cmp	r3, #15
 8001a6a:	d80a      	bhi.n	8001a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a74:	f000 f964 	bl	8001d40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <HAL_InitTick+0x5c>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e000      	b.n	8001a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	2000006c 	.word	0x2000006c
 8001a90:	20000074 	.word	0x20000074
 8001a94:	20000070 	.word	0x20000070

08001a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_IncTick+0x20>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_IncTick+0x24>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a04      	ldr	r2, [pc, #16]	; (8001abc <HAL_IncTick+0x24>)
 8001aaa:	6013      	str	r3, [r2, #0]
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000074 	.word	0x20000074
 8001abc:	2000069c 	.word	0x2000069c

08001ac0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <HAL_GetTick+0x14>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	2000069c 	.word	0x2000069c

08001ad8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae0:	f7ff ffee 	bl	8001ac0 <HAL_GetTick>
 8001ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001af0:	d005      	beq.n	8001afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_Delay+0x40>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4413      	add	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001afe:	bf00      	nop
 8001b00:	f7ff ffde 	bl	8001ac0 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d8f7      	bhi.n	8001b00 <HAL_Delay+0x28>
  {
  }
}
 8001b10:	bf00      	nop
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000074 	.word	0x20000074

08001b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4e:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	60d3      	str	r3, [r2, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <__NVIC_GetPriorityGrouping+0x18>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	f003 0307 	and.w	r3, r3, #7
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db0b      	blt.n	8001baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	f003 021f 	and.w	r2, r3, #31
 8001b98:	4907      	ldr	r1, [pc, #28]	; (8001bb8 <__NVIC_EnableIRQ+0x38>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000e100 	.word	0xe000e100

08001bbc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	db10      	blt.n	8001bf0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	4909      	ldr	r1, [pc, #36]	; (8001bfc <__NVIC_DisableIRQ+0x40>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	2001      	movs	r0, #1
 8001bde:	fa00 f202 	lsl.w	r2, r0, r2
 8001be2:	3320      	adds	r3, #32
 8001be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001be8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001bec:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000e100 	.word	0xe000e100

08001c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	db0a      	blt.n	8001c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	490c      	ldr	r1, [pc, #48]	; (8001c4c <__NVIC_SetPriority+0x4c>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	0112      	lsls	r2, r2, #4
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	440b      	add	r3, r1
 8001c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c28:	e00a      	b.n	8001c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4908      	ldr	r1, [pc, #32]	; (8001c50 <__NVIC_SetPriority+0x50>)
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	3b04      	subs	r3, #4
 8001c38:	0112      	lsls	r2, r2, #4
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	761a      	strb	r2, [r3, #24]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000e100 	.word	0xe000e100
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	; 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f1c3 0307 	rsb	r3, r3, #7
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	bf28      	it	cs
 8001c72:	2304      	movcs	r3, #4
 8001c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	d902      	bls.n	8001c84 <NVIC_EncodePriority+0x30>
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3b03      	subs	r3, #3
 8001c82:	e000      	b.n	8001c86 <NVIC_EncodePriority+0x32>
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43da      	mvns	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	401a      	ands	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	43d9      	mvns	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	4313      	orrs	r3, r2
         );
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3724      	adds	r7, #36	; 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ccc:	d301      	bcc.n	8001cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00f      	b.n	8001cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <SysTick_Config+0x40>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cda:	210f      	movs	r1, #15
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ce0:	f7ff ff8e 	bl	8001c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <SysTick_Config+0x40>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cea:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <SysTick_Config+0x40>)
 8001cec:	2207      	movs	r2, #7
 8001cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	e000e010 	.word	0xe000e010

08001d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b07      	cmp	r3, #7
 8001d0c:	d00f      	beq.n	8001d2e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b06      	cmp	r3, #6
 8001d12:	d00c      	beq.n	8001d2e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b05      	cmp	r3, #5
 8001d18:	d009      	beq.n	8001d2e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d006      	beq.n	8001d2e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d003      	beq.n	8001d2e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d26:	21ac      	movs	r1, #172	; 0xac
 8001d28:	4804      	ldr	r0, [pc, #16]	; (8001d3c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001d2a:	f7ff faa6 	bl	800127a <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff fef4 	bl	8001b1c <__NVIC_SetPriorityGrouping>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	0800b970 	.word	0x0800b970

08001d40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b0f      	cmp	r3, #15
 8001d56:	d903      	bls.n	8001d60 <HAL_NVIC_SetPriority+0x20>
 8001d58:	21c4      	movs	r1, #196	; 0xc4
 8001d5a:	480e      	ldr	r0, [pc, #56]	; (8001d94 <HAL_NVIC_SetPriority+0x54>)
 8001d5c:	f7ff fa8d 	bl	800127a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b0f      	cmp	r3, #15
 8001d64:	d903      	bls.n	8001d6e <HAL_NVIC_SetPriority+0x2e>
 8001d66:	21c5      	movs	r1, #197	; 0xc5
 8001d68:	480a      	ldr	r0, [pc, #40]	; (8001d94 <HAL_NVIC_SetPriority+0x54>)
 8001d6a:	f7ff fa86 	bl	800127a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6e:	f7ff fef9 	bl	8001b64 <__NVIC_GetPriorityGrouping>
 8001d72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	68b9      	ldr	r1, [r7, #8]
 8001d78:	6978      	ldr	r0, [r7, #20]
 8001d7a:	f7ff ff6b 	bl	8001c54 <NVIC_EncodePriority>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d84:	4611      	mov	r1, r2
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff ff3a 	bl	8001c00 <__NVIC_SetPriority>
}
 8001d8c:	bf00      	nop
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	0800b970 	.word	0x0800b970

08001d98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	da03      	bge.n	8001db2 <HAL_NVIC_EnableIRQ+0x1a>
 8001daa:	21d8      	movs	r1, #216	; 0xd8
 8001dac:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <HAL_NVIC_EnableIRQ+0x2c>)
 8001dae:	f7ff fa64 	bl	800127a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fee2 	bl	8001b80 <__NVIC_EnableIRQ>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	0800b970 	.word	0x0800b970

08001dc8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	da03      	bge.n	8001de2 <HAL_NVIC_DisableIRQ+0x1a>
 8001dda:	21e8      	movs	r1, #232	; 0xe8
 8001ddc:	4805      	ldr	r0, [pc, #20]	; (8001df4 <HAL_NVIC_DisableIRQ+0x2c>)
 8001dde:	f7ff fa4c 	bl	800127a <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fee8 	bl	8001bbc <__NVIC_DisableIRQ>
}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	0800b970 	.word	0x0800b970

08001df8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff5b 	bl	8001cbc <SysTick_Config>
 8001e06:	4603      	mov	r3, r0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e24:	d017      	beq.n	8001e56 <HAL_GPIO_Init+0x46>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a39      	ldr	r2, [pc, #228]	; (8001f10 <HAL_GPIO_Init+0x100>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d013      	beq.n	8001e56 <HAL_GPIO_Init+0x46>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a38      	ldr	r2, [pc, #224]	; (8001f14 <HAL_GPIO_Init+0x104>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d00f      	beq.n	8001e56 <HAL_GPIO_Init+0x46>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a37      	ldr	r2, [pc, #220]	; (8001f18 <HAL_GPIO_Init+0x108>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00b      	beq.n	8001e56 <HAL_GPIO_Init+0x46>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a36      	ldr	r2, [pc, #216]	; (8001f1c <HAL_GPIO_Init+0x10c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d007      	beq.n	8001e56 <HAL_GPIO_Init+0x46>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a35      	ldr	r2, [pc, #212]	; (8001f20 <HAL_GPIO_Init+0x110>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x46>
 8001e4e:	21ba      	movs	r1, #186	; 0xba
 8001e50:	4834      	ldr	r0, [pc, #208]	; (8001f24 <HAL_GPIO_Init+0x114>)
 8001e52:	f7ff fa12 	bl	800127a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_GPIO_Init+0x5c>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	0c1b      	lsrs	r3, r3, #16
 8001e66:	041b      	lsls	r3, r3, #16
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x64>
 8001e6c:	21bb      	movs	r1, #187	; 0xbb
 8001e6e:	482d      	ldr	r0, [pc, #180]	; (8001f24 <HAL_GPIO_Init+0x114>)
 8001e70:	f7ff fa03 	bl	800127a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d035      	beq.n	8001ee8 <HAL_GPIO_Init+0xd8>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d031      	beq.n	8001ee8 <HAL_GPIO_Init+0xd8>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b11      	cmp	r3, #17
 8001e8a:	d02d      	beq.n	8001ee8 <HAL_GPIO_Init+0xd8>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d029      	beq.n	8001ee8 <HAL_GPIO_Init+0xd8>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b12      	cmp	r3, #18
 8001e9a:	d025      	beq.n	8001ee8 <HAL_GPIO_Init+0xd8>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	4a21      	ldr	r2, [pc, #132]	; (8001f28 <HAL_GPIO_Init+0x118>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d020      	beq.n	8001ee8 <HAL_GPIO_Init+0xd8>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4a20      	ldr	r2, [pc, #128]	; (8001f2c <HAL_GPIO_Init+0x11c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d01b      	beq.n	8001ee8 <HAL_GPIO_Init+0xd8>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4a1e      	ldr	r2, [pc, #120]	; (8001f30 <HAL_GPIO_Init+0x120>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d016      	beq.n	8001ee8 <HAL_GPIO_Init+0xd8>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4a1d      	ldr	r2, [pc, #116]	; (8001f34 <HAL_GPIO_Init+0x124>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d011      	beq.n	8001ee8 <HAL_GPIO_Init+0xd8>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4a1b      	ldr	r2, [pc, #108]	; (8001f38 <HAL_GPIO_Init+0x128>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00c      	beq.n	8001ee8 <HAL_GPIO_Init+0xd8>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4a1a      	ldr	r2, [pc, #104]	; (8001f3c <HAL_GPIO_Init+0x12c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d007      	beq.n	8001ee8 <HAL_GPIO_Init+0xd8>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0xd8>
 8001ee0:	21bc      	movs	r1, #188	; 0xbc
 8001ee2:	4810      	ldr	r0, [pc, #64]	; (8001f24 <HAL_GPIO_Init+0x114>)
 8001ee4:	f7ff f9c9 	bl	800127a <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 81c8 	beq.w	8002282 <HAL_GPIO_Init+0x472>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	f000 81c3 	beq.w	8002282 <HAL_GPIO_Init+0x472>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	f000 81be 	beq.w	8002282 <HAL_GPIO_Init+0x472>
 8001f06:	21bd      	movs	r1, #189	; 0xbd
 8001f08:	4806      	ldr	r0, [pc, #24]	; (8001f24 <HAL_GPIO_Init+0x114>)
 8001f0a:	f7ff f9b6 	bl	800127a <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f0e:	e1b8      	b.n	8002282 <HAL_GPIO_Init+0x472>
 8001f10:	48000400 	.word	0x48000400
 8001f14:	48000800 	.word	0x48000800
 8001f18:	48000c00 	.word	0x48000c00
 8001f1c:	48001000 	.word	0x48001000
 8001f20:	48001400 	.word	0x48001400
 8001f24:	0800b9ac 	.word	0x0800b9ac
 8001f28:	10110000 	.word	0x10110000
 8001f2c:	10210000 	.word	0x10210000
 8001f30:	10310000 	.word	0x10310000
 8001f34:	10120000 	.word	0x10120000
 8001f38:	10220000 	.word	0x10220000
 8001f3c:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2101      	movs	r1, #1
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 8192 	beq.w	800227c <HAL_GPIO_Init+0x46c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d00b      	beq.n	8001f78 <HAL_GPIO_Init+0x168>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d007      	beq.n	8001f78 <HAL_GPIO_Init+0x168>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f6c:	2b11      	cmp	r3, #17
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x168>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b12      	cmp	r3, #18
 8001f76:	d140      	bne.n	8001ffa <HAL_GPIO_Init+0x1ea>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00b      	beq.n	8001f98 <HAL_GPIO_Init+0x188>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d007      	beq.n	8001f98 <HAL_GPIO_Init+0x188>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x188>
 8001f90:	21cd      	movs	r1, #205	; 0xcd
 8001f92:	4880      	ldr	r0, [pc, #512]	; (8002194 <HAL_GPIO_Init+0x384>)
 8001f94:	f7ff f971 	bl	800127a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fce:	2201      	movs	r2, #1
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	091b      	lsrs	r3, r3, #4
 8001fe4:	f003 0201 	and.w	r2, r3, #1
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	2203      	movs	r2, #3
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x22a>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b12      	cmp	r3, #18
 8002038:	d14f      	bne.n	80020da <HAL_GPIO_Init+0x2ca>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002040:	d017      	beq.n	8002072 <HAL_GPIO_Init+0x262>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a54      	ldr	r2, [pc, #336]	; (8002198 <HAL_GPIO_Init+0x388>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <HAL_GPIO_Init+0x262>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a53      	ldr	r2, [pc, #332]	; (800219c <HAL_GPIO_Init+0x38c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00f      	beq.n	8002072 <HAL_GPIO_Init+0x262>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a52      	ldr	r2, [pc, #328]	; (80021a0 <HAL_GPIO_Init+0x390>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00b      	beq.n	8002072 <HAL_GPIO_Init+0x262>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a51      	ldr	r2, [pc, #324]	; (80021a4 <HAL_GPIO_Init+0x394>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d007      	beq.n	8002072 <HAL_GPIO_Init+0x262>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a50      	ldr	r2, [pc, #320]	; (80021a8 <HAL_GPIO_Init+0x398>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x262>
 800206a:	21e5      	movs	r1, #229	; 0xe5
 800206c:	4849      	ldr	r0, [pc, #292]	; (8002194 <HAL_GPIO_Init+0x384>)
 800206e:	f7ff f904 	bl	800127a <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d90b      	bls.n	8002092 <HAL_GPIO_Init+0x282>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	2b0e      	cmp	r3, #14
 8002080:	d007      	beq.n	8002092 <HAL_GPIO_Init+0x282>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	2b0f      	cmp	r3, #15
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x282>
 800208a:	21e6      	movs	r1, #230	; 0xe6
 800208c:	4841      	ldr	r0, [pc, #260]	; (8002194 <HAL_GPIO_Init+0x384>)
 800208e:	f7ff f8f4 	bl	800127a <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	08da      	lsrs	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3208      	adds	r2, #8
 800209a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800209e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	220f      	movs	r2, #15
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	08da      	lsrs	r2, r3, #3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3208      	adds	r2, #8
 80020d4:	6939      	ldr	r1, [r7, #16]
 80020d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	2203      	movs	r2, #3
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0203 	and.w	r2, r3, #3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 80b0 	beq.w	800227c <HAL_GPIO_Init+0x46c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211c:	4b23      	ldr	r3, [pc, #140]	; (80021ac <HAL_GPIO_Init+0x39c>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4a22      	ldr	r2, [pc, #136]	; (80021ac <HAL_GPIO_Init+0x39c>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6193      	str	r3, [r2, #24]
 8002128:	4b20      	ldr	r3, [pc, #128]	; (80021ac <HAL_GPIO_Init+0x39c>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002134:	4a1e      	ldr	r2, [pc, #120]	; (80021b0 <HAL_GPIO_Init+0x3a0>)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	089b      	lsrs	r3, r3, #2
 800213a:	3302      	adds	r3, #2
 800213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002140:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4013      	ands	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800215e:	d029      	beq.n	80021b4 <HAL_GPIO_Init+0x3a4>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a0d      	ldr	r2, [pc, #52]	; (8002198 <HAL_GPIO_Init+0x388>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d013      	beq.n	8002190 <HAL_GPIO_Init+0x380>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a0c      	ldr	r2, [pc, #48]	; (800219c <HAL_GPIO_Init+0x38c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00d      	beq.n	800218c <HAL_GPIO_Init+0x37c>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a0b      	ldr	r2, [pc, #44]	; (80021a0 <HAL_GPIO_Init+0x390>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d007      	beq.n	8002188 <HAL_GPIO_Init+0x378>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <HAL_GPIO_Init+0x394>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d101      	bne.n	8002184 <HAL_GPIO_Init+0x374>
 8002180:	2304      	movs	r3, #4
 8002182:	e018      	b.n	80021b6 <HAL_GPIO_Init+0x3a6>
 8002184:	2305      	movs	r3, #5
 8002186:	e016      	b.n	80021b6 <HAL_GPIO_Init+0x3a6>
 8002188:	2303      	movs	r3, #3
 800218a:	e014      	b.n	80021b6 <HAL_GPIO_Init+0x3a6>
 800218c:	2302      	movs	r3, #2
 800218e:	e012      	b.n	80021b6 <HAL_GPIO_Init+0x3a6>
 8002190:	2301      	movs	r3, #1
 8002192:	e010      	b.n	80021b6 <HAL_GPIO_Init+0x3a6>
 8002194:	0800b9ac 	.word	0x0800b9ac
 8002198:	48000400 	.word	0x48000400
 800219c:	48000800 	.word	0x48000800
 80021a0:	48000c00 	.word	0x48000c00
 80021a4:	48001000 	.word	0x48001000
 80021a8:	48001400 	.word	0x48001400
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40010000 	.word	0x40010000
 80021b4:	2300      	movs	r3, #0
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	f002 0203 	and.w	r2, r2, #3
 80021bc:	0092      	lsls	r2, r2, #2
 80021be:	4093      	lsls	r3, r2
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021c6:	4935      	ldr	r1, [pc, #212]	; (800229c <HAL_GPIO_Init+0x48c>)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	3302      	adds	r3, #2
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d4:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <HAL_GPIO_Init+0x490>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	43db      	mvns	r3, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x3e8>
        {
          temp |= iocurrent;
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021f8:	4a29      	ldr	r2, [pc, #164]	; (80022a0 <HAL_GPIO_Init+0x490>)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021fe:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <HAL_GPIO_Init+0x490>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x412>
        {
          temp |= iocurrent;
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002222:	4a1f      	ldr	r2, [pc, #124]	; (80022a0 <HAL_GPIO_Init+0x490>)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002228:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <HAL_GPIO_Init+0x490>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	43db      	mvns	r3, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x43c>
        {
          temp |= iocurrent;
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800224c:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <HAL_GPIO_Init+0x490>)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002252:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <HAL_GPIO_Init+0x490>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	43db      	mvns	r3, r3
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x466>
        {
          temp |= iocurrent;
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002276:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <HAL_GPIO_Init+0x490>)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	3301      	adds	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	f47f ae57 	bne.w	8001f40 <HAL_GPIO_Init+0x130>
  }
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40010000 	.word	0x40010000
 80022a0:	40010400 	.word	0x40010400

080022a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022b8:	d018      	beq.n	80022ec <HAL_GPIO_DeInit+0x48>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a75      	ldr	r2, [pc, #468]	; (8002494 <HAL_GPIO_DeInit+0x1f0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d014      	beq.n	80022ec <HAL_GPIO_DeInit+0x48>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a74      	ldr	r2, [pc, #464]	; (8002498 <HAL_GPIO_DeInit+0x1f4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d010      	beq.n	80022ec <HAL_GPIO_DeInit+0x48>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a73      	ldr	r2, [pc, #460]	; (800249c <HAL_GPIO_DeInit+0x1f8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00c      	beq.n	80022ec <HAL_GPIO_DeInit+0x48>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a72      	ldr	r2, [pc, #456]	; (80024a0 <HAL_GPIO_DeInit+0x1fc>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d008      	beq.n	80022ec <HAL_GPIO_DeInit+0x48>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a71      	ldr	r2, [pc, #452]	; (80024a4 <HAL_GPIO_DeInit+0x200>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d004      	beq.n	80022ec <HAL_GPIO_DeInit+0x48>
 80022e2:	f240 1137 	movw	r1, #311	; 0x137
 80022e6:	4870      	ldr	r0, [pc, #448]	; (80024a8 <HAL_GPIO_DeInit+0x204>)
 80022e8:	f7fe ffc7 	bl	800127a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_GPIO_DeInit+0x5c>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	0c1b      	lsrs	r3, r3, #16
 80022f8:	041b      	lsls	r3, r3, #16
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80bf 	beq.w	800247e <HAL_GPIO_DeInit+0x1da>
 8002300:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002304:	4868      	ldr	r0, [pc, #416]	; (80024a8 <HAL_GPIO_DeInit+0x204>)
 8002306:	f7fe ffb8 	bl	800127a <assert_failed>

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800230a:	e0b8      	b.n	800247e <HAL_GPIO_DeInit+0x1da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800230c:	2201      	movs	r2, #1
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80ab 	beq.w	8002478 <HAL_GPIO_DeInit+0x1d4>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002322:	4a62      	ldr	r2, [pc, #392]	; (80024ac <HAL_GPIO_DeInit+0x208>)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	089b      	lsrs	r3, r3, #2
 8002328:	3302      	adds	r3, #2
 800232a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	220f      	movs	r2, #15
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4013      	ands	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800234a:	d019      	beq.n	8002380 <HAL_GPIO_DeInit+0xdc>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a51      	ldr	r2, [pc, #324]	; (8002494 <HAL_GPIO_DeInit+0x1f0>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d013      	beq.n	800237c <HAL_GPIO_DeInit+0xd8>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a50      	ldr	r2, [pc, #320]	; (8002498 <HAL_GPIO_DeInit+0x1f4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d00d      	beq.n	8002378 <HAL_GPIO_DeInit+0xd4>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a4f      	ldr	r2, [pc, #316]	; (800249c <HAL_GPIO_DeInit+0x1f8>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d007      	beq.n	8002374 <HAL_GPIO_DeInit+0xd0>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a4e      	ldr	r2, [pc, #312]	; (80024a0 <HAL_GPIO_DeInit+0x1fc>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d101      	bne.n	8002370 <HAL_GPIO_DeInit+0xcc>
 800236c:	2304      	movs	r3, #4
 800236e:	e008      	b.n	8002382 <HAL_GPIO_DeInit+0xde>
 8002370:	2305      	movs	r3, #5
 8002372:	e006      	b.n	8002382 <HAL_GPIO_DeInit+0xde>
 8002374:	2303      	movs	r3, #3
 8002376:	e004      	b.n	8002382 <HAL_GPIO_DeInit+0xde>
 8002378:	2302      	movs	r3, #2
 800237a:	e002      	b.n	8002382 <HAL_GPIO_DeInit+0xde>
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <HAL_GPIO_DeInit+0xde>
 8002380:	2300      	movs	r3, #0
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	f002 0203 	and.w	r2, r2, #3
 8002388:	0092      	lsls	r2, r2, #2
 800238a:	4093      	lsls	r3, r2
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	429a      	cmp	r2, r3
 8002390:	d132      	bne.n	80023f8 <HAL_GPIO_DeInit+0x154>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002392:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <HAL_GPIO_DeInit+0x20c>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	43db      	mvns	r3, r3
 800239a:	4945      	ldr	r1, [pc, #276]	; (80024b0 <HAL_GPIO_DeInit+0x20c>)
 800239c:	4013      	ands	r3, r2
 800239e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80023a0:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_GPIO_DeInit+0x20c>)
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	4941      	ldr	r1, [pc, #260]	; (80024b0 <HAL_GPIO_DeInit+0x20c>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80023ae:	4b40      	ldr	r3, [pc, #256]	; (80024b0 <HAL_GPIO_DeInit+0x20c>)
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	493e      	ldr	r1, [pc, #248]	; (80024b0 <HAL_GPIO_DeInit+0x20c>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80023bc:	4b3c      	ldr	r3, [pc, #240]	; (80024b0 <HAL_GPIO_DeInit+0x20c>)
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	493a      	ldr	r1, [pc, #232]	; (80024b0 <HAL_GPIO_DeInit+0x20c>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	220f      	movs	r2, #15
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80023da:	4a34      	ldr	r2, [pc, #208]	; (80024ac <HAL_GPIO_DeInit+0x208>)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	3302      	adds	r3, #2
 80023e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	43da      	mvns	r2, r3
 80023ea:	4830      	ldr	r0, [pc, #192]	; (80024ac <HAL_GPIO_DeInit+0x208>)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	089b      	lsrs	r3, r3, #2
 80023f0:	400a      	ands	r2, r1
 80023f2:	3302      	adds	r3, #2
 80023f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2103      	movs	r1, #3
 8002402:	fa01 f303 	lsl.w	r3, r1, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	401a      	ands	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	08da      	lsrs	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3208      	adds	r2, #8
 8002416:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	220f      	movs	r2, #15
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	08d2      	lsrs	r2, r2, #3
 800242e:	4019      	ands	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3208      	adds	r2, #8
 8002434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	2103      	movs	r1, #3
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	401a      	ands	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	2101      	movs	r1, #1
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	401a      	ands	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	2103      	movs	r1, #3
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	401a      	ands	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	3301      	adds	r3, #1
 800247c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	f47f af40 	bne.w	800230c <HAL_GPIO_DeInit+0x68>
  }
}
 800248c:	bf00      	nop
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	48000400 	.word	0x48000400
 8002498:	48000800 	.word	0x48000800
 800249c:	48000c00 	.word	0x48000c00
 80024a0:	48001000 	.word	0x48001000
 80024a4:	48001400 	.word	0x48001400
 80024a8:	0800b9ac 	.word	0x0800b9ac
 80024ac:	40010000 	.word	0x40010000
 80024b0:	40010400 	.word	0x40010400

080024b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	807b      	strh	r3, [r7, #2]
 80024c0:	4613      	mov	r3, r2
 80024c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80024c4:	887b      	ldrh	r3, [r7, #2]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d004      	beq.n	80024d4 <HAL_GPIO_WritePin+0x20>
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	0c1b      	lsrs	r3, r3, #16
 80024ce:	041b      	lsls	r3, r3, #16
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d004      	beq.n	80024de <HAL_GPIO_WritePin+0x2a>
 80024d4:	f240 11a7 	movw	r1, #423	; 0x1a7
 80024d8:	480d      	ldr	r0, [pc, #52]	; (8002510 <HAL_GPIO_WritePin+0x5c>)
 80024da:	f7fe fece 	bl	800127a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80024de:	787b      	ldrb	r3, [r7, #1]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <HAL_GPIO_WritePin+0x40>
 80024e4:	787b      	ldrb	r3, [r7, #1]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d004      	beq.n	80024f4 <HAL_GPIO_WritePin+0x40>
 80024ea:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 80024ee:	4808      	ldr	r0, [pc, #32]	; (8002510 <HAL_GPIO_WritePin+0x5c>)
 80024f0:	f7fe fec3 	bl	800127a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80024f4:	787b      	ldrb	r3, [r7, #1]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024fa:	887a      	ldrh	r2, [r7, #2]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002500:	e002      	b.n	8002508 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002502:	887a      	ldrh	r2, [r7, #2]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	0800b9ac 	.word	0x0800b9ac

08002514 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800251e:	4b08      	ldr	r3, [pc, #32]	; (8002540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d006      	beq.n	8002538 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800252a:	4a05      	ldr	r2, [pc, #20]	; (8002540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800252c:	88fb      	ldrh	r3, [r7, #6]
 800252e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002530:	88fb      	ldrh	r3, [r7, #6]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fe78 	bl	8001228 <HAL_GPIO_EXTI_Callback>
  }
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40010400 	.word	0x40010400

08002544 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e0ff      	b.n	8002756 <HAL_I2C_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a81      	ldr	r2, [pc, #516]	; (8002760 <HAL_I2C_Init+0x21c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d009      	beq.n	8002574 <HAL_I2C_Init+0x30>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a7f      	ldr	r2, [pc, #508]	; (8002764 <HAL_I2C_Init+0x220>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d004      	beq.n	8002574 <HAL_I2C_Init+0x30>
 800256a:	f240 11e5 	movw	r1, #485	; 0x1e5
 800256e:	487e      	ldr	r0, [pc, #504]	; (8002768 <HAL_I2C_Init+0x224>)
 8002570:	f7fe fe83 	bl	800127a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800257c:	d304      	bcc.n	8002588 <HAL_I2C_Init+0x44>
 800257e:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 8002582:	4879      	ldr	r0, [pc, #484]	; (8002768 <HAL_I2C_Init+0x224>)
 8002584:	f7fe fe79 	bl	800127a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d008      	beq.n	80025a2 <HAL_I2C_Init+0x5e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d004      	beq.n	80025a2 <HAL_I2C_Init+0x5e>
 8002598:	f240 11e7 	movw	r1, #487	; 0x1e7
 800259c:	4872      	ldr	r0, [pc, #456]	; (8002768 <HAL_I2C_Init+0x224>)
 800259e:	f7fe fe6c 	bl	800127a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d009      	beq.n	80025be <HAL_I2C_Init+0x7a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025b2:	d004      	beq.n	80025be <HAL_I2C_Init+0x7a>
 80025b4:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 80025b8:	486b      	ldr	r0, [pc, #428]	; (8002768 <HAL_I2C_Init+0x224>)
 80025ba:	f7fe fe5e 	bl	800127a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	2bff      	cmp	r3, #255	; 0xff
 80025c4:	d904      	bls.n	80025d0 <HAL_I2C_Init+0x8c>
 80025c6:	f240 11e9 	movw	r1, #489	; 0x1e9
 80025ca:	4867      	ldr	r0, [pc, #412]	; (8002768 <HAL_I2C_Init+0x224>)
 80025cc:	f7fe fe55 	bl	800127a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d020      	beq.n	800261a <HAL_I2C_Init+0xd6>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d01c      	beq.n	800261a <HAL_I2C_Init+0xd6>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d018      	beq.n	800261a <HAL_I2C_Init+0xd6>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d014      	beq.n	800261a <HAL_I2C_Init+0xd6>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d010      	beq.n	800261a <HAL_I2C_Init+0xd6>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	d00c      	beq.n	800261a <HAL_I2C_Init+0xd6>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	2b06      	cmp	r3, #6
 8002606:	d008      	beq.n	800261a <HAL_I2C_Init+0xd6>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	2b07      	cmp	r3, #7
 800260e:	d004      	beq.n	800261a <HAL_I2C_Init+0xd6>
 8002610:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8002614:	4854      	ldr	r0, [pc, #336]	; (8002768 <HAL_I2C_Init+0x224>)
 8002616:	f7fe fe30 	bl	800127a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d009      	beq.n	8002636 <HAL_I2C_Init+0xf2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800262a:	d004      	beq.n	8002636 <HAL_I2C_Init+0xf2>
 800262c:	f240 11eb 	movw	r1, #491	; 0x1eb
 8002630:	484d      	ldr	r0, [pc, #308]	; (8002768 <HAL_I2C_Init+0x224>)
 8002632:	f7fe fe22 	bl	800127a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <HAL_I2C_Init+0x10e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002646:	d004      	beq.n	8002652 <HAL_I2C_Init+0x10e>
 8002648:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800264c:	4846      	ldr	r0, [pc, #280]	; (8002768 <HAL_I2C_Init+0x224>)
 800264e:	f7fe fe14 	bl	800127a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fd feba 	bl	80003e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2224      	movs	r2, #36	; 0x24
 8002670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002690:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d107      	bne.n	80026ba <HAL_I2C_Init+0x176>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	e006      	b.n	80026c8 <HAL_I2C_Init+0x184>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d104      	bne.n	80026da <HAL_I2C_Init+0x196>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	ea42 0103 	orr.w	r1, r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	021a      	lsls	r2, r3, #8
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69d9      	ldr	r1, [r3, #28]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1a      	ldr	r2, [r3, #32]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40005400 	.word	0x40005400
 8002764:	40005800 	.word	0x40005800
 8002768:	0800b9e8 	.word	0x0800b9e8

0800276c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af02      	add	r7, sp, #8
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	4608      	mov	r0, r1
 8002776:	4611      	mov	r1, r2
 8002778:	461a      	mov	r2, r3
 800277a:	4603      	mov	r3, r0
 800277c:	817b      	strh	r3, [r7, #10]
 800277e:	460b      	mov	r3, r1
 8002780:	813b      	strh	r3, [r7, #8]
 8002782:	4613      	mov	r3, r2
 8002784:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d007      	beq.n	800279c <HAL_I2C_Mem_Write+0x30>
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d004      	beq.n	800279c <HAL_I2C_Mem_Write+0x30>
 8002792:	f640 01fb 	movw	r1, #2299	; 0x8fb
 8002796:	4884      	ldr	r0, [pc, #528]	; (80029a8 <HAL_I2C_Mem_Write+0x23c>)
 8002798:	f7fe fd6f 	bl	800127a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	f040 80f9 	bne.w	800299c <HAL_I2C_Mem_Write+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <HAL_I2C_Mem_Write+0x4a>
 80027b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d105      	bne.n	80027c2 <HAL_I2C_Mem_Write+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027bc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e0ed      	b.n	800299e <HAL_I2C_Mem_Write+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_I2C_Mem_Write+0x64>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e0e6      	b.n	800299e <HAL_I2C_Mem_Write+0x232>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027d8:	f7ff f972 	bl	8001ac0 <HAL_GetTick>
 80027dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	2319      	movs	r3, #25
 80027e4:	2201      	movs	r2, #1
 80027e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fad4 	bl	8002d98 <I2C_WaitOnFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_I2C_Mem_Write+0x8e>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e0d1      	b.n	800299e <HAL_I2C_Mem_Write+0x232>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2221      	movs	r2, #33	; 0x21
 80027fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2240      	movs	r2, #64	; 0x40
 8002806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a3a      	ldr	r2, [r7, #32]
 8002814:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800281a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002822:	88f8      	ldrh	r0, [r7, #6]
 8002824:	893a      	ldrh	r2, [r7, #8]
 8002826:	8979      	ldrh	r1, [r7, #10]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	9301      	str	r3, [sp, #4]
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	4603      	mov	r3, r0
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f9e4 	bl	8002c00 <I2C_RequestMemoryWrite>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d005      	beq.n	800284a <HAL_I2C_Mem_Write+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e0a9      	b.n	800299e <HAL_I2C_Mem_Write+0x232>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284e:	b29b      	uxth	r3, r3
 8002850:	2bff      	cmp	r3, #255	; 0xff
 8002852:	d90e      	bls.n	8002872 <HAL_I2C_Mem_Write+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	22ff      	movs	r2, #255	; 0xff
 8002858:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285e:	b2da      	uxtb	r2, r3
 8002860:	8979      	ldrh	r1, [r7, #10]
 8002862:	2300      	movs	r3, #0
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fbb6 	bl	8002fdc <I2C_TransferConfig>
 8002870:	e00f      	b.n	8002892 <HAL_I2C_Mem_Write+0x126>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002880:	b2da      	uxtb	r2, r3
 8002882:	8979      	ldrh	r1, [r7, #10]
 8002884:	2300      	movs	r3, #0
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 fba5 	bl	8002fdc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fabe 	bl	8002e18 <I2C_WaitOnTXISFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_I2C_Mem_Write+0x13a>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e07b      	b.n	800299e <HAL_I2C_Mem_Write+0x232>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	781a      	ldrb	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d034      	beq.n	800294a <HAL_I2C_Mem_Write+0x1de>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d130      	bne.n	800294a <HAL_I2C_Mem_Write+0x1de>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ee:	2200      	movs	r2, #0
 80028f0:	2180      	movs	r1, #128	; 0x80
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fa50 	bl	8002d98 <I2C_WaitOnFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_I2C_Mem_Write+0x196>
        {
          return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e04d      	b.n	800299e <HAL_I2C_Mem_Write+0x232>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	2bff      	cmp	r3, #255	; 0xff
 800290a:	d90e      	bls.n	800292a <HAL_I2C_Mem_Write+0x1be>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	22ff      	movs	r2, #255	; 0xff
 8002910:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	b2da      	uxtb	r2, r3
 8002918:	8979      	ldrh	r1, [r7, #10]
 800291a:	2300      	movs	r3, #0
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fb5a 	bl	8002fdc <I2C_TransferConfig>
 8002928:	e00f      	b.n	800294a <HAL_I2C_Mem_Write+0x1de>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002938:	b2da      	uxtb	r2, r3
 800293a:	8979      	ldrh	r1, [r7, #10]
 800293c:	2300      	movs	r3, #0
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 fb49 	bl	8002fdc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294e:	b29b      	uxth	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d19e      	bne.n	8002892 <HAL_I2C_Mem_Write+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 fa9d 	bl	8002e98 <I2C_WaitOnSTOPFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_I2C_Mem_Write+0x1fc>
    {
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e01a      	b.n	800299e <HAL_I2C_Mem_Write+0x232>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2220      	movs	r2, #32
 800296e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6859      	ldr	r1, [r3, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <HAL_I2C_Mem_Write+0x240>)
 800297c:	400b      	ands	r3, r1
 800297e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	e000      	b.n	800299e <HAL_I2C_Mem_Write+0x232>
  }
  else
  {
    return HAL_BUSY;
 800299c:	2302      	movs	r3, #2
  }
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	0800b9e8 	.word	0x0800b9e8
 80029ac:	fe00e800 	.word	0xfe00e800

080029b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	4608      	mov	r0, r1
 80029ba:	4611      	mov	r1, r2
 80029bc:	461a      	mov	r2, r3
 80029be:	4603      	mov	r3, r0
 80029c0:	817b      	strh	r3, [r7, #10]
 80029c2:	460b      	mov	r3, r1
 80029c4:	813b      	strh	r3, [r7, #8]
 80029c6:	4613      	mov	r3, r2
 80029c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d007      	beq.n	80029e0 <HAL_I2C_Mem_Read+0x30>
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d004      	beq.n	80029e0 <HAL_I2C_Mem_Read+0x30>
 80029d6:	f640 1182 	movw	r1, #2434	; 0x982
 80029da:	4886      	ldr	r0, [pc, #536]	; (8002bf4 <HAL_I2C_Mem_Read+0x244>)
 80029dc:	f7fe fc4d 	bl	800127a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	f040 80fd 	bne.w	8002be8 <HAL_I2C_Mem_Read+0x238>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <HAL_I2C_Mem_Read+0x4a>
 80029f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d105      	bne.n	8002a06 <HAL_I2C_Mem_Read+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a00:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e0f1      	b.n	8002bea <HAL_I2C_Mem_Read+0x23a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_I2C_Mem_Read+0x64>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e0ea      	b.n	8002bea <HAL_I2C_Mem_Read+0x23a>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a1c:	f7ff f850 	bl	8001ac0 <HAL_GetTick>
 8002a20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	2319      	movs	r3, #25
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f9b2 	bl	8002d98 <I2C_WaitOnFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_I2C_Mem_Read+0x8e>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e0d5      	b.n	8002bea <HAL_I2C_Mem_Read+0x23a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2222      	movs	r2, #34	; 0x22
 8002a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2240      	movs	r2, #64	; 0x40
 8002a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a3a      	ldr	r2, [r7, #32]
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a66:	88f8      	ldrh	r0, [r7, #6]
 8002a68:	893a      	ldrh	r2, [r7, #8]
 8002a6a:	8979      	ldrh	r1, [r7, #10]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	9301      	str	r3, [sp, #4]
 8002a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	4603      	mov	r3, r0
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f916 	bl	8002ca8 <I2C_RequestMemoryRead>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d005      	beq.n	8002a8e <HAL_I2C_Mem_Read+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e0ad      	b.n	8002bea <HAL_I2C_Mem_Read+0x23a>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2bff      	cmp	r3, #255	; 0xff
 8002a96:	d90e      	bls.n	8002ab6 <HAL_I2C_Mem_Read+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	22ff      	movs	r2, #255	; 0xff
 8002a9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	8979      	ldrh	r1, [r7, #10]
 8002aa6:	4b54      	ldr	r3, [pc, #336]	; (8002bf8 <HAL_I2C_Mem_Read+0x248>)
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 fa94 	bl	8002fdc <I2C_TransferConfig>
 8002ab4:	e00f      	b.n	8002ad6 <HAL_I2C_Mem_Read+0x126>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	8979      	ldrh	r1, [r7, #10]
 8002ac8:	4b4b      	ldr	r3, [pc, #300]	; (8002bf8 <HAL_I2C_Mem_Read+0x248>)
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 fa83 	bl	8002fdc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002adc:	2200      	movs	r2, #0
 8002ade:	2104      	movs	r1, #4
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f959 	bl	8002d98 <I2C_WaitOnFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_I2C_Mem_Read+0x140>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e07c      	b.n	8002bea <HAL_I2C_Mem_Read+0x23a>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d034      	beq.n	8002b96 <HAL_I2C_Mem_Read+0x1e6>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d130      	bne.n	8002b96 <HAL_I2C_Mem_Read+0x1e6>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2180      	movs	r1, #128	; 0x80
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f92a 	bl	8002d98 <I2C_WaitOnFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_I2C_Mem_Read+0x19e>
        {
          return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e04d      	b.n	8002bea <HAL_I2C_Mem_Read+0x23a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2bff      	cmp	r3, #255	; 0xff
 8002b56:	d90e      	bls.n	8002b76 <HAL_I2C_Mem_Read+0x1c6>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	22ff      	movs	r2, #255	; 0xff
 8002b5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	8979      	ldrh	r1, [r7, #10]
 8002b66:	2300      	movs	r3, #0
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fa34 	bl	8002fdc <I2C_TransferConfig>
 8002b74:	e00f      	b.n	8002b96 <HAL_I2C_Mem_Read+0x1e6>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	8979      	ldrh	r1, [r7, #10]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 fa23 	bl	8002fdc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d19a      	bne.n	8002ad6 <HAL_I2C_Mem_Read+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f977 	bl	8002e98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_I2C_Mem_Read+0x204>
    {
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e01a      	b.n	8002bea <HAL_I2C_Mem_Read+0x23a>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6859      	ldr	r1, [r3, #4]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <HAL_I2C_Mem_Read+0x24c>)
 8002bc8:	400b      	ands	r3, r1
 8002bca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	e000      	b.n	8002bea <HAL_I2C_Mem_Read+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8002be8:	2302      	movs	r3, #2
  }
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	0800b9e8 	.word	0x0800b9e8
 8002bf8:	80002400 	.word	0x80002400
 8002bfc:	fe00e800 	.word	0xfe00e800

08002c00 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	4608      	mov	r0, r1
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	817b      	strh	r3, [r7, #10]
 8002c12:	460b      	mov	r3, r1
 8002c14:	813b      	strh	r3, [r7, #8]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c1a:	88fb      	ldrh	r3, [r7, #6]
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	8979      	ldrh	r1, [r7, #10]
 8002c20:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <I2C_RequestMemoryWrite+0xa4>)
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f9d7 	bl	8002fdc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	69b9      	ldr	r1, [r7, #24]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f8f0 	bl	8002e18 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e02c      	b.n	8002c9c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d105      	bne.n	8002c54 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c48:	893b      	ldrh	r3, [r7, #8]
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	629a      	str	r2, [r3, #40]	; 0x28
 8002c52:	e015      	b.n	8002c80 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c54:	893b      	ldrh	r3, [r7, #8]
 8002c56:	0a1b      	lsrs	r3, r3, #8
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c62:	69fa      	ldr	r2, [r7, #28]
 8002c64:	69b9      	ldr	r1, [r7, #24]
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f8d6 	bl	8002e18 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e012      	b.n	8002c9c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c76:	893b      	ldrh	r3, [r7, #8]
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2200      	movs	r2, #0
 8002c88:	2180      	movs	r1, #128	; 0x80
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f884 	bl	8002d98 <I2C_WaitOnFlagUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	80002000 	.word	0x80002000

08002ca8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af02      	add	r7, sp, #8
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	4608      	mov	r0, r1
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	817b      	strh	r3, [r7, #10]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	813b      	strh	r3, [r7, #8]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	8979      	ldrh	r1, [r7, #10]
 8002cc8:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <I2C_RequestMemoryRead+0xa4>)
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f984 	bl	8002fdc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	69b9      	ldr	r1, [r7, #24]
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f89d 	bl	8002e18 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e02c      	b.n	8002d42 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d105      	bne.n	8002cfa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cee:	893b      	ldrh	r3, [r7, #8]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	629a      	str	r2, [r3, #40]	; 0x28
 8002cf8:	e015      	b.n	8002d26 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002cfa:	893b      	ldrh	r3, [r7, #8]
 8002cfc:	0a1b      	lsrs	r3, r3, #8
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	69b9      	ldr	r1, [r7, #24]
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f883 	bl	8002e18 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e012      	b.n	8002d42 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d1c:	893b      	ldrh	r3, [r7, #8]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2140      	movs	r1, #64	; 0x40
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f831 	bl	8002d98 <I2C_WaitOnFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	80002000 	.word	0x80002000

08002d50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d103      	bne.n	8002d6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d007      	beq.n	8002d8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	619a      	str	r2, [r3, #24]
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002da8:	e022      	b.n	8002df0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002db0:	d01e      	beq.n	8002df0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db2:	f7fe fe85 	bl	8001ac0 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d302      	bcc.n	8002dc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d113      	bne.n	8002df0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dcc:	f043 0220 	orr.w	r2, r3, #32
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e00f      	b.n	8002e10 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	461a      	mov	r2, r3
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d0cd      	beq.n	8002daa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e24:	e02c      	b.n	8002e80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 f870 	bl	8002f10 <I2C_IsAcknowledgeFailed>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e02a      	b.n	8002e90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e40:	d01e      	beq.n	8002e80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e42:	f7fe fe3d 	bl	8001ac0 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d302      	bcc.n	8002e58 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d113      	bne.n	8002e80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5c:	f043 0220 	orr.w	r2, r3, #32
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e007      	b.n	8002e90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d1cb      	bne.n	8002e26 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ea4:	e028      	b.n	8002ef8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	68b9      	ldr	r1, [r7, #8]
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f830 	bl	8002f10 <I2C_IsAcknowledgeFailed>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e026      	b.n	8002f08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eba:	f7fe fe01 	bl	8001ac0 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d302      	bcc.n	8002ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d113      	bne.n	8002ef8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed4:	f043 0220 	orr.w	r2, r3, #32
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e007      	b.n	8002f08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d1cf      	bne.n	8002ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	d151      	bne.n	8002fce <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f2a:	e022      	b.n	8002f72 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f32:	d01e      	beq.n	8002f72 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f34:	f7fe fdc4 	bl	8001ac0 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d302      	bcc.n	8002f4a <I2C_IsAcknowledgeFailed+0x3a>
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d113      	bne.n	8002f72 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	f043 0220 	orr.w	r2, r3, #32
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e02e      	b.n	8002fd0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 0320 	and.w	r3, r3, #32
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d1d5      	bne.n	8002f2c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2210      	movs	r2, #16
 8002f86:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7ff fedd 	bl	8002d50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <I2C_IsAcknowledgeFailed+0xc8>)
 8002fa2:	400b      	ands	r3, r1
 8002fa4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	f043 0204 	orr.w	r2, r3, #4
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	fe00e800 	.word	0xfe00e800

08002fdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	607b      	str	r3, [r7, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	817b      	strh	r3, [r7, #10]
 8002fea:	4613      	mov	r3, r2
 8002fec:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a28      	ldr	r2, [pc, #160]	; (8003094 <I2C_TransferConfig+0xb8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d009      	beq.n	800300c <I2C_TransferConfig+0x30>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a26      	ldr	r2, [pc, #152]	; (8003098 <I2C_TransferConfig+0xbc>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d004      	beq.n	800300c <I2C_TransferConfig+0x30>
 8003002:	f641 1139 	movw	r1, #6457	; 0x1939
 8003006:	4825      	ldr	r0, [pc, #148]	; (800309c <I2C_TransferConfig+0xc0>)
 8003008:	f7fe f937 	bl	800127a <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003012:	d00b      	beq.n	800302c <I2C_TransferConfig+0x50>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800301a:	d007      	beq.n	800302c <I2C_TransferConfig+0x50>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d004      	beq.n	800302c <I2C_TransferConfig+0x50>
 8003022:	f641 113a 	movw	r1, #6458	; 0x193a
 8003026:	481d      	ldr	r0, [pc, #116]	; (800309c <I2C_TransferConfig+0xc0>)
 8003028:	f7fe f927 	bl	800127a <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	4a1c      	ldr	r2, [pc, #112]	; (80030a0 <I2C_TransferConfig+0xc4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00f      	beq.n	8003054 <I2C_TransferConfig+0x78>
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	4a1b      	ldr	r2, [pc, #108]	; (80030a4 <I2C_TransferConfig+0xc8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d00b      	beq.n	8003054 <I2C_TransferConfig+0x78>
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	4a1a      	ldr	r2, [pc, #104]	; (80030a8 <I2C_TransferConfig+0xcc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d007      	beq.n	8003054 <I2C_TransferConfig+0x78>
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d004      	beq.n	8003054 <I2C_TransferConfig+0x78>
 800304a:	f641 113b 	movw	r1, #6459	; 0x193b
 800304e:	4813      	ldr	r0, [pc, #76]	; (800309c <I2C_TransferConfig+0xc0>)
 8003050:	f7fe f913 	bl	800127a <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	0d5b      	lsrs	r3, r3, #21
 800305e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003062:	4b12      	ldr	r3, [pc, #72]	; (80030ac <I2C_TransferConfig+0xd0>)
 8003064:	430b      	orrs	r3, r1
 8003066:	43db      	mvns	r3, r3
 8003068:	ea02 0103 	and.w	r1, r2, r3
 800306c:	897b      	ldrh	r3, [r7, #10]
 800306e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003072:	7a7b      	ldrb	r3, [r7, #9]
 8003074:	041b      	lsls	r3, r3, #16
 8003076:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	431a      	orrs	r2, r3
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	431a      	orrs	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800308c:	bf00      	nop
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40005400 	.word	0x40005400
 8003098:	40005800 	.word	0x40005800
 800309c:	0800b9e8 	.word	0x0800b9e8
 80030a0:	80004000 	.word	0x80004000
 80030a4:	80002400 	.word	0x80002400
 80030a8:	80002000 	.word	0x80002000
 80030ac:	03ff63ff 	.word	0x03ff63ff

080030b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a2d      	ldr	r2, [pc, #180]	; (8003174 <HAL_I2CEx_ConfigAnalogFilter+0xc4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d008      	beq.n	80030d6 <HAL_I2CEx_ConfigAnalogFilter+0x26>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a2b      	ldr	r2, [pc, #172]	; (8003178 <HAL_I2CEx_ConfigAnalogFilter+0xc8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d003      	beq.n	80030d6 <HAL_I2CEx_ConfigAnalogFilter+0x26>
 80030ce:	2164      	movs	r1, #100	; 0x64
 80030d0:	482a      	ldr	r0, [pc, #168]	; (800317c <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 80030d2:	f7fe f8d2 	bl	800127a <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e2:	d003      	beq.n	80030ec <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 80030e4:	2165      	movs	r1, #101	; 0x65
 80030e6:	4825      	ldr	r0, [pc, #148]	; (800317c <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 80030e8:	f7fe f8c7 	bl	800127a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d138      	bne.n	800316a <HAL_I2CEx_ConfigAnalogFilter+0xba>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_I2CEx_ConfigAnalogFilter+0x56>
 8003102:	2302      	movs	r3, #2
 8003104:	e032      	b.n	800316c <HAL_I2CEx_ConfigAnalogFilter+0xbc>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2224      	movs	r2, #36	; 0x24
 8003112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0201 	bic.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003134:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6819      	ldr	r1, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0201 	orr.w	r2, r2, #1
 8003154:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	e000      	b.n	800316c <HAL_I2CEx_ConfigAnalogFilter+0xbc>
  }
  else
  {
    return HAL_BUSY;
 800316a:	2302      	movs	r3, #2
  }
}
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40005400 	.word	0x40005400
 8003178:	40005800 	.word	0x40005800
 800317c:	0800ba20 	.word	0x0800ba20

08003180 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2c      	ldr	r2, [pc, #176]	; (8003240 <HAL_I2CEx_ConfigDigitalFilter+0xc0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d008      	beq.n	80031a6 <HAL_I2CEx_ConfigDigitalFilter+0x26>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a2a      	ldr	r2, [pc, #168]	; (8003244 <HAL_I2CEx_ConfigDigitalFilter+0xc4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d003      	beq.n	80031a6 <HAL_I2CEx_ConfigDigitalFilter+0x26>
 800319e:	2192      	movs	r1, #146	; 0x92
 80031a0:	4829      	ldr	r0, [pc, #164]	; (8003248 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 80031a2:	f7fe f86a 	bl	800127a <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b0f      	cmp	r3, #15
 80031aa:	d903      	bls.n	80031b4 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 80031ac:	2193      	movs	r1, #147	; 0x93
 80031ae:	4826      	ldr	r0, [pc, #152]	; (8003248 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 80031b0:	f7fe f863 	bl	800127a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d139      	bne.n	8003234 <HAL_I2CEx_ConfigDigitalFilter+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e033      	b.n	8003236 <HAL_I2CEx_ConfigDigitalFilter+0xb6>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2224      	movs	r2, #36	; 0x24
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0201 	bic.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	e000      	b.n	8003236 <HAL_I2CEx_ConfigDigitalFilter+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003234:	2302      	movs	r3, #2
  }
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40005400 	.word	0x40005400
 8003244:	40005800 	.word	0x40005800
 8003248:	0800ba20 	.word	0x0800ba20

0800324c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800324c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800324e:	b08b      	sub	sp, #44	; 0x2c
 8003250:	af06      	add	r7, sp, #24
 8003252:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e0d9      	b.n	8003412 <HAL_PCD_Init+0x1c6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a6e      	ldr	r2, [pc, #440]	; (800341c <HAL_PCD_Init+0x1d0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d003      	beq.n	8003270 <HAL_PCD_Init+0x24>
 8003268:	2185      	movs	r1, #133	; 0x85
 800326a:	486d      	ldr	r0, [pc, #436]	; (8003420 <HAL_PCD_Init+0x1d4>)
 800326c:	f7fe f805 	bl	800127a <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d106      	bne.n	800328a <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f007 fc45 	bl	800ab14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2203      	movs	r2, #3
 800328e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f003 fe65 	bl	8006f66 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800329c:	2300      	movs	r3, #0
 800329e:	73fb      	strb	r3, [r7, #15]
 80032a0:	e04c      	b.n	800333c <HAL_PCD_Init+0xf0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	440b      	add	r3, r1
 80032b2:	3301      	adds	r3, #1
 80032b4:	2201      	movs	r2, #1
 80032b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	440b      	add	r3, r1
 80032c8:	7bfa      	ldrb	r2, [r7, #15]
 80032ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032cc:	7bfa      	ldrb	r2, [r7, #15]
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	b298      	uxth	r0, r3
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	440b      	add	r3, r1
 80032de:	3336      	adds	r3, #54	; 0x36
 80032e0:	4602      	mov	r2, r0
 80032e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	440b      	add	r3, r1
 80032f4:	3303      	adds	r3, #3
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032fa:	7bfa      	ldrb	r2, [r7, #15]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	440b      	add	r3, r1
 8003308:	3338      	adds	r3, #56	; 0x38
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800330e:	7bfa      	ldrb	r2, [r7, #15]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	440b      	add	r3, r1
 800331c:	333c      	adds	r3, #60	; 0x3c
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003322:	7bfa      	ldrb	r2, [r7, #15]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	440b      	add	r3, r1
 8003330:	3340      	adds	r3, #64	; 0x40
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	3301      	adds	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	7bfa      	ldrb	r2, [r7, #15]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	429a      	cmp	r2, r3
 8003344:	d3ad      	bcc.n	80032a2 <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003346:	2300      	movs	r3, #0
 8003348:	73fb      	strb	r3, [r7, #15]
 800334a:	e044      	b.n	80033d6 <HAL_PCD_Init+0x18a>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800334c:	7bfa      	ldrb	r2, [r7, #15]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	440b      	add	r3, r1
 800335a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800335e:	2200      	movs	r2, #0
 8003360:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003362:	7bfa      	ldrb	r2, [r7, #15]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	440b      	add	r3, r1
 8003370:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003374:	7bfa      	ldrb	r2, [r7, #15]
 8003376:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003378:	7bfa      	ldrb	r2, [r7, #15]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	440b      	add	r3, r1
 8003386:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800338e:	7bfa      	ldrb	r2, [r7, #15]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	440b      	add	r3, r1
 800339c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033a4:	7bfa      	ldrb	r2, [r7, #15]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	440b      	add	r3, r1
 80033b2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033ba:	7bfa      	ldrb	r2, [r7, #15]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	440b      	add	r3, r1
 80033c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	3301      	adds	r3, #1
 80033d4:	73fb      	strb	r3, [r7, #15]
 80033d6:	7bfa      	ldrb	r2, [r7, #15]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d3b5      	bcc.n	800334c <HAL_PCD_Init+0x100>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	687e      	ldr	r6, [r7, #4]
 80033e8:	466d      	mov	r5, sp
 80033ea:	f106 0410 	add.w	r4, r6, #16
 80033ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f2:	6823      	ldr	r3, [r4, #0]
 80033f4:	602b      	str	r3, [r5, #0]
 80033f6:	1d33      	adds	r3, r6, #4
 80033f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033fa:	6838      	ldr	r0, [r7, #0]
 80033fc:	f003 fdce 	bl	8006f9c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800341a:	bf00      	nop
 800341c:	40005c00 	.word	0x40005c00
 8003420:	0800ba5c 	.word	0x0800ba5c

08003424 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_PCD_Start+0x16>
 8003436:	2302      	movs	r3, #2
 8003438:	e016      	b.n	8003468 <HAL_PCD_Start+0x44>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f003 fd76 	bl	8006f38 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800344c:	2101      	movs	r1, #1
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f007 fdfe 	bl	800b050 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f005 fd4f 	bl	8008efc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f005 fd48 	bl	8008f12 <USB_ReadInterrupts>
 8003482:	4603      	mov	r3, r0
 8003484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800348c:	d102      	bne.n	8003494 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 faf6 	bl	8003a80 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f005 fd3a 	bl	8008f12 <USB_ReadInterrupts>
 800349e:	4603      	mov	r3, r0
 80034a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a8:	d112      	bne.n	80034d0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034bc:	b292      	uxth	r2, r2
 80034be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f007 fbc7 	bl	800ac56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80034c8:	2100      	movs	r1, #0
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f8c7 	bl	800365e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f005 fd1c 	bl	8008f12 <USB_ReadInterrupts>
 80034da:	4603      	mov	r3, r0
 80034dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034e4:	d10b      	bne.n	80034fe <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034f8:	b292      	uxth	r2, r2
 80034fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f005 fd05 	bl	8008f12 <USB_ReadInterrupts>
 8003508:	4603      	mov	r3, r0
 800350a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800350e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003512:	d10b      	bne.n	800352c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800351c:	b29a      	uxth	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003526:	b292      	uxth	r2, r2
 8003528:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f005 fcee 	bl	8008f12 <USB_ReadInterrupts>
 8003536:	4603      	mov	r3, r0
 8003538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800353c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003540:	d126      	bne.n	8003590 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800354a:	b29a      	uxth	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0204 	bic.w	r2, r2, #4
 8003554:	b292      	uxth	r2, r2
 8003556:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003562:	b29a      	uxth	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0208 	bic.w	r2, r2, #8
 800356c:	b292      	uxth	r2, r2
 800356e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f007 fba8 	bl	800acc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003580:	b29a      	uxth	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800358a:	b292      	uxth	r2, r2
 800358c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f005 fcbc 	bl	8008f12 <USB_ReadInterrupts>
 800359a:	4603      	mov	r3, r0
 800359c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035a4:	d126      	bne.n	80035f4 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0208 	orr.w	r2, r2, #8
 80035b8:	b292      	uxth	r2, r2
 80035ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035d0:	b292      	uxth	r2, r2
 80035d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035de:	b29a      	uxth	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0204 	orr.w	r2, r2, #4
 80035e8:	b292      	uxth	r2, r2
 80035ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f007 fb50 	bl	800ac94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f005 fc8a 	bl	8008f12 <USB_ReadInterrupts>
 80035fe:	4603      	mov	r3, r0
 8003600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003608:	d10e      	bne.n	8003628 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003612:	b29a      	uxth	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800361c:	b292      	uxth	r2, r2
 800361e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f007 fb09 	bl	800ac3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f005 fc70 	bl	8008f12 <USB_ReadInterrupts>
 8003632:	4603      	mov	r3, r0
 8003634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800363c:	d10b      	bne.n	8003656 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003646:	b29a      	uxth	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003650:	b292      	uxth	r2, r2
 8003652:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	460b      	mov	r3, r1
 8003668:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_PCD_SetAddress+0x1a>
 8003674:	2302      	movs	r3, #2
 8003676:	e013      	b.n	80036a0 <HAL_PCD_SetAddress+0x42>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	78fa      	ldrb	r2, [r7, #3]
 8003684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	4611      	mov	r1, r2
 8003690:	4618      	mov	r0, r3
 8003692:	f005 fc1f 	bl	8008ed4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	4608      	mov	r0, r1
 80036b2:	4611      	mov	r1, r2
 80036b4:	461a      	mov	r2, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	70fb      	strb	r3, [r7, #3]
 80036ba:	460b      	mov	r3, r1
 80036bc:	803b      	strh	r3, [r7, #0]
 80036be:	4613      	mov	r3, r2
 80036c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	da0e      	bge.n	80036ec <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2201      	movs	r2, #1
 80036e8:	705a      	strb	r2, [r3, #1]
 80036ea:	e00e      	b.n	800370a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	f003 0207 	and.w	r2, r3, #7
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	4413      	add	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	b2da      	uxtb	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003716:	883a      	ldrh	r2, [r7, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	78ba      	ldrb	r2, [r7, #2]
 8003720:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	785b      	ldrb	r3, [r3, #1]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d004      	beq.n	8003734 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003734:	78bb      	ldrb	r3, [r7, #2]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d102      	bne.n	8003740 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003746:	2b01      	cmp	r3, #1
 8003748:	d101      	bne.n	800374e <HAL_PCD_EP_Open+0xa6>
 800374a:	2302      	movs	r3, #2
 800374c:	e00e      	b.n	800376c <HAL_PCD_EP_Open+0xc4>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68f9      	ldr	r1, [r7, #12]
 800375c:	4618      	mov	r0, r3
 800375e:	f003 fc3f 	bl	8006fe0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800376a:	7afb      	ldrb	r3, [r7, #11]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003780:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003784:	2b00      	cmp	r3, #0
 8003786:	da0e      	bge.n	80037a6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	4413      	add	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	705a      	strb	r2, [r3, #1]
 80037a4:	e00e      	b.n	80037c4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	f003 0207 	and.w	r2, r3, #7
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	4413      	add	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_PCD_EP_Close+0x6a>
 80037da:	2302      	movs	r3, #2
 80037dc:	e00e      	b.n	80037fc <HAL_PCD_EP_Close+0x88>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68f9      	ldr	r1, [r7, #12]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f003 ff65 	bl	80076bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	607a      	str	r2, [r7, #4]
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	460b      	mov	r3, r1
 8003812:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003814:	7afb      	ldrb	r3, [r7, #11]
 8003816:	f003 0207 	and.w	r2, r3, #7
 800381a:	4613      	mov	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4413      	add	r3, r2
 800382a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2200      	movs	r2, #0
 800383c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2200      	movs	r2, #0
 8003842:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003844:	7afb      	ldrb	r3, [r7, #11]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	b2da      	uxtb	r2, r3
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003850:	7afb      	ldrb	r3, [r7, #11]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6979      	ldr	r1, [r7, #20]
 8003860:	4618      	mov	r0, r3
 8003862:	f004 f918 	bl	8007a96 <USB_EPStartXfer>
 8003866:	e005      	b.n	8003874 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6979      	ldr	r1, [r7, #20]
 800386e:	4618      	mov	r0, r3
 8003870:	f004 f911 	bl	8007a96 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	460b      	mov	r3, r1
 8003888:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	f003 0207 	and.w	r2, r3, #7
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	440b      	add	r3, r1
 800389c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80038a0:	681b      	ldr	r3, [r3, #0]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b086      	sub	sp, #24
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	460b      	mov	r3, r1
 80038bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038be:	7afb      	ldrb	r3, [r7, #11]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	4413      	add	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2200      	movs	r2, #0
 80038f2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2201      	movs	r2, #1
 80038f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038fa:	7afb      	ldrb	r3, [r7, #11]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	b2da      	uxtb	r2, r3
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003906:	7afb      	ldrb	r3, [r7, #11]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	2b00      	cmp	r3, #0
 800390e:	d106      	bne.n	800391e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6979      	ldr	r1, [r7, #20]
 8003916:	4618      	mov	r0, r3
 8003918:	f004 f8bd 	bl	8007a96 <USB_EPStartXfer>
 800391c:	e005      	b.n	800392a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6979      	ldr	r1, [r7, #20]
 8003924:	4618      	mov	r0, r3
 8003926:	f004 f8b6 	bl	8007a96 <USB_EPStartXfer>
  }

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	f003 0207 	and.w	r2, r3, #7
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	429a      	cmp	r2, r3
 800394c:	d901      	bls.n	8003952 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e03e      	b.n	80039d0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003952:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003956:	2b00      	cmp	r3, #0
 8003958:	da0e      	bge.n	8003978 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	4413      	add	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	705a      	strb	r2, [r3, #1]
 8003976:	e00c      	b.n	8003992 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	4413      	add	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003998:	78fb      	ldrb	r3, [r7, #3]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_PCD_EP_SetStall+0x7e>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e00e      	b.n	80039d0 <HAL_PCD_EP_SetStall+0x9c>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68f9      	ldr	r1, [r7, #12]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f005 f988 	bl	8008cd6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	f003 020f 	and.w	r2, r3, #15
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d901      	bls.n	80039f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e040      	b.n	8003a78 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	da0e      	bge.n	8003a1c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4413      	add	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	705a      	strb	r2, [r3, #1]
 8003a1a:	e00e      	b.n	8003a3a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	f003 0207 	and.w	r2, r3, #7
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	4413      	add	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_PCD_EP_ClrStall+0x82>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e00e      	b.n	8003a78 <HAL_PCD_EP_ClrStall+0xa0>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68f9      	ldr	r1, [r7, #12]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f005 f985 	bl	8008d78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08e      	sub	sp, #56	; 0x38
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a88:	e2df      	b.n	800404a <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a92:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003a94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003aa0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f040 8158 	bne.w	8003d5a <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003aaa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003aac:	f003 0310 	and.w	r3, r3, #16
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d152      	bne.n	8003b5a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac4:	81fb      	strh	r3, [r7, #14]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	89fb      	ldrh	r3, [r7, #14]
 8003acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3328      	adds	r3, #40	; 0x28
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	461a      	mov	r2, r3
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4413      	add	r3, r2
 8003af2:	3302      	adds	r3, #2
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6812      	ldr	r2, [r2, #0]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	441a      	add	r2, r3
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003b18:	2100      	movs	r1, #0
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f007 f873 	bl	800ac06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 828e 	beq.w	800404a <PCD_EP_ISR_Handler+0x5ca>
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f040 8289 	bne.w	800404a <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	b292      	uxth	r2, r2
 8003b4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b58:	e277      	b.n	800404a <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003b6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d034      	beq.n	8003bde <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	461a      	mov	r2, r3
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4413      	add	r3, r2
 8003b88:	3306      	adds	r3, #6
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f005 fa02 	bl	8008fbc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	823b      	strh	r3, [r7, #16]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	8a3a      	ldrh	r2, [r7, #16]
 8003bce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bd2:	b292      	uxth	r2, r2
 8003bd4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f006 ffe8 	bl	800abac <HAL_PCD_SetupStageCallback>
 8003bdc:	e235      	b.n	800404a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003bde:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f280 8231 	bge.w	800404a <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	83bb      	strh	r3, [r7, #28]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	8bba      	ldrh	r2, [r7, #28]
 8003bfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c02:	b292      	uxth	r2, r2
 8003c04:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	461a      	mov	r2, r3
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4413      	add	r3, r2
 8003c1a:	3306      	adds	r3, #6
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d019      	beq.n	8003c6e <PCD_EP_ISR_Handler+0x1ee>
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d015      	beq.n	8003c6e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	6959      	ldr	r1, [r3, #20]
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	f005 f9b2 	bl	8008fbc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	441a      	add	r2, r3
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003c66:	2100      	movs	r1, #0
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f006 ffb1 	bl	800abd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	61bb      	str	r3, [r7, #24]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	4413      	add	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d112      	bne.n	8003cbc <PCD_EP_ISR_Handler+0x23c>
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	801a      	strh	r2, [r3, #0]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	801a      	strh	r2, [r3, #0]
 8003cba:	e02f      	b.n	8003d1c <PCD_EP_ISR_Handler+0x29c>
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	2b3e      	cmp	r3, #62	; 0x3e
 8003cc2:	d813      	bhi.n	8003cec <PCD_EP_ISR_Handler+0x26c>
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	085b      	lsrs	r3, r3, #1
 8003cca:	633b      	str	r3, [r7, #48]	; 0x30
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <PCD_EP_ISR_Handler+0x25e>
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	3301      	adds	r3, #1
 8003cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	029b      	lsls	r3, r3, #10
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	801a      	strh	r2, [r3, #0]
 8003cea:	e017      	b.n	8003d1c <PCD_EP_ISR_Handler+0x29c>
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	633b      	str	r3, [r7, #48]	; 0x30
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d102      	bne.n	8003d06 <PCD_EP_ISR_Handler+0x286>
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	3b01      	subs	r3, #1
 8003d04:	633b      	str	r3, [r7, #48]	; 0x30
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	029b      	lsls	r3, r3, #10
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2c:	827b      	strh	r3, [r7, #18]
 8003d2e:	8a7b      	ldrh	r3, [r7, #18]
 8003d30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003d34:	827b      	strh	r3, [r7, #18]
 8003d36:	8a7b      	ldrh	r3, [r7, #18]
 8003d38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d3c:	827b      	strh	r3, [r7, #18]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	8a7b      	ldrh	r3, [r7, #18]
 8003d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	8013      	strh	r3, [r2, #0]
 8003d58:	e177      	b.n	800404a <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d6c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f280 80ea 	bge.w	8003f4a <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	461a      	mov	r2, r3
 8003d96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003da0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003da4:	b292      	uxth	r2, r2
 8003da6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003da8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	4413      	add	r3, r2
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	7b1b      	ldrb	r3, [r3, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d122      	bne.n	8003e0c <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	4413      	add	r3, r2
 8003dda:	3306      	adds	r3, #6
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dee:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003df0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 8087 	beq.w	8003f06 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	6959      	ldr	r1, [r3, #20]
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	88da      	ldrh	r2, [r3, #6]
 8003e04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e06:	f005 f8d9 	bl	8008fbc <USB_ReadPMA>
 8003e0a:	e07c      	b.n	8003f06 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	78db      	ldrb	r3, [r3, #3]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d108      	bne.n	8003e26 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003e14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e16:	461a      	mov	r2, r3
 8003e18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f923 	bl	8004066 <HAL_PCD_EP_DB_Receive>
 8003e20:	4603      	mov	r3, r0
 8003e22:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003e24:	e06f      	b.n	8003f06 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e40:	847b      	strh	r3, [r7, #34]	; 0x22
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	441a      	add	r2, r3
 8003e50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d021      	beq.n	8003ec4 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	4413      	add	r3, r2
 8003e94:	3302      	adds	r3, #2
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ea8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003eaa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d02a      	beq.n	8003f06 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	6959      	ldr	r1, [r3, #20]
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	891a      	ldrh	r2, [r3, #8]
 8003ebc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ebe:	f005 f87d 	bl	8008fbc <USB_ReadPMA>
 8003ec2:	e020      	b.n	8003f06 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	3306      	adds	r3, #6
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eec:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003eee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d008      	beq.n	8003f06 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	6959      	ldr	r1, [r3, #20]
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	895a      	ldrh	r2, [r3, #10]
 8003f00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f02:	f005 f85b 	bl	8008fbc <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	69da      	ldr	r2, [r3, #28]
 8003f0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f0c:	441a      	add	r2, r3
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	695a      	ldr	r2, [r3, #20]
 8003f16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f18:	441a      	add	r2, r3
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d004      	beq.n	8003f30 <PCD_EP_ISR_Handler+0x4b0>
 8003f26:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d206      	bcs.n	8003f3e <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	4619      	mov	r1, r3
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f006 fe4a 	bl	800abd0 <HAL_PCD_DataOutStageCallback>
 8003f3c:	e005      	b.n	8003f4a <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f44:	4618      	mov	r0, r3
 8003f46:	f003 fda6 	bl	8007a96 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003f4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d07a      	beq.n	800404a <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8003f54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	4413      	add	r3, r2
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f82:	843b      	strh	r3, [r7, #32]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	441a      	add	r2, r3
 8003f92:	8c3b      	ldrh	r3, [r7, #32]
 8003f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	78db      	ldrb	r3, [r3, #3]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d108      	bne.n	8003fba <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d146      	bne.n	800403e <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003fb0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d141      	bne.n	800403e <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	4413      	add	r3, r2
 8003fce:	3302      	adds	r3, #2
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6812      	ldr	r2, [r2, #0]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fe2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	699a      	ldr	r2, [r3, #24]
 8003fe8:	8bfb      	ldrh	r3, [r7, #30]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d906      	bls.n	8003ffc <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	8bfb      	ldrh	r3, [r7, #30]
 8003ff4:	1ad2      	subs	r2, r2, r3
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	619a      	str	r2, [r3, #24]
 8003ffa:	e002      	b.n	8004002 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	2200      	movs	r2, #0
 8004000:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d106      	bne.n	8004018 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	4619      	mov	r1, r3
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f006 fdf8 	bl	800ac06 <HAL_PCD_DataInStageCallback>
 8004016:	e018      	b.n	800404a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	695a      	ldr	r2, [r3, #20]
 800401c:	8bfb      	ldrh	r3, [r7, #30]
 800401e:	441a      	add	r2, r3
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	8bfb      	ldrh	r3, [r7, #30]
 800402a:	441a      	add	r2, r3
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004036:	4618      	mov	r0, r3
 8004038:	f003 fd2d 	bl	8007a96 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800403c:	e005      	b.n	800404a <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800403e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004040:	461a      	mov	r2, r3
 8004042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f91b 	bl	8004280 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004052:	b29b      	uxth	r3, r3
 8004054:	b21b      	sxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	f6ff ad17 	blt.w	8003a8a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3738      	adds	r7, #56	; 0x38
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b088      	sub	sp, #32
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	4613      	mov	r3, r2
 8004072:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d07e      	beq.n	800417c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004086:	b29b      	uxth	r3, r3
 8004088:	461a      	mov	r2, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4413      	add	r3, r2
 8004092:	3302      	adds	r3, #2
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	6812      	ldr	r2, [r2, #0]
 800409a:	4413      	add	r3, r2
 800409c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040a6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	699a      	ldr	r2, [r3, #24]
 80040ac:	8b7b      	ldrh	r3, [r7, #26]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d306      	bcc.n	80040c0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	699a      	ldr	r2, [r3, #24]
 80040b6:	8b7b      	ldrh	r3, [r7, #26]
 80040b8:	1ad2      	subs	r2, r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	619a      	str	r2, [r3, #24]
 80040be:	e002      	b.n	80040c6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2200      	movs	r2, #0
 80040c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d123      	bne.n	8004116 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e8:	833b      	strh	r3, [r7, #24]
 80040ea:	8b3b      	ldrh	r3, [r7, #24]
 80040ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040f0:	833b      	strh	r3, [r7, #24]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	441a      	add	r2, r3
 8004100:	8b3b      	ldrh	r3, [r7, #24]
 8004102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800410a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800410e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004112:	b29b      	uxth	r3, r3
 8004114:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01f      	beq.n	8004160 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	b29b      	uxth	r3, r3
 8004132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413a:	82fb      	strh	r3, [r7, #22]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	441a      	add	r2, r3
 800414a:	8afb      	ldrh	r3, [r7, #22]
 800414c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004158:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800415c:	b29b      	uxth	r3, r3
 800415e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004160:	8b7b      	ldrh	r3, [r7, #26]
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 8087 	beq.w	8004276 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6818      	ldr	r0, [r3, #0]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	6959      	ldr	r1, [r3, #20]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	891a      	ldrh	r2, [r3, #8]
 8004174:	8b7b      	ldrh	r3, [r7, #26]
 8004176:	f004 ff21 	bl	8008fbc <USB_ReadPMA>
 800417a:	e07c      	b.n	8004276 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004184:	b29b      	uxth	r3, r3
 8004186:	461a      	mov	r2, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	4413      	add	r3, r2
 8004190:	3306      	adds	r3, #6
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041a4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	8b7b      	ldrh	r3, [r7, #26]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d306      	bcc.n	80041be <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	699a      	ldr	r2, [r3, #24]
 80041b4:	8b7b      	ldrh	r3, [r7, #26]
 80041b6:	1ad2      	subs	r2, r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	619a      	str	r2, [r3, #24]
 80041bc:	e002      	b.n	80041c4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2200      	movs	r2, #0
 80041c2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d123      	bne.n	8004214 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	461a      	mov	r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e6:	83fb      	strh	r3, [r7, #30]
 80041e8:	8bfb      	ldrh	r3, [r7, #30]
 80041ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80041ee:	83fb      	strh	r3, [r7, #30]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	461a      	mov	r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	441a      	add	r2, r3
 80041fe:	8bfb      	ldrh	r3, [r7, #30]
 8004200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800420c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004210:	b29b      	uxth	r3, r3
 8004212:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004214:	88fb      	ldrh	r3, [r7, #6]
 8004216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d11f      	bne.n	800425e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	b29b      	uxth	r3, r3
 8004230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004238:	83bb      	strh	r3, [r7, #28]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	461a      	mov	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	441a      	add	r2, r3
 8004248:	8bbb      	ldrh	r3, [r7, #28]
 800424a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800424e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004256:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800425a:	b29b      	uxth	r3, r3
 800425c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800425e:	8b7b      	ldrh	r3, [r7, #26]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	6959      	ldr	r1, [r3, #20]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	895a      	ldrh	r2, [r3, #10]
 8004270:	8b7b      	ldrh	r3, [r7, #26]
 8004272:	f004 fea3 	bl	8008fbc <USB_ReadPMA>
    }
  }

  return count;
 8004276:	8b7b      	ldrh	r3, [r7, #26]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3720      	adds	r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b092      	sub	sp, #72	; 0x48
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	4613      	mov	r3, r2
 800428c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800428e:	88fb      	ldrh	r3, [r7, #6]
 8004290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8132 	beq.w	80044fe <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	461a      	mov	r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4413      	add	r3, r2
 80042ae:	3302      	adds	r3, #2
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042c2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d906      	bls.n	80042dc <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	699a      	ldr	r2, [r3, #24]
 80042d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80042d4:	1ad2      	subs	r2, r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	619a      	str	r2, [r3, #24]
 80042da:	e002      	b.n	80042e2 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2200      	movs	r2, #0
 80042e0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d12c      	bne.n	8004344 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	4619      	mov	r1, r3
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f006 fc88 	bl	800ac06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 822f 	beq.w	8004760 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431c:	827b      	strh	r3, [r7, #18]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	441a      	add	r2, r3
 800432c:	8a7b      	ldrh	r3, [r7, #18]
 800432e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004336:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800433a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800433e:	b29b      	uxth	r3, r3
 8004340:	8013      	strh	r3, [r2, #0]
 8004342:	e20d      	b.n	8004760 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004344:	88fb      	ldrh	r3, [r7, #6]
 8004346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d01f      	beq.n	800438e <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004368:	84bb      	strh	r3, [r7, #36]	; 0x24
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	441a      	add	r2, r3
 8004378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800437a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800437e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004382:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800438a:	b29b      	uxth	r3, r3
 800438c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004394:	2b01      	cmp	r3, #1
 8004396:	f040 81e3 	bne.w	8004760 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	695a      	ldr	r2, [r3, #20]
 800439e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80043a0:	441a      	add	r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	69da      	ldr	r2, [r3, #28]
 80043aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80043ac:	441a      	add	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	6a1a      	ldr	r2, [r3, #32]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d309      	bcc.n	80043d2 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	6a1a      	ldr	r2, [r3, #32]
 80043c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ca:	1ad2      	subs	r2, r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	621a      	str	r2, [r3, #32]
 80043d0:	e014      	b.n	80043fc <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 80043da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80043dc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80043e6:	e009      	b.n	80043fc <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2200      	movs	r2, #0
 80043fa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	785b      	ldrb	r3, [r3, #1]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d155      	bne.n	80044b0 <HAL_PCD_EP_DB_Transmit+0x230>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004412:	b29b      	uxth	r3, r3
 8004414:	461a      	mov	r2, r3
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	4413      	add	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	011a      	lsls	r2, r3, #4
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	4413      	add	r3, r2
 8004426:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442e:	2b00      	cmp	r3, #0
 8004430:	d112      	bne.n	8004458 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	b29b      	uxth	r3, r3
 8004438:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800443c:	b29a      	uxth	r2, r3
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	801a      	strh	r2, [r3, #0]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	b29b      	uxth	r3, r3
 8004448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800444c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004450:	b29a      	uxth	r2, r3
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	801a      	strh	r2, [r3, #0]
 8004456:	e047      	b.n	80044e8 <HAL_PCD_EP_DB_Transmit+0x268>
 8004458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445a:	2b3e      	cmp	r3, #62	; 0x3e
 800445c:	d811      	bhi.n	8004482 <HAL_PCD_EP_DB_Transmit+0x202>
 800445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004460:	085b      	lsrs	r3, r3, #1
 8004462:	62bb      	str	r3, [r7, #40]	; 0x28
 8004464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <HAL_PCD_EP_DB_Transmit+0x1f4>
 800446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004470:	3301      	adds	r3, #1
 8004472:	62bb      	str	r3, [r7, #40]	; 0x28
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	b29b      	uxth	r3, r3
 8004478:	029b      	lsls	r3, r3, #10
 800447a:	b29a      	uxth	r2, r3
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	801a      	strh	r2, [r3, #0]
 8004480:	e032      	b.n	80044e8 <HAL_PCD_EP_DB_Transmit+0x268>
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
 8004488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448a:	f003 031f 	and.w	r3, r3, #31
 800448e:	2b00      	cmp	r3, #0
 8004490:	d102      	bne.n	8004498 <HAL_PCD_EP_DB_Transmit+0x218>
 8004492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004494:	3b01      	subs	r3, #1
 8004496:	62bb      	str	r3, [r7, #40]	; 0x28
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	b29b      	uxth	r3, r3
 800449c:	029b      	lsls	r3, r3, #10
 800449e:	b29b      	uxth	r3, r3
 80044a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	801a      	strh	r2, [r3, #0]
 80044ae:	e01b      	b.n	80044e8 <HAL_PCD_EP_DB_Transmit+0x268>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	785b      	ldrb	r3, [r3, #1]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d117      	bne.n	80044e8 <HAL_PCD_EP_DB_Transmit+0x268>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	623b      	str	r3, [r7, #32]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	461a      	mov	r2, r3
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	4413      	add	r3, r2
 80044ce:	623b      	str	r3, [r7, #32]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	011a      	lsls	r2, r3, #4
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	4413      	add	r3, r2
 80044da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044de:	61fb      	str	r3, [r7, #28]
 80044e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	6959      	ldr	r1, [r3, #20]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	891a      	ldrh	r2, [r3, #8]
 80044f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	f004 fd1b 	bl	8008f32 <USB_WritePMA>
 80044fc:	e130      	b.n	8004760 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004506:	b29b      	uxth	r3, r3
 8004508:	461a      	mov	r2, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4413      	add	r3, r2
 8004512:	3306      	adds	r3, #6
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	6812      	ldr	r2, [r2, #0]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004526:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	699a      	ldr	r2, [r3, #24]
 800452c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800452e:	429a      	cmp	r2, r3
 8004530:	d306      	bcc.n	8004540 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004538:	1ad2      	subs	r2, r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	619a      	str	r2, [r3, #24]
 800453e:	e002      	b.n	8004546 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2200      	movs	r2, #0
 8004544:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d12c      	bne.n	80045a8 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	4619      	mov	r1, r3
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f006 fb56 	bl	800ac06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004560:	2b00      	cmp	r3, #0
 8004562:	f040 80fd 	bne.w	8004760 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004580:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	441a      	add	r2, r3
 8004590:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800459a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800459e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	8013      	strh	r3, [r2, #0]
 80045a6:	e0db      	b.n	8004760 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d11f      	bne.n	80045f2 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	441a      	add	r2, r3
 80045dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80045de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	f040 80b1 	bne.w	8004760 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	695a      	ldr	r2, [r3, #20]
 8004602:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004604:	441a      	add	r2, r3
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	69da      	ldr	r2, [r3, #28]
 800460e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004610:	441a      	add	r2, r3
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	6a1a      	ldr	r2, [r3, #32]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	429a      	cmp	r2, r3
 8004620:	d309      	bcc.n	8004636 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	6a1a      	ldr	r2, [r3, #32]
 800462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462e:	1ad2      	subs	r2, r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	621a      	str	r2, [r3, #32]
 8004634:	e014      	b.n	8004660 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 800463e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004640:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800464a:	e009      	b.n	8004660 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2200      	movs	r2, #0
 8004656:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	637b      	str	r3, [r7, #52]	; 0x34
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	785b      	ldrb	r3, [r3, #1]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d155      	bne.n	800471a <HAL_PCD_EP_DB_Transmit+0x49a>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	647b      	str	r3, [r7, #68]	; 0x44
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800467c:	b29b      	uxth	r3, r3
 800467e:	461a      	mov	r2, r3
 8004680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004682:	4413      	add	r3, r2
 8004684:	647b      	str	r3, [r7, #68]	; 0x44
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	011a      	lsls	r2, r3, #4
 800468c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800468e:	4413      	add	r3, r2
 8004690:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004694:	643b      	str	r3, [r7, #64]	; 0x40
 8004696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004698:	2b00      	cmp	r3, #0
 800469a:	d112      	bne.n	80046c2 <HAL_PCD_EP_DB_Transmit+0x442>
 800469c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046aa:	801a      	strh	r2, [r3, #0]
 80046ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046be:	801a      	strh	r2, [r3, #0]
 80046c0:	e044      	b.n	800474c <HAL_PCD_EP_DB_Transmit+0x4cc>
 80046c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c4:	2b3e      	cmp	r3, #62	; 0x3e
 80046c6:	d811      	bhi.n	80046ec <HAL_PCD_EP_DB_Transmit+0x46c>
 80046c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ca:	085b      	lsrs	r3, r3, #1
 80046cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <HAL_PCD_EP_DB_Transmit+0x45e>
 80046d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046da:	3301      	adds	r3, #1
 80046dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	029b      	lsls	r3, r3, #10
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e8:	801a      	strh	r2, [r3, #0]
 80046ea:	e02f      	b.n	800474c <HAL_PCD_EP_DB_Transmit+0x4cc>
 80046ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f4:	f003 031f 	and.w	r3, r3, #31
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d102      	bne.n	8004702 <HAL_PCD_EP_DB_Transmit+0x482>
 80046fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fe:	3b01      	subs	r3, #1
 8004700:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004704:	b29b      	uxth	r3, r3
 8004706:	029b      	lsls	r3, r3, #10
 8004708:	b29b      	uxth	r3, r3
 800470a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800470e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004712:	b29a      	uxth	r2, r3
 8004714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004716:	801a      	strh	r2, [r3, #0]
 8004718:	e018      	b.n	800474c <HAL_PCD_EP_DB_Transmit+0x4cc>
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	785b      	ldrb	r3, [r3, #1]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d114      	bne.n	800474c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800472a:	b29b      	uxth	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004730:	4413      	add	r3, r2
 8004732:	637b      	str	r3, [r7, #52]	; 0x34
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	011a      	lsls	r2, r3, #4
 800473a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473c:	4413      	add	r3, r2
 800473e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004742:	633b      	str	r3, [r7, #48]	; 0x30
 8004744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004746:	b29a      	uxth	r2, r3
 8004748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	6959      	ldr	r1, [r3, #20]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	895a      	ldrh	r2, [r3, #10]
 8004758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475a:	b29b      	uxth	r3, r3
 800475c:	f004 fbe9 	bl	8008f32 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	b29b      	uxth	r3, r3
 8004772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800477a:	823b      	strh	r3, [r7, #16]
 800477c:	8a3b      	ldrh	r3, [r7, #16]
 800477e:	f083 0310 	eor.w	r3, r3, #16
 8004782:	823b      	strh	r3, [r7, #16]
 8004784:	8a3b      	ldrh	r3, [r7, #16]
 8004786:	f083 0320 	eor.w	r3, r3, #32
 800478a:	823b      	strh	r3, [r7, #16]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	461a      	mov	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	441a      	add	r2, r3
 800479a:	8a3b      	ldrh	r3, [r7, #16]
 800479c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3748      	adds	r7, #72	; 0x48
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b087      	sub	sp, #28
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	607b      	str	r3, [r7, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	817b      	strh	r3, [r7, #10]
 80047c8:	4613      	mov	r3, r2
 80047ca:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80047cc:	897b      	ldrh	r3, [r7, #10]
 80047ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00b      	beq.n	80047f0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047d8:	897b      	ldrh	r3, [r7, #10]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	4613      	mov	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	e009      	b.n	8004804 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80047f0:	897a      	ldrh	r2, [r7, #10]
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4413      	add	r3, r2
 8004802:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004804:	893b      	ldrh	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d107      	bne.n	800481a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2200      	movs	r2, #0
 800480e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	b29a      	uxth	r2, r3
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	80da      	strh	r2, [r3, #6]
 8004818:	e00b      	b.n	8004832 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2201      	movs	r2, #1
 800481e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	b29a      	uxth	r2, r3
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	0c1b      	lsrs	r3, r3, #16
 800482c:	b29a      	uxth	r2, r3
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	371c      	adds	r7, #28
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004846:	af00      	add	r7, sp, #0
 8004848:	1d3b      	adds	r3, r7, #4
 800484a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800484c:	1d3b      	adds	r3, r7, #4
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d102      	bne.n	800485a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	f000 bff7 	b.w	8005848 <HAL_RCC_OscConfig+0x1008>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800485a:	1d3b      	adds	r3, r7, #4
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d020      	beq.n	80048a6 <HAL_RCC_OscConfig+0x66>
 8004864:	1d3b      	adds	r3, r7, #4
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d119      	bne.n	80048a6 <HAL_RCC_OscConfig+0x66>
 8004872:	1d3b      	adds	r3, r7, #4
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d112      	bne.n	80048a6 <HAL_RCC_OscConfig+0x66>
 8004880:	1d3b      	adds	r3, r7, #4
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10b      	bne.n	80048a6 <HAL_RCC_OscConfig+0x66>
 800488e:	1d3b      	adds	r3, r7, #4
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d104      	bne.n	80048a6 <HAL_RCC_OscConfig+0x66>
 800489c:	f240 114b 	movw	r1, #331	; 0x14b
 80048a0:	48c3      	ldr	r0, [pc, #780]	; (8004bb0 <HAL_RCC_OscConfig+0x370>)
 80048a2:	f7fc fcea 	bl	800127a <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048a6:	1d3b      	adds	r3, r7, #4
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 8182 	beq.w	8004bba <HAL_RCC_OscConfig+0x37a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80048b6:	1d3b      	adds	r3, r7, #4
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d010      	beq.n	80048e2 <HAL_RCC_OscConfig+0xa2>
 80048c0:	1d3b      	adds	r3, r7, #4
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCC_OscConfig+0xa2>
 80048cc:	1d3b      	adds	r3, r7, #4
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048d6:	d004      	beq.n	80048e2 <HAL_RCC_OscConfig+0xa2>
 80048d8:	f240 1151 	movw	r1, #337	; 0x151
 80048dc:	48b4      	ldr	r0, [pc, #720]	; (8004bb0 <HAL_RCC_OscConfig+0x370>)
 80048de:	f7fc fccc 	bl	800127a <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80048e2:	4bb4      	ldr	r3, [pc, #720]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f003 030c 	and.w	r3, r3, #12
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d00c      	beq.n	8004908 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048ee:	4bb1      	ldr	r3, [pc, #708]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f003 030c 	and.w	r3, r3, #12
 80048f6:	2b08      	cmp	r3, #8
 80048f8:	d159      	bne.n	80049ae <HAL_RCC_OscConfig+0x16e>
 80048fa:	4bae      	ldr	r3, [pc, #696]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004906:	d152      	bne.n	80049ae <HAL_RCC_OscConfig+0x16e>
 8004908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800490c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004910:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004914:	fa93 f3a3 	rbit	r3, r3
 8004918:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800491c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004920:	fab3 f383 	clz	r3, r3
 8004924:	b2db      	uxtb	r3, r3
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	b2db      	uxtb	r3, r3
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	d102      	bne.n	800493a <HAL_RCC_OscConfig+0xfa>
 8004934:	4b9f      	ldr	r3, [pc, #636]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	e015      	b.n	8004966 <HAL_RCC_OscConfig+0x126>
 800493a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800493e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004942:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004946:	fa93 f3a3 	rbit	r3, r3
 800494a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800494e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004952:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004956:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800495a:	fa93 f3a3 	rbit	r3, r3
 800495e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004962:	4b94      	ldr	r3, [pc, #592]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800496a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800496e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004972:	fa92 f2a2 	rbit	r2, r2
 8004976:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800497a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800497e:	fab2 f282 	clz	r2, r2
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	f042 0220 	orr.w	r2, r2, #32
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	f002 021f 	and.w	r2, r2, #31
 800498e:	2101      	movs	r1, #1
 8004990:	fa01 f202 	lsl.w	r2, r1, r2
 8004994:	4013      	ands	r3, r2
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 810e 	beq.w	8004bb8 <HAL_RCC_OscConfig+0x378>
 800499c:	1d3b      	adds	r3, r7, #4
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f040 8108 	bne.w	8004bb8 <HAL_RCC_OscConfig+0x378>
      {
        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	f000 bf4d 	b.w	8005848 <HAL_RCC_OscConfig+0x1008>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ae:	1d3b      	adds	r3, r7, #4
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b8:	d106      	bne.n	80049c8 <HAL_RCC_OscConfig+0x188>
 80049ba:	4b7e      	ldr	r3, [pc, #504]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a7d      	ldr	r2, [pc, #500]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 80049c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e030      	b.n	8004a2a <HAL_RCC_OscConfig+0x1ea>
 80049c8:	1d3b      	adds	r3, r7, #4
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10c      	bne.n	80049ec <HAL_RCC_OscConfig+0x1ac>
 80049d2:	4b78      	ldr	r3, [pc, #480]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a77      	ldr	r2, [pc, #476]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 80049d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	4b75      	ldr	r3, [pc, #468]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a74      	ldr	r2, [pc, #464]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 80049e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	e01e      	b.n	8004a2a <HAL_RCC_OscConfig+0x1ea>
 80049ec:	1d3b      	adds	r3, r7, #4
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049f6:	d10c      	bne.n	8004a12 <HAL_RCC_OscConfig+0x1d2>
 80049f8:	4b6e      	ldr	r3, [pc, #440]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a6d      	ldr	r2, [pc, #436]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 80049fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	4b6b      	ldr	r3, [pc, #428]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a6a      	ldr	r2, [pc, #424]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 8004a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	e00b      	b.n	8004a2a <HAL_RCC_OscConfig+0x1ea>
 8004a12:	4b68      	ldr	r3, [pc, #416]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a67      	ldr	r2, [pc, #412]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 8004a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	4b65      	ldr	r3, [pc, #404]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a64      	ldr	r2, [pc, #400]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 8004a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a28:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a2a:	4b62      	ldr	r3, [pc, #392]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2e:	f023 020f 	bic.w	r2, r3, #15
 8004a32:	1d3b      	adds	r3, r7, #4
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	495e      	ldr	r1, [pc, #376]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a3e:	1d3b      	adds	r3, r7, #4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d059      	beq.n	8004afc <HAL_RCC_OscConfig+0x2bc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a48:	f7fd f83a 	bl	8001ac0 <HAL_GetTick>
 8004a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a50:	e00a      	b.n	8004a68 <HAL_RCC_OscConfig+0x228>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a52:	f7fd f835 	bl	8001ac0 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b64      	cmp	r3, #100	; 0x64
 8004a60:	d902      	bls.n	8004a68 <HAL_RCC_OscConfig+0x228>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	f000 bef0 	b.w	8005848 <HAL_RCC_OscConfig+0x1008>
 8004a68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a6c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a70:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004a74:	fa93 f3a3 	rbit	r3, r3
 8004a78:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004a7c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a80:	fab3 f383 	clz	r3, r3
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	f043 0301 	orr.w	r3, r3, #1
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d102      	bne.n	8004a9a <HAL_RCC_OscConfig+0x25a>
 8004a94:	4b47      	ldr	r3, [pc, #284]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	e015      	b.n	8004ac6 <HAL_RCC_OscConfig+0x286>
 8004a9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a9e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004aa6:	fa93 f3a3 	rbit	r3, r3
 8004aaa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004aae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ab2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004ab6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004aba:	fa93 f3a3 	rbit	r3, r3
 8004abe:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004ac2:	4b3c      	ldr	r3, [pc, #240]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004aca:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004ace:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004ad2:	fa92 f2a2 	rbit	r2, r2
 8004ad6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004ada:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004ade:	fab2 f282 	clz	r2, r2
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	f042 0220 	orr.w	r2, r2, #32
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	f002 021f 	and.w	r2, r2, #31
 8004aee:	2101      	movs	r1, #1
 8004af0:	fa01 f202 	lsl.w	r2, r1, r2
 8004af4:	4013      	ands	r3, r2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0ab      	beq.n	8004a52 <HAL_RCC_OscConfig+0x212>
 8004afa:	e05e      	b.n	8004bba <HAL_RCC_OscConfig+0x37a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afc:	f7fc ffe0 	bl	8001ac0 <HAL_GetTick>
 8004b00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b04:	e00a      	b.n	8004b1c <HAL_RCC_OscConfig+0x2dc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b06:	f7fc ffdb 	bl	8001ac0 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	; 0x64
 8004b14:	d902      	bls.n	8004b1c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	f000 be96 	b.w	8005848 <HAL_RCC_OscConfig+0x1008>
 8004b1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b20:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b24:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004b28:	fa93 f3a3 	rbit	r3, r3
 8004b2c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004b30:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b34:	fab3 f383 	clz	r3, r3
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	f043 0301 	orr.w	r3, r3, #1
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d102      	bne.n	8004b4e <HAL_RCC_OscConfig+0x30e>
 8004b48:	4b1a      	ldr	r3, [pc, #104]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	e015      	b.n	8004b7a <HAL_RCC_OscConfig+0x33a>
 8004b4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b52:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b56:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004b5a:	fa93 f3a3 	rbit	r3, r3
 8004b5e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004b62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b66:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004b6a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004b6e:	fa93 f3a3 	rbit	r3, r3
 8004b72:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004b76:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <HAL_RCC_OscConfig+0x374>)
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b7e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004b82:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004b86:	fa92 f2a2 	rbit	r2, r2
 8004b8a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004b8e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004b92:	fab2 f282 	clz	r2, r2
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	f042 0220 	orr.w	r2, r2, #32
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	f002 021f 	and.w	r2, r2, #31
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1ab      	bne.n	8004b06 <HAL_RCC_OscConfig+0x2c6>
 8004bae:	e004      	b.n	8004bba <HAL_RCC_OscConfig+0x37a>
 8004bb0:	0800ba94 	.word	0x0800ba94
 8004bb4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bba:	1d3b      	adds	r3, r7, #4
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 818c 	beq.w	8004ee2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004bca:	1d3b      	adds	r3, r7, #4
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d009      	beq.n	8004be8 <HAL_RCC_OscConfig+0x3a8>
 8004bd4:	1d3b      	adds	r3, r7, #4
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d004      	beq.n	8004be8 <HAL_RCC_OscConfig+0x3a8>
 8004bde:	f240 1189 	movw	r1, #393	; 0x189
 8004be2:	48a7      	ldr	r0, [pc, #668]	; (8004e80 <HAL_RCC_OscConfig+0x640>)
 8004be4:	f7fc fb49 	bl	800127a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004be8:	1d3b      	adds	r3, r7, #4
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	2b1f      	cmp	r3, #31
 8004bf0:	d904      	bls.n	8004bfc <HAL_RCC_OscConfig+0x3bc>
 8004bf2:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004bf6:	48a2      	ldr	r0, [pc, #648]	; (8004e80 <HAL_RCC_OscConfig+0x640>)
 8004bf8:	f7fc fb3f 	bl	800127a <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004bfc:	4ba1      	ldr	r3, [pc, #644]	; (8004e84 <HAL_RCC_OscConfig+0x644>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 030c 	and.w	r3, r3, #12
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00b      	beq.n	8004c20 <HAL_RCC_OscConfig+0x3e0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c08:	4b9e      	ldr	r3, [pc, #632]	; (8004e84 <HAL_RCC_OscConfig+0x644>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 030c 	and.w	r3, r3, #12
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d16c      	bne.n	8004cee <HAL_RCC_OscConfig+0x4ae>
 8004c14:	4b9b      	ldr	r3, [pc, #620]	; (8004e84 <HAL_RCC_OscConfig+0x644>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d166      	bne.n	8004cee <HAL_RCC_OscConfig+0x4ae>
 8004c20:	2302      	movs	r3, #2
 8004c22:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c26:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004c2a:	fa93 f3a3 	rbit	r3, r3
 8004c2e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004c32:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c36:	fab3 f383 	clz	r3, r3
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	f043 0301 	orr.w	r3, r3, #1
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d102      	bne.n	8004c50 <HAL_RCC_OscConfig+0x410>
 8004c4a:	4b8e      	ldr	r3, [pc, #568]	; (8004e84 <HAL_RCC_OscConfig+0x644>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	e013      	b.n	8004c78 <HAL_RCC_OscConfig+0x438>
 8004c50:	2302      	movs	r3, #2
 8004c52:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c56:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004c5a:	fa93 f3a3 	rbit	r3, r3
 8004c5e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004c62:	2302      	movs	r3, #2
 8004c64:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004c68:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004c6c:	fa93 f3a3 	rbit	r3, r3
 8004c70:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004c74:	4b83      	ldr	r3, [pc, #524]	; (8004e84 <HAL_RCC_OscConfig+0x644>)
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	2202      	movs	r2, #2
 8004c7a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004c7e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004c82:	fa92 f2a2 	rbit	r2, r2
 8004c86:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004c8a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004c8e:	fab2 f282 	clz	r2, r2
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	f042 0220 	orr.w	r2, r2, #32
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	f002 021f 	and.w	r2, r2, #31
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d007      	beq.n	8004cba <HAL_RCC_OscConfig+0x47a>
 8004caa:	1d3b      	adds	r3, r7, #4
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d002      	beq.n	8004cba <HAL_RCC_OscConfig+0x47a>
      {
        return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f000 bdc7 	b.w	8005848 <HAL_RCC_OscConfig+0x1008>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cba:	4b72      	ldr	r3, [pc, #456]	; (8004e84 <HAL_RCC_OscConfig+0x644>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cc2:	1d3b      	adds	r3, r7, #4
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	21f8      	movs	r1, #248	; 0xf8
 8004cca:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cce:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004cd2:	fa91 f1a1 	rbit	r1, r1
 8004cd6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004cda:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004cde:	fab1 f181 	clz	r1, r1
 8004ce2:	b2c9      	uxtb	r1, r1
 8004ce4:	408b      	lsls	r3, r1
 8004ce6:	4967      	ldr	r1, [pc, #412]	; (8004e84 <HAL_RCC_OscConfig+0x644>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cec:	e0f9      	b.n	8004ee2 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cee:	1d3b      	adds	r3, r7, #4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 8085 	beq.w	8004e04 <HAL_RCC_OscConfig+0x5c4>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d00:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004d04:	fa93 f3a3 	rbit	r3, r3
 8004d08:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004d0c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d10:	fab3 f383 	clz	r3, r3
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	461a      	mov	r2, r3
 8004d22:	2301      	movs	r3, #1
 8004d24:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d26:	f7fc fecb 	bl	8001ac0 <HAL_GetTick>
 8004d2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2e:	e00a      	b.n	8004d46 <HAL_RCC_OscConfig+0x506>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d30:	f7fc fec6 	bl	8001ac0 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d902      	bls.n	8004d46 <HAL_RCC_OscConfig+0x506>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	f000 bd81 	b.w	8005848 <HAL_RCC_OscConfig+0x1008>
 8004d46:	2302      	movs	r3, #2
 8004d48:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004d50:	fa93 f3a3 	rbit	r3, r3
 8004d54:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004d58:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d5c:	fab3 f383 	clz	r3, r3
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d102      	bne.n	8004d76 <HAL_RCC_OscConfig+0x536>
 8004d70:	4b44      	ldr	r3, [pc, #272]	; (8004e84 <HAL_RCC_OscConfig+0x644>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	e013      	b.n	8004d9e <HAL_RCC_OscConfig+0x55e>
 8004d76:	2302      	movs	r3, #2
 8004d78:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004d80:	fa93 f3a3 	rbit	r3, r3
 8004d84:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004d88:	2302      	movs	r3, #2
 8004d8a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004d8e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004d92:	fa93 f3a3 	rbit	r3, r3
 8004d96:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004d9a:	4b3a      	ldr	r3, [pc, #232]	; (8004e84 <HAL_RCC_OscConfig+0x644>)
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004da4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004da8:	fa92 f2a2 	rbit	r2, r2
 8004dac:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004db0:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004db4:	fab2 f282 	clz	r2, r2
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	f042 0220 	orr.w	r2, r2, #32
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	f002 021f 	and.w	r2, r2, #31
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0af      	beq.n	8004d30 <HAL_RCC_OscConfig+0x4f0>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd0:	4b2c      	ldr	r3, [pc, #176]	; (8004e84 <HAL_RCC_OscConfig+0x644>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dd8:	1d3b      	adds	r3, r7, #4
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	21f8      	movs	r1, #248	; 0xf8
 8004de0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004de8:	fa91 f1a1 	rbit	r1, r1
 8004dec:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004df0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004df4:	fab1 f181 	clz	r1, r1
 8004df8:	b2c9      	uxtb	r1, r1
 8004dfa:	408b      	lsls	r3, r1
 8004dfc:	4921      	ldr	r1, [pc, #132]	; (8004e84 <HAL_RCC_OscConfig+0x644>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	600b      	str	r3, [r1, #0]
 8004e02:	e06e      	b.n	8004ee2 <HAL_RCC_OscConfig+0x6a2>
 8004e04:	2301      	movs	r3, #1
 8004e06:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004e0e:	fa93 f3a3 	rbit	r3, r3
 8004e12:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004e16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e1a:	fab3 f383 	clz	r3, r3
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e30:	f7fc fe46 	bl	8001ac0 <HAL_GetTick>
 8004e34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e38:	e00a      	b.n	8004e50 <HAL_RCC_OscConfig+0x610>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e3a:	f7fc fe41 	bl	8001ac0 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d902      	bls.n	8004e50 <HAL_RCC_OscConfig+0x610>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	f000 bcfc 	b.w	8005848 <HAL_RCC_OscConfig+0x1008>
 8004e50:	2302      	movs	r3, #2
 8004e52:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e56:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004e5a:	fa93 f3a3 	rbit	r3, r3
 8004e5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e66:	fab3 f383 	clz	r3, r3
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	095b      	lsrs	r3, r3, #5
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d106      	bne.n	8004e88 <HAL_RCC_OscConfig+0x648>
 8004e7a:	4b02      	ldr	r3, [pc, #8]	; (8004e84 <HAL_RCC_OscConfig+0x644>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	e017      	b.n	8004eb0 <HAL_RCC_OscConfig+0x670>
 8004e80:	0800ba94 	.word	0x0800ba94
 8004e84:	40021000 	.word	0x40021000
 8004e88:	2302      	movs	r3, #2
 8004e8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e92:	fa93 f3a3 	rbit	r3, r3
 8004e96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004ea0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ea4:	fa93 f3a3 	rbit	r3, r3
 8004ea8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004eac:	4bbf      	ldr	r3, [pc, #764]	; (80051ac <HAL_RCC_OscConfig+0x96c>)
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004eb6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004eba:	fa92 f2a2 	rbit	r2, r2
 8004ebe:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004ec2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004ec6:	fab2 f282 	clz	r2, r2
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	f042 0220 	orr.w	r2, r2, #32
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	f002 021f 	and.w	r2, r2, #31
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1ab      	bne.n	8004e3a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ee2:	1d3b      	adds	r3, r7, #4
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 80e6 	beq.w	80050be <HAL_RCC_OscConfig+0x87e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004ef2:	1d3b      	adds	r3, r7, #4
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d009      	beq.n	8004f10 <HAL_RCC_OscConfig+0x6d0>
 8004efc:	1d3b      	adds	r3, r7, #4
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d004      	beq.n	8004f10 <HAL_RCC_OscConfig+0x6d0>
 8004f06:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8004f0a:	48a9      	ldr	r0, [pc, #676]	; (80051b0 <HAL_RCC_OscConfig+0x970>)
 8004f0c:	f7fc f9b5 	bl	800127a <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f10:	1d3b      	adds	r3, r7, #4
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d065      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x7a6>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f20:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f24:	fa93 f3a3 	rbit	r3, r3
 8004f28:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f30:	fab3 f383 	clz	r3, r3
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	461a      	mov	r2, r3
 8004f38:	4b9e      	ldr	r3, [pc, #632]	; (80051b4 <HAL_RCC_OscConfig+0x974>)
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	461a      	mov	r2, r3
 8004f40:	2301      	movs	r3, #1
 8004f42:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f44:	f7fc fdbc 	bl	8001ac0 <HAL_GetTick>
 8004f48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f4c:	e00a      	b.n	8004f64 <HAL_RCC_OscConfig+0x724>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f4e:	f7fc fdb7 	bl	8001ac0 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d902      	bls.n	8004f64 <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	f000 bc72 	b.w	8005848 <HAL_RCC_OscConfig+0x1008>
 8004f64:	2302      	movs	r3, #2
 8004f66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f6e:	fa93 f3a3 	rbit	r3, r3
 8004f72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f76:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	fa93 f2a3 	rbit	r2, r3
 8004f88:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004f92:	2202      	movs	r2, #2
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	fa93 f2a3 	rbit	r2, r3
 8004fa0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004fa4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fa6:	4b81      	ldr	r3, [pc, #516]	; (80051ac <HAL_RCC_OscConfig+0x96c>)
 8004fa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004faa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004fae:	2102      	movs	r1, #2
 8004fb0:	6019      	str	r1, [r3, #0]
 8004fb2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	fa93 f1a3 	rbit	r1, r3
 8004fbc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004fc0:	6019      	str	r1, [r3, #0]
  return result;
 8004fc2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	fab3 f383 	clz	r3, r3
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	2101      	movs	r1, #1
 8004fda:	fa01 f303 	lsl.w	r3, r1, r3
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0b4      	beq.n	8004f4e <HAL_RCC_OscConfig+0x70e>
 8004fe4:	e06b      	b.n	80050be <HAL_RCC_OscConfig+0x87e>
 8004fe6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004fea:	2201      	movs	r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	fa93 f2a3 	rbit	r2, r3
 8004ff8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004ffc:	601a      	str	r2, [r3, #0]
  return result;
 8004ffe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005002:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005004:	fab3 f383 	clz	r3, r3
 8005008:	b2db      	uxtb	r3, r3
 800500a:	461a      	mov	r2, r3
 800500c:	4b69      	ldr	r3, [pc, #420]	; (80051b4 <HAL_RCC_OscConfig+0x974>)
 800500e:	4413      	add	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	461a      	mov	r2, r3
 8005014:	2300      	movs	r3, #0
 8005016:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005018:	f7fc fd52 	bl	8001ac0 <HAL_GetTick>
 800501c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005020:	e00a      	b.n	8005038 <HAL_RCC_OscConfig+0x7f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005022:	f7fc fd4d 	bl	8001ac0 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d902      	bls.n	8005038 <HAL_RCC_OscConfig+0x7f8>
        {
          return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	f000 bc08 	b.w	8005848 <HAL_RCC_OscConfig+0x1008>
 8005038:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800503c:	2202      	movs	r2, #2
 800503e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005040:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	fa93 f2a3 	rbit	r2, r3
 800504a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005054:	2202      	movs	r2, #2
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	fa93 f2a3 	rbit	r2, r3
 8005062:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800506c:	2202      	movs	r2, #2
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	fa93 f2a3 	rbit	r2, r3
 800507a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800507e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005080:	4b4a      	ldr	r3, [pc, #296]	; (80051ac <HAL_RCC_OscConfig+0x96c>)
 8005082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005084:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005088:	2102      	movs	r1, #2
 800508a:	6019      	str	r1, [r3, #0]
 800508c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	fa93 f1a3 	rbit	r1, r3
 8005096:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800509a:	6019      	str	r1, [r3, #0]
  return result;
 800509c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	fab3 f383 	clz	r3, r3
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	f003 031f 	and.w	r3, r3, #31
 80050b2:	2101      	movs	r1, #1
 80050b4:	fa01 f303 	lsl.w	r3, r1, r3
 80050b8:	4013      	ands	r3, r2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1b1      	bne.n	8005022 <HAL_RCC_OscConfig+0x7e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050be:	1d3b      	adds	r3, r7, #4
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 8170 	beq.w	80053ae <HAL_RCC_OscConfig+0xb6e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ce:	2300      	movs	r3, #0
 80050d0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80050d4:	1d3b      	adds	r3, r7, #4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00e      	beq.n	80050fc <HAL_RCC_OscConfig+0x8bc>
 80050de:	1d3b      	adds	r3, r7, #4
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d009      	beq.n	80050fc <HAL_RCC_OscConfig+0x8bc>
 80050e8:	1d3b      	adds	r3, r7, #4
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	2b05      	cmp	r3, #5
 80050f0:	d004      	beq.n	80050fc <HAL_RCC_OscConfig+0x8bc>
 80050f2:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80050f6:	482e      	ldr	r0, [pc, #184]	; (80051b0 <HAL_RCC_OscConfig+0x970>)
 80050f8:	f7fc f8bf 	bl	800127a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050fc:	4b2b      	ldr	r3, [pc, #172]	; (80051ac <HAL_RCC_OscConfig+0x96c>)
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d112      	bne.n	800512e <HAL_RCC_OscConfig+0x8ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005108:	4b28      	ldr	r3, [pc, #160]	; (80051ac <HAL_RCC_OscConfig+0x96c>)
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	4a27      	ldr	r2, [pc, #156]	; (80051ac <HAL_RCC_OscConfig+0x96c>)
 800510e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005112:	61d3      	str	r3, [r2, #28]
 8005114:	4b25      	ldr	r3, [pc, #148]	; (80051ac <HAL_RCC_OscConfig+0x96c>)
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800511c:	f107 0308 	add.w	r3, r7, #8
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	f107 0308 	add.w	r3, r7, #8
 8005126:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005128:	2301      	movs	r3, #1
 800512a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512e:	4b22      	ldr	r3, [pc, #136]	; (80051b8 <HAL_RCC_OscConfig+0x978>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005136:	2b00      	cmp	r3, #0
 8005138:	d11a      	bne.n	8005170 <HAL_RCC_OscConfig+0x930>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800513a:	4b1f      	ldr	r3, [pc, #124]	; (80051b8 <HAL_RCC_OscConfig+0x978>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a1e      	ldr	r2, [pc, #120]	; (80051b8 <HAL_RCC_OscConfig+0x978>)
 8005140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005144:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005146:	f7fc fcbb 	bl	8001ac0 <HAL_GetTick>
 800514a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514e:	e009      	b.n	8005164 <HAL_RCC_OscConfig+0x924>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005150:	f7fc fcb6 	bl	8001ac0 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b64      	cmp	r3, #100	; 0x64
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x924>
        {
          return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e371      	b.n	8005848 <HAL_RCC_OscConfig+0x1008>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005164:	4b14      	ldr	r3, [pc, #80]	; (80051b8 <HAL_RCC_OscConfig+0x978>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0ef      	beq.n	8005150 <HAL_RCC_OscConfig+0x910>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005170:	1d3b      	adds	r3, r7, #4
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d106      	bne.n	8005188 <HAL_RCC_OscConfig+0x948>
 800517a:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <HAL_RCC_OscConfig+0x96c>)
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	4a0b      	ldr	r2, [pc, #44]	; (80051ac <HAL_RCC_OscConfig+0x96c>)
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	6213      	str	r3, [r2, #32]
 8005186:	e037      	b.n	80051f8 <HAL_RCC_OscConfig+0x9b8>
 8005188:	1d3b      	adds	r3, r7, #4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d114      	bne.n	80051bc <HAL_RCC_OscConfig+0x97c>
 8005192:	4b06      	ldr	r3, [pc, #24]	; (80051ac <HAL_RCC_OscConfig+0x96c>)
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	4a05      	ldr	r2, [pc, #20]	; (80051ac <HAL_RCC_OscConfig+0x96c>)
 8005198:	f023 0301 	bic.w	r3, r3, #1
 800519c:	6213      	str	r3, [r2, #32]
 800519e:	4b03      	ldr	r3, [pc, #12]	; (80051ac <HAL_RCC_OscConfig+0x96c>)
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	4a02      	ldr	r2, [pc, #8]	; (80051ac <HAL_RCC_OscConfig+0x96c>)
 80051a4:	f023 0304 	bic.w	r3, r3, #4
 80051a8:	6213      	str	r3, [r2, #32]
 80051aa:	e025      	b.n	80051f8 <HAL_RCC_OscConfig+0x9b8>
 80051ac:	40021000 	.word	0x40021000
 80051b0:	0800ba94 	.word	0x0800ba94
 80051b4:	10908120 	.word	0x10908120
 80051b8:	40007000 	.word	0x40007000
 80051bc:	1d3b      	adds	r3, r7, #4
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	2b05      	cmp	r3, #5
 80051c4:	d10c      	bne.n	80051e0 <HAL_RCC_OscConfig+0x9a0>
 80051c6:	4b5e      	ldr	r3, [pc, #376]	; (8005340 <HAL_RCC_OscConfig+0xb00>)
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	4a5d      	ldr	r2, [pc, #372]	; (8005340 <HAL_RCC_OscConfig+0xb00>)
 80051cc:	f043 0304 	orr.w	r3, r3, #4
 80051d0:	6213      	str	r3, [r2, #32]
 80051d2:	4b5b      	ldr	r3, [pc, #364]	; (8005340 <HAL_RCC_OscConfig+0xb00>)
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	4a5a      	ldr	r2, [pc, #360]	; (8005340 <HAL_RCC_OscConfig+0xb00>)
 80051d8:	f043 0301 	orr.w	r3, r3, #1
 80051dc:	6213      	str	r3, [r2, #32]
 80051de:	e00b      	b.n	80051f8 <HAL_RCC_OscConfig+0x9b8>
 80051e0:	4b57      	ldr	r3, [pc, #348]	; (8005340 <HAL_RCC_OscConfig+0xb00>)
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	4a56      	ldr	r2, [pc, #344]	; (8005340 <HAL_RCC_OscConfig+0xb00>)
 80051e6:	f023 0301 	bic.w	r3, r3, #1
 80051ea:	6213      	str	r3, [r2, #32]
 80051ec:	4b54      	ldr	r3, [pc, #336]	; (8005340 <HAL_RCC_OscConfig+0xb00>)
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	4a53      	ldr	r2, [pc, #332]	; (8005340 <HAL_RCC_OscConfig+0xb00>)
 80051f2:	f023 0304 	bic.w	r3, r3, #4
 80051f6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051f8:	1d3b      	adds	r3, r7, #4
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d064      	beq.n	80052cc <HAL_RCC_OscConfig+0xa8c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005202:	f7fc fc5d 	bl	8001ac0 <HAL_GetTick>
 8005206:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520a:	e00b      	b.n	8005224 <HAL_RCC_OscConfig+0x9e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800520c:	f7fc fc58 	bl	8001ac0 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	f241 3288 	movw	r2, #5000	; 0x1388
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x9e4>
        {
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e311      	b.n	8005848 <HAL_RCC_OscConfig+0x1008>
 8005224:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005228:	2202      	movs	r2, #2
 800522a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	fa93 f2a3 	rbit	r2, r3
 8005236:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005240:	2202      	movs	r2, #2
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	fa93 f2a3 	rbit	r2, r3
 800524e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005252:	601a      	str	r2, [r3, #0]
  return result;
 8005254:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005258:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800525a:	fab3 f383 	clz	r3, r3
 800525e:	b2db      	uxtb	r3, r3
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	b2db      	uxtb	r3, r3
 8005264:	f043 0302 	orr.w	r3, r3, #2
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d102      	bne.n	8005274 <HAL_RCC_OscConfig+0xa34>
 800526e:	4b34      	ldr	r3, [pc, #208]	; (8005340 <HAL_RCC_OscConfig+0xb00>)
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	e00d      	b.n	8005290 <HAL_RCC_OscConfig+0xa50>
 8005274:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005278:	2202      	movs	r2, #2
 800527a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	fa93 f2a3 	rbit	r2, r3
 8005286:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	4b2c      	ldr	r3, [pc, #176]	; (8005340 <HAL_RCC_OscConfig+0xb00>)
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005294:	2102      	movs	r1, #2
 8005296:	6011      	str	r1, [r2, #0]
 8005298:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800529c:	6812      	ldr	r2, [r2, #0]
 800529e:	fa92 f1a2 	rbit	r1, r2
 80052a2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80052a6:	6011      	str	r1, [r2, #0]
  return result;
 80052a8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80052ac:	6812      	ldr	r2, [r2, #0]
 80052ae:	fab2 f282 	clz	r2, r2
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	f002 021f 	and.w	r2, r2, #31
 80052be:	2101      	movs	r1, #1
 80052c0:	fa01 f202 	lsl.w	r2, r1, r2
 80052c4:	4013      	ands	r3, r2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0a0      	beq.n	800520c <HAL_RCC_OscConfig+0x9cc>
 80052ca:	e066      	b.n	800539a <HAL_RCC_OscConfig+0xb5a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052cc:	f7fc fbf8 	bl	8001ac0 <HAL_GetTick>
 80052d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052d4:	e00b      	b.n	80052ee <HAL_RCC_OscConfig+0xaae>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052d6:	f7fc fbf3 	bl	8001ac0 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0xaae>
        {
          return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e2ac      	b.n	8005848 <HAL_RCC_OscConfig+0x1008>
 80052ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80052f2:	2202      	movs	r2, #2
 80052f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	fa93 f2a3 	rbit	r2, r3
 8005300:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800530a:	2202      	movs	r2, #2
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	fa93 f2a3 	rbit	r2, r3
 8005318:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800531c:	601a      	str	r2, [r3, #0]
  return result;
 800531e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005322:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005324:	fab3 f383 	clz	r3, r3
 8005328:	b2db      	uxtb	r3, r3
 800532a:	095b      	lsrs	r3, r3, #5
 800532c:	b2db      	uxtb	r3, r3
 800532e:	f043 0302 	orr.w	r3, r3, #2
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d105      	bne.n	8005344 <HAL_RCC_OscConfig+0xb04>
 8005338:	4b01      	ldr	r3, [pc, #4]	; (8005340 <HAL_RCC_OscConfig+0xb00>)
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	e010      	b.n	8005360 <HAL_RCC_OscConfig+0xb20>
 800533e:	bf00      	nop
 8005340:	40021000 	.word	0x40021000
 8005344:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005348:	2202      	movs	r2, #2
 800534a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	fa93 f2a3 	rbit	r2, r3
 8005356:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	4bb6      	ldr	r3, [pc, #728]	; (8005638 <HAL_RCC_OscConfig+0xdf8>)
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005364:	2102      	movs	r1, #2
 8005366:	6011      	str	r1, [r2, #0]
 8005368:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800536c:	6812      	ldr	r2, [r2, #0]
 800536e:	fa92 f1a2 	rbit	r1, r2
 8005372:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005376:	6011      	str	r1, [r2, #0]
  return result;
 8005378:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800537c:	6812      	ldr	r2, [r2, #0]
 800537e:	fab2 f282 	clz	r2, r2
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	f002 021f 	and.w	r2, r2, #31
 800538e:	2101      	movs	r1, #1
 8005390:	fa01 f202 	lsl.w	r2, r1, r2
 8005394:	4013      	ands	r3, r2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d19d      	bne.n	80052d6 <HAL_RCC_OscConfig+0xa96>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800539a:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d105      	bne.n	80053ae <HAL_RCC_OscConfig+0xb6e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a2:	4ba5      	ldr	r3, [pc, #660]	; (8005638 <HAL_RCC_OscConfig+0xdf8>)
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	4aa4      	ldr	r2, [pc, #656]	; (8005638 <HAL_RCC_OscConfig+0xdf8>)
 80053a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ac:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80053ae:	1d3b      	adds	r3, r7, #4
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00e      	beq.n	80053d6 <HAL_RCC_OscConfig+0xb96>
 80053b8:	1d3b      	adds	r3, r7, #4
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d009      	beq.n	80053d6 <HAL_RCC_OscConfig+0xb96>
 80053c2:	1d3b      	adds	r3, r7, #4
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d004      	beq.n	80053d6 <HAL_RCC_OscConfig+0xb96>
 80053cc:	f240 213a 	movw	r1, #570	; 0x23a
 80053d0:	489a      	ldr	r0, [pc, #616]	; (800563c <HAL_RCC_OscConfig+0xdfc>)
 80053d2:	f7fb ff52 	bl	800127a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053d6:	1d3b      	adds	r3, r7, #4
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 8232 	beq.w	8005846 <HAL_RCC_OscConfig+0x1006>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053e2:	4b95      	ldr	r3, [pc, #596]	; (8005638 <HAL_RCC_OscConfig+0xdf8>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f003 030c 	and.w	r3, r3, #12
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	f000 820c 	beq.w	8005808 <HAL_RCC_OscConfig+0xfc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053f0:	1d3b      	adds	r3, r7, #4
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	f040 8184 	bne.w	8005704 <HAL_RCC_OscConfig+0xec4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80053fc:	1d3b      	adds	r3, r7, #4
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_RCC_OscConfig+0xbdc>
 8005406:	1d3b      	adds	r3, r7, #4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005410:	d004      	beq.n	800541c <HAL_RCC_OscConfig+0xbdc>
 8005412:	f240 2143 	movw	r1, #579	; 0x243
 8005416:	4889      	ldr	r0, [pc, #548]	; (800563c <HAL_RCC_OscConfig+0xdfc>)
 8005418:	f7fb ff2f 	bl	800127a <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800541c:	1d3b      	adds	r3, r7, #4
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	2b00      	cmp	r3, #0
 8005424:	d058      	beq.n	80054d8 <HAL_RCC_OscConfig+0xc98>
 8005426:	1d3b      	adds	r3, r7, #4
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005430:	d052      	beq.n	80054d8 <HAL_RCC_OscConfig+0xc98>
 8005432:	1d3b      	adds	r3, r7, #4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800543c:	d04c      	beq.n	80054d8 <HAL_RCC_OscConfig+0xc98>
 800543e:	1d3b      	adds	r3, r7, #4
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005448:	d046      	beq.n	80054d8 <HAL_RCC_OscConfig+0xc98>
 800544a:	1d3b      	adds	r3, r7, #4
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005454:	d040      	beq.n	80054d8 <HAL_RCC_OscConfig+0xc98>
 8005456:	1d3b      	adds	r3, r7, #4
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005460:	d03a      	beq.n	80054d8 <HAL_RCC_OscConfig+0xc98>
 8005462:	1d3b      	adds	r3, r7, #4
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800546c:	d034      	beq.n	80054d8 <HAL_RCC_OscConfig+0xc98>
 800546e:	1d3b      	adds	r3, r7, #4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005478:	d02e      	beq.n	80054d8 <HAL_RCC_OscConfig+0xc98>
 800547a:	1d3b      	adds	r3, r7, #4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005484:	d028      	beq.n	80054d8 <HAL_RCC_OscConfig+0xc98>
 8005486:	1d3b      	adds	r3, r7, #4
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005490:	d022      	beq.n	80054d8 <HAL_RCC_OscConfig+0xc98>
 8005492:	1d3b      	adds	r3, r7, #4
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800549c:	d01c      	beq.n	80054d8 <HAL_RCC_OscConfig+0xc98>
 800549e:	1d3b      	adds	r3, r7, #4
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80054a8:	d016      	beq.n	80054d8 <HAL_RCC_OscConfig+0xc98>
 80054aa:	1d3b      	adds	r3, r7, #4
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054b4:	d010      	beq.n	80054d8 <HAL_RCC_OscConfig+0xc98>
 80054b6:	1d3b      	adds	r3, r7, #4
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 80054c0:	d00a      	beq.n	80054d8 <HAL_RCC_OscConfig+0xc98>
 80054c2:	1d3b      	adds	r3, r7, #4
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80054cc:	d004      	beq.n	80054d8 <HAL_RCC_OscConfig+0xc98>
 80054ce:	f44f 7111 	mov.w	r1, #580	; 0x244
 80054d2:	485a      	ldr	r0, [pc, #360]	; (800563c <HAL_RCC_OscConfig+0xdfc>)
 80054d4:	f7fb fed1 	bl	800127a <assert_failed>
 80054d8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80054dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	fa93 f2a3 	rbit	r2, r3
 80054ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80054f0:	601a      	str	r2, [r3, #0]
  return result;
 80054f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80054f6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f8:	fab3 f383 	clz	r3, r3
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005502:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	461a      	mov	r2, r3
 800550a:	2300      	movs	r3, #0
 800550c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800550e:	f7fc fad7 	bl	8001ac0 <HAL_GetTick>
 8005512:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005516:	e009      	b.n	800552c <HAL_RCC_OscConfig+0xcec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005518:	f7fc fad2 	bl	8001ac0 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d901      	bls.n	800552c <HAL_RCC_OscConfig+0xcec>
          {
            return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e18d      	b.n	8005848 <HAL_RCC_OscConfig+0x1008>
 800552c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005530:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005536:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	fa93 f2a3 	rbit	r2, r3
 8005540:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005544:	601a      	str	r2, [r3, #0]
  return result;
 8005546:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800554a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800554c:	fab3 f383 	clz	r3, r3
 8005550:	b2db      	uxtb	r3, r3
 8005552:	095b      	lsrs	r3, r3, #5
 8005554:	b2db      	uxtb	r3, r3
 8005556:	f043 0301 	orr.w	r3, r3, #1
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b01      	cmp	r3, #1
 800555e:	d102      	bne.n	8005566 <HAL_RCC_OscConfig+0xd26>
 8005560:	4b35      	ldr	r3, [pc, #212]	; (8005638 <HAL_RCC_OscConfig+0xdf8>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	e01b      	b.n	800559e <HAL_RCC_OscConfig+0xd5e>
 8005566:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800556a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800556e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005570:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	fa93 f2a3 	rbit	r2, r3
 800557a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005584:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	fa93 f2a3 	rbit	r2, r3
 8005594:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	4b27      	ldr	r3, [pc, #156]	; (8005638 <HAL_RCC_OscConfig+0xdf8>)
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80055a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80055a6:	6011      	str	r1, [r2, #0]
 80055a8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80055ac:	6812      	ldr	r2, [r2, #0]
 80055ae:	fa92 f1a2 	rbit	r1, r2
 80055b2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80055b6:	6011      	str	r1, [r2, #0]
  return result;
 80055b8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80055bc:	6812      	ldr	r2, [r2, #0]
 80055be:	fab2 f282 	clz	r2, r2
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	f042 0220 	orr.w	r2, r2, #32
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	f002 021f 	and.w	r2, r2, #31
 80055ce:	2101      	movs	r1, #1
 80055d0:	fa01 f202 	lsl.w	r2, r1, r2
 80055d4:	4013      	ands	r3, r2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d19e      	bne.n	8005518 <HAL_RCC_OscConfig+0xcd8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055da:	4b17      	ldr	r3, [pc, #92]	; (8005638 <HAL_RCC_OscConfig+0xdf8>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80055e2:	1d3b      	adds	r3, r7, #4
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80055e8:	1d3b      	adds	r3, r7, #4
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	430b      	orrs	r3, r1
 80055f0:	4911      	ldr	r1, [pc, #68]	; (8005638 <HAL_RCC_OscConfig+0xdf8>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	604b      	str	r3, [r1, #4]
 80055f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80055fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005600:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	fa93 f2a3 	rbit	r2, r3
 800560a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800560e:	601a      	str	r2, [r3, #0]
  return result;
 8005610:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005614:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005616:	fab3 f383 	clz	r3, r3
 800561a:	b2db      	uxtb	r3, r3
 800561c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005620:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	461a      	mov	r2, r3
 8005628:	2301      	movs	r3, #1
 800562a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562c:	f7fc fa48 	bl	8001ac0 <HAL_GetTick>
 8005630:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005634:	e00e      	b.n	8005654 <HAL_RCC_OscConfig+0xe14>
 8005636:	bf00      	nop
 8005638:	40021000 	.word	0x40021000
 800563c:	0800ba94 	.word	0x0800ba94
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005640:	f7fc fa3e 	bl	8001ac0 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0xe14>
          {
            return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e0f9      	b.n	8005848 <HAL_RCC_OscConfig+0x1008>
 8005654:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005658:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800565c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	fa93 f2a3 	rbit	r2, r3
 8005668:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800566c:	601a      	str	r2, [r3, #0]
  return result;
 800566e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005672:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005674:	fab3 f383 	clz	r3, r3
 8005678:	b2db      	uxtb	r3, r3
 800567a:	095b      	lsrs	r3, r3, #5
 800567c:	b2db      	uxtb	r3, r3
 800567e:	f043 0301 	orr.w	r3, r3, #1
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b01      	cmp	r3, #1
 8005686:	d102      	bne.n	800568e <HAL_RCC_OscConfig+0xe4e>
 8005688:	4b72      	ldr	r3, [pc, #456]	; (8005854 <HAL_RCC_OscConfig+0x1014>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	e01b      	b.n	80056c6 <HAL_RCC_OscConfig+0xe86>
 800568e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005692:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005698:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	fa93 f2a3 	rbit	r2, r3
 80056a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80056ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	fa93 f2a3 	rbit	r2, r3
 80056bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	4b64      	ldr	r3, [pc, #400]	; (8005854 <HAL_RCC_OscConfig+0x1014>)
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80056ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80056ce:	6011      	str	r1, [r2, #0]
 80056d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80056d4:	6812      	ldr	r2, [r2, #0]
 80056d6:	fa92 f1a2 	rbit	r1, r2
 80056da:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80056de:	6011      	str	r1, [r2, #0]
  return result;
 80056e0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80056e4:	6812      	ldr	r2, [r2, #0]
 80056e6:	fab2 f282 	clz	r2, r2
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	f042 0220 	orr.w	r2, r2, #32
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	f002 021f 	and.w	r2, r2, #31
 80056f6:	2101      	movs	r1, #1
 80056f8:	fa01 f202 	lsl.w	r2, r1, r2
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d09e      	beq.n	8005640 <HAL_RCC_OscConfig+0xe00>
 8005702:	e0a0      	b.n	8005846 <HAL_RCC_OscConfig+0x1006>
 8005704:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005708:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800570c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	fa93 f2a3 	rbit	r2, r3
 8005718:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800571c:	601a      	str	r2, [r3, #0]
  return result;
 800571e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005722:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005724:	fab3 f383 	clz	r3, r3
 8005728:	b2db      	uxtb	r3, r3
 800572a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800572e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	461a      	mov	r2, r3
 8005736:	2300      	movs	r3, #0
 8005738:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800573a:	f7fc f9c1 	bl	8001ac0 <HAL_GetTick>
 800573e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005742:	e009      	b.n	8005758 <HAL_RCC_OscConfig+0xf18>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005744:	f7fc f9bc 	bl	8001ac0 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0xf18>
          {
            return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e077      	b.n	8005848 <HAL_RCC_OscConfig+0x1008>
 8005758:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800575c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005762:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	fa93 f2a3 	rbit	r2, r3
 800576c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005770:	601a      	str	r2, [r3, #0]
  return result;
 8005772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005776:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005778:	fab3 f383 	clz	r3, r3
 800577c:	b2db      	uxtb	r3, r3
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	b2db      	uxtb	r3, r3
 8005782:	f043 0301 	orr.w	r3, r3, #1
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b01      	cmp	r3, #1
 800578a:	d102      	bne.n	8005792 <HAL_RCC_OscConfig+0xf52>
 800578c:	4b31      	ldr	r3, [pc, #196]	; (8005854 <HAL_RCC_OscConfig+0x1014>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	e01b      	b.n	80057ca <HAL_RCC_OscConfig+0xf8a>
 8005792:	f107 0320 	add.w	r3, r7, #32
 8005796:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800579a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579c:	f107 0320 	add.w	r3, r7, #32
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	fa93 f2a3 	rbit	r2, r3
 80057a6:	f107 031c 	add.w	r3, r7, #28
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	f107 0318 	add.w	r3, r7, #24
 80057b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	f107 0318 	add.w	r3, r7, #24
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	fa93 f2a3 	rbit	r2, r3
 80057c0:	f107 0314 	add.w	r3, r7, #20
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	4b23      	ldr	r3, [pc, #140]	; (8005854 <HAL_RCC_OscConfig+0x1014>)
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	f107 0210 	add.w	r2, r7, #16
 80057ce:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80057d2:	6011      	str	r1, [r2, #0]
 80057d4:	f107 0210 	add.w	r2, r7, #16
 80057d8:	6812      	ldr	r2, [r2, #0]
 80057da:	fa92 f1a2 	rbit	r1, r2
 80057de:	f107 020c 	add.w	r2, r7, #12
 80057e2:	6011      	str	r1, [r2, #0]
  return result;
 80057e4:	f107 020c 	add.w	r2, r7, #12
 80057e8:	6812      	ldr	r2, [r2, #0]
 80057ea:	fab2 f282 	clz	r2, r2
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	f042 0220 	orr.w	r2, r2, #32
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	f002 021f 	and.w	r2, r2, #31
 80057fa:	2101      	movs	r1, #1
 80057fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005800:	4013      	ands	r3, r2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d19e      	bne.n	8005744 <HAL_RCC_OscConfig+0xf04>
 8005806:	e01e      	b.n	8005846 <HAL_RCC_OscConfig+0x1006>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005808:	1d3b      	adds	r3, r7, #4
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_RCC_OscConfig+0xfd6>
      {
        return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e018      	b.n	8005848 <HAL_RCC_OscConfig+0x1008>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005816:	4b0f      	ldr	r3, [pc, #60]	; (8005854 <HAL_RCC_OscConfig+0x1014>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800581e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005822:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005826:	1d3b      	adds	r3, r7, #4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	429a      	cmp	r2, r3
 800582e:	d108      	bne.n	8005842 <HAL_RCC_OscConfig+0x1002>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005830:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005834:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005838:	1d3b      	adds	r3, r7, #4
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800583e:	429a      	cmp	r2, r3
 8005840:	d001      	beq.n	8005846 <HAL_RCC_OscConfig+0x1006>
#endif
        {
          return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <HAL_RCC_OscConfig+0x1008>
        }
      }
    }
  }

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40021000 	.word	0x40021000

08005858 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b09e      	sub	sp, #120	; 0x78
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005862:	2300      	movs	r3, #0
 8005864:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e203      	b.n	8005c78 <HAL_RCC_ClockConfig+0x420>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d116      	bne.n	80058aa <HAL_RCC_ClockConfig+0x52>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d110      	bne.n	80058aa <HAL_RCC_ClockConfig+0x52>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <HAL_RCC_ClockConfig+0x52>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0308 	and.w	r3, r3, #8
 800589c:	2b00      	cmp	r3, #0
 800589e:	d104      	bne.n	80058aa <HAL_RCC_ClockConfig+0x52>
 80058a0:	f240 21c3 	movw	r1, #707	; 0x2c3
 80058a4:	48a5      	ldr	r0, [pc, #660]	; (8005b3c <HAL_RCC_ClockConfig+0x2e4>)
 80058a6:	f7fb fce8 	bl	800127a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00a      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x6e>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d007      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x6e>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d004      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x6e>
 80058bc:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 80058c0:	489e      	ldr	r0, [pc, #632]	; (8005b3c <HAL_RCC_ClockConfig+0x2e4>)
 80058c2:	f7fb fcda 	bl	800127a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058c6:	4b9e      	ldr	r3, [pc, #632]	; (8005b40 <HAL_RCC_ClockConfig+0x2e8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0307 	and.w	r3, r3, #7
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d910      	bls.n	80058f6 <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058d4:	4b9a      	ldr	r3, [pc, #616]	; (8005b40 <HAL_RCC_ClockConfig+0x2e8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f023 0207 	bic.w	r2, r3, #7
 80058dc:	4998      	ldr	r1, [pc, #608]	; (8005b40 <HAL_RCC_ClockConfig+0x2e8>)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e4:	4b96      	ldr	r3, [pc, #600]	; (8005b40 <HAL_RCC_ClockConfig+0x2e8>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d001      	beq.n	80058f6 <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e1c0      	b.n	8005c78 <HAL_RCC_ClockConfig+0x420>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d031      	beq.n	8005966 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d024      	beq.n	8005954 <HAL_RCC_ClockConfig+0xfc>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	2b80      	cmp	r3, #128	; 0x80
 8005910:	d020      	beq.n	8005954 <HAL_RCC_ClockConfig+0xfc>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	2b90      	cmp	r3, #144	; 0x90
 8005918:	d01c      	beq.n	8005954 <HAL_RCC_ClockConfig+0xfc>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2ba0      	cmp	r3, #160	; 0xa0
 8005920:	d018      	beq.n	8005954 <HAL_RCC_ClockConfig+0xfc>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	2bb0      	cmp	r3, #176	; 0xb0
 8005928:	d014      	beq.n	8005954 <HAL_RCC_ClockConfig+0xfc>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	2bc0      	cmp	r3, #192	; 0xc0
 8005930:	d010      	beq.n	8005954 <HAL_RCC_ClockConfig+0xfc>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	2bd0      	cmp	r3, #208	; 0xd0
 8005938:	d00c      	beq.n	8005954 <HAL_RCC_ClockConfig+0xfc>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2be0      	cmp	r3, #224	; 0xe0
 8005940:	d008      	beq.n	8005954 <HAL_RCC_ClockConfig+0xfc>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	2bf0      	cmp	r3, #240	; 0xf0
 8005948:	d004      	beq.n	8005954 <HAL_RCC_ClockConfig+0xfc>
 800594a:	f240 21db 	movw	r1, #731	; 0x2db
 800594e:	487b      	ldr	r0, [pc, #492]	; (8005b3c <HAL_RCC_ClockConfig+0x2e4>)
 8005950:	f7fb fc93 	bl	800127a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005954:	4b7b      	ldr	r3, [pc, #492]	; (8005b44 <HAL_RCC_ClockConfig+0x2ec>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	4978      	ldr	r1, [pc, #480]	; (8005b44 <HAL_RCC_ClockConfig+0x2ec>)
 8005962:	4313      	orrs	r3, r2
 8005964:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 80f3 	beq.w	8005b5a <HAL_RCC_ClockConfig+0x302>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00c      	beq.n	8005996 <HAL_RCC_ClockConfig+0x13e>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d008      	beq.n	8005996 <HAL_RCC_ClockConfig+0x13e>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	2b02      	cmp	r3, #2
 800598a:	d004      	beq.n	8005996 <HAL_RCC_ClockConfig+0x13e>
 800598c:	f240 21e2 	movw	r1, #738	; 0x2e2
 8005990:	486a      	ldr	r0, [pc, #424]	; (8005b3c <HAL_RCC_ClockConfig+0x2e4>)
 8005992:	f7fb fc72 	bl	800127a <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d13c      	bne.n	8005a18 <HAL_RCC_ClockConfig+0x1c0>
 800599e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059a2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059a6:	fa93 f3a3 	rbit	r3, r3
 80059aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80059ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ae:	fab3 f383 	clz	r3, r3
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	095b      	lsrs	r3, r3, #5
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	f043 0301 	orr.w	r3, r3, #1
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d102      	bne.n	80059c8 <HAL_RCC_ClockConfig+0x170>
 80059c2:	4b60      	ldr	r3, [pc, #384]	; (8005b44 <HAL_RCC_ClockConfig+0x2ec>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	e00f      	b.n	80059e8 <HAL_RCC_ClockConfig+0x190>
 80059c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059d0:	fa93 f3a3 	rbit	r3, r3
 80059d4:	667b      	str	r3, [r7, #100]	; 0x64
 80059d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059da:	663b      	str	r3, [r7, #96]	; 0x60
 80059dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059de:	fa93 f3a3 	rbit	r3, r3
 80059e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059e4:	4b57      	ldr	r3, [pc, #348]	; (8005b44 <HAL_RCC_ClockConfig+0x2ec>)
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80059ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80059ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059f0:	fa92 f2a2 	rbit	r2, r2
 80059f4:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80059f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80059f8:	fab2 f282 	clz	r2, r2
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	f042 0220 	orr.w	r2, r2, #32
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	f002 021f 	and.w	r2, r2, #31
 8005a08:	2101      	movs	r1, #1
 8005a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a0e:	4013      	ands	r3, r2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d17b      	bne.n	8005b0c <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e12f      	b.n	8005c78 <HAL_RCC_ClockConfig+0x420>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d13c      	bne.n	8005a9a <HAL_RCC_ClockConfig+0x242>
 8005a20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a28:	fa93 f3a3 	rbit	r3, r3
 8005a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a30:	fab3 f383 	clz	r3, r3
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	095b      	lsrs	r3, r3, #5
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	f043 0301 	orr.w	r3, r3, #1
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d102      	bne.n	8005a4a <HAL_RCC_ClockConfig+0x1f2>
 8005a44:	4b3f      	ldr	r3, [pc, #252]	; (8005b44 <HAL_RCC_ClockConfig+0x2ec>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	e00f      	b.n	8005a6a <HAL_RCC_ClockConfig+0x212>
 8005a4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a4e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a52:	fa93 f3a3 	rbit	r3, r3
 8005a56:	647b      	str	r3, [r7, #68]	; 0x44
 8005a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a60:	fa93 f3a3 	rbit	r3, r3
 8005a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a66:	4b37      	ldr	r3, [pc, #220]	; (8005b44 <HAL_RCC_ClockConfig+0x2ec>)
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a6e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005a70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a72:	fa92 f2a2 	rbit	r2, r2
 8005a76:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a7a:	fab2 f282 	clz	r2, r2
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	f042 0220 	orr.w	r2, r2, #32
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	f002 021f 	and.w	r2, r2, #31
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a90:	4013      	ands	r3, r2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d13a      	bne.n	8005b0c <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e0ee      	b.n	8005c78 <HAL_RCC_ClockConfig+0x420>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	fa93 f3a3 	rbit	r3, r3
 8005aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa8:	fab3 f383 	clz	r3, r3
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	f043 0301 	orr.w	r3, r3, #1
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d102      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0x26a>
 8005abc:	4b21      	ldr	r3, [pc, #132]	; (8005b44 <HAL_RCC_ClockConfig+0x2ec>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	e00d      	b.n	8005ade <HAL_RCC_ClockConfig+0x286>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	fa93 f3a3 	rbit	r3, r3
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ace:	2302      	movs	r3, #2
 8005ad0:	623b      	str	r3, [r7, #32]
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	fa93 f3a3 	rbit	r3, r3
 8005ad8:	61fb      	str	r3, [r7, #28]
 8005ada:	4b1a      	ldr	r3, [pc, #104]	; (8005b44 <HAL_RCC_ClockConfig+0x2ec>)
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	2202      	movs	r2, #2
 8005ae0:	61ba      	str	r2, [r7, #24]
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	fa92 f2a2 	rbit	r2, r2
 8005ae8:	617a      	str	r2, [r7, #20]
  return result;
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	fab2 f282 	clz	r2, r2
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	f042 0220 	orr.w	r2, r2, #32
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	f002 021f 	and.w	r2, r2, #31
 8005afc:	2101      	movs	r1, #1
 8005afe:	fa01 f202 	lsl.w	r2, r1, r2
 8005b02:	4013      	ands	r3, r2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e0b5      	b.n	8005c78 <HAL_RCC_ClockConfig+0x420>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b0c:	4b0d      	ldr	r3, [pc, #52]	; (8005b44 <HAL_RCC_ClockConfig+0x2ec>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f023 0203 	bic.w	r2, r3, #3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	490a      	ldr	r1, [pc, #40]	; (8005b44 <HAL_RCC_ClockConfig+0x2ec>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b1e:	f7fb ffcf 	bl	8001ac0 <HAL_GetTick>
 8005b22:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b24:	e010      	b.n	8005b48 <HAL_RCC_ClockConfig+0x2f0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b26:	f7fb ffcb 	bl	8001ac0 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d907      	bls.n	8005b48 <HAL_RCC_ClockConfig+0x2f0>
      {
        return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e09d      	b.n	8005c78 <HAL_RCC_ClockConfig+0x420>
 8005b3c:	0800ba94 	.word	0x0800ba94
 8005b40:	40022000 	.word	0x40022000
 8005b44:	40021000 	.word	0x40021000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b48:	4b4d      	ldr	r3, [pc, #308]	; (8005c80 <HAL_RCC_ClockConfig+0x428>)
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f003 020c 	and.w	r2, r3, #12
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d1e5      	bne.n	8005b26 <HAL_RCC_ClockConfig+0x2ce>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b5a:	4b4a      	ldr	r3, [pc, #296]	; (8005c84 <HAL_RCC_ClockConfig+0x42c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0307 	and.w	r3, r3, #7
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d210      	bcs.n	8005b8a <HAL_RCC_ClockConfig+0x332>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b68:	4b46      	ldr	r3, [pc, #280]	; (8005c84 <HAL_RCC_ClockConfig+0x42c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f023 0207 	bic.w	r2, r3, #7
 8005b70:	4944      	ldr	r1, [pc, #272]	; (8005c84 <HAL_RCC_ClockConfig+0x42c>)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b78:	4b42      	ldr	r3, [pc, #264]	; (8005c84 <HAL_RCC_ClockConfig+0x42c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d001      	beq.n	8005b8a <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e076      	b.n	8005c78 <HAL_RCC_ClockConfig+0x420>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0304 	and.w	r3, r3, #4
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d025      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x38a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d018      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x378>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba6:	d013      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x378>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005bb0:	d00e      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x378>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005bba:	d009      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x378>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bc4:	d004      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x378>
 8005bc6:	f240 311e 	movw	r1, #798	; 0x31e
 8005bca:	482f      	ldr	r0, [pc, #188]	; (8005c88 <HAL_RCC_ClockConfig+0x430>)
 8005bcc:	f7fb fb55 	bl	800127a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bd0:	4b2b      	ldr	r3, [pc, #172]	; (8005c80 <HAL_RCC_ClockConfig+0x428>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	4928      	ldr	r1, [pc, #160]	; (8005c80 <HAL_RCC_ClockConfig+0x428>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d026      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x3e4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d018      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x3d0>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bfe:	d013      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x3d0>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005c08:	d00e      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x3d0>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c12:	d009      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x3d0>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c1c:	d004      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x3d0>
 8005c1e:	f240 3125 	movw	r1, #805	; 0x325
 8005c22:	4819      	ldr	r0, [pc, #100]	; (8005c88 <HAL_RCC_ClockConfig+0x430>)
 8005c24:	f7fb fb29 	bl	800127a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c28:	4b15      	ldr	r3, [pc, #84]	; (8005c80 <HAL_RCC_ClockConfig+0x428>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	4912      	ldr	r1, [pc, #72]	; (8005c80 <HAL_RCC_ClockConfig+0x428>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005c3c:	f000 f82c 	bl	8005c98 <HAL_RCC_GetSysClockFreq>
 8005c40:	4601      	mov	r1, r0
 8005c42:	4b0f      	ldr	r3, [pc, #60]	; (8005c80 <HAL_RCC_ClockConfig+0x428>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c4a:	22f0      	movs	r2, #240	; 0xf0
 8005c4c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	fa92 f2a2 	rbit	r2, r2
 8005c54:	60fa      	str	r2, [r7, #12]
  return result;
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	fab2 f282 	clz	r2, r2
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	40d3      	lsrs	r3, r2
 8005c60:	4a0a      	ldr	r2, [pc, #40]	; (8005c8c <HAL_RCC_ClockConfig+0x434>)
 8005c62:	5cd3      	ldrb	r3, [r2, r3]
 8005c64:	fa21 f303 	lsr.w	r3, r1, r3
 8005c68:	4a09      	ldr	r2, [pc, #36]	; (8005c90 <HAL_RCC_ClockConfig+0x438>)
 8005c6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005c6c:	4b09      	ldr	r3, [pc, #36]	; (8005c94 <HAL_RCC_ClockConfig+0x43c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7fb fee1 	bl	8001a38 <HAL_InitTick>
  
  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3778      	adds	r7, #120	; 0x78
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40021000 	.word	0x40021000
 8005c84:	40022000 	.word	0x40022000
 8005c88:	0800ba94 	.word	0x0800ba94
 8005c8c:	0800bba8 	.word	0x0800bba8
 8005c90:	2000006c 	.word	0x2000006c
 8005c94:	20000070 	.word	0x20000070

08005c98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b08b      	sub	sp, #44	; 0x2c
 8005c9c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	61fb      	str	r3, [r7, #28]
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61bb      	str	r3, [r7, #24]
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8005caa:	2300      	movs	r3, #0
 8005cac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005cb2:	4b29      	ldr	r3, [pc, #164]	; (8005d58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	f003 030c 	and.w	r3, r3, #12
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d002      	beq.n	8005cc8 <HAL_RCC_GetSysClockFreq+0x30>
 8005cc2:	2b08      	cmp	r3, #8
 8005cc4:	d003      	beq.n	8005cce <HAL_RCC_GetSysClockFreq+0x36>
 8005cc6:	e03c      	b.n	8005d42 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005cc8:	4b24      	ldr	r3, [pc, #144]	; (8005d5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005cca:	623b      	str	r3, [r7, #32]
      break;
 8005ccc:	e03c      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005cd4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005cd8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	fa92 f2a2 	rbit	r2, r2
 8005ce0:	607a      	str	r2, [r7, #4]
  return result;
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	fab2 f282 	clz	r2, r2
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	40d3      	lsrs	r3, r2
 8005cec:	4a1c      	ldr	r2, [pc, #112]	; (8005d60 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005cee:	5cd3      	ldrb	r3, [r2, r3]
 8005cf0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005cf2:	4b19      	ldr	r3, [pc, #100]	; (8005d58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	220f      	movs	r2, #15
 8005cfc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	fa92 f2a2 	rbit	r2, r2
 8005d04:	60fa      	str	r2, [r7, #12]
  return result;
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	fab2 f282 	clz	r2, r2
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	40d3      	lsrs	r3, r2
 8005d10:	4a14      	ldr	r2, [pc, #80]	; (8005d64 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005d12:	5cd3      	ldrb	r3, [r2, r3]
 8005d14:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d008      	beq.n	8005d32 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d20:	4a0e      	ldr	r2, [pc, #56]	; (8005d5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	fb02 f303 	mul.w	r3, r2, r3
 8005d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d30:	e004      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	4a0c      	ldr	r2, [pc, #48]	; (8005d68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d36:	fb02 f303 	mul.w	r3, r2, r3
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	623b      	str	r3, [r7, #32]
      break;
 8005d40:	e002      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d42:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d44:	623b      	str	r3, [r7, #32]
      break;
 8005d46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d48:	6a3b      	ldr	r3, [r7, #32]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	372c      	adds	r7, #44	; 0x2c
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	007a1200 	.word	0x007a1200
 8005d60:	0800bbb8 	.word	0x0800bbb8
 8005d64:	0800bbc8 	.word	0x0800bbc8
 8005d68:	003d0900 	.word	0x003d0900

08005d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b092      	sub	sp, #72	; 0x48
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f5b3 3f4d 	cmp.w	r3, #209920	; 0x33400
 8005d8a:	d303      	bcc.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005d8c:	2172      	movs	r1, #114	; 0x72
 8005d8e:	485f      	ldr	r0, [pc, #380]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8005d90:	f7fb fa73 	bl	800127a <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 80ed 	beq.w	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d012      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005db2:	d00d      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dbc:	d008      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc6:	d003      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005dc8:	2178      	movs	r1, #120	; 0x78
 8005dca:	4850      	ldr	r0, [pc, #320]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8005dcc:	f7fb fa55 	bl	800127a <assert_failed>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dd0:	4b4f      	ldr	r3, [pc, #316]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10e      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ddc:	4b4c      	ldr	r3, [pc, #304]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	4a4b      	ldr	r2, [pc, #300]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005de6:	61d3      	str	r3, [r2, #28]
 8005de8:	4b49      	ldr	r3, [pc, #292]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df0:	60bb      	str	r3, [r7, #8]
 8005df2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005df4:	2301      	movs	r3, #1
 8005df6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dfa:	4b46      	ldr	r3, [pc, #280]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d118      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e06:	4b43      	ldr	r3, [pc, #268]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a42      	ldr	r2, [pc, #264]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e12:	f7fb fe55 	bl	8001ac0 <HAL_GetTick>
 8005e16:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e18:	e008      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e1a:	f7fb fe51 	bl	8001ac0 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	2b64      	cmp	r3, #100	; 0x64
 8005e26:	d901      	bls.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
        {
          return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e2bd      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e2c:	4b39      	ldr	r3, [pc, #228]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d0f0      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e38:	4b35      	ldr	r3, [pc, #212]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e40:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 8086 	beq.w	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d07e      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e58:	4b2d      	ldr	r3, [pc, #180]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6a:	fa93 f3a3 	rbit	r3, r3
 8005e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e72:	fab3 f383 	clz	r3, r3
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	461a      	mov	r2, r3
 8005e7a:	4b27      	ldr	r3, [pc, #156]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	461a      	mov	r2, r3
 8005e82:	2301      	movs	r3, #1
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8e:	fa93 f3a3 	rbit	r3, r3
 8005e92:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e96:	fab3 f383 	clz	r3, r3
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4b1e      	ldr	r3, [pc, #120]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005eaa:	4a19      	ldr	r2, [pc, #100]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d04d      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eba:	f7fb fe01 	bl	8001ac0 <HAL_GetTick>
 8005ebe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ec0:	e00a      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ec2:	f7fb fdfd 	bl	8001ac0 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
          {
            return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e267      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ede:	fa93 f3a3 	rbit	r3, r3
 8005ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	623b      	str	r3, [r7, #32]
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	fa93 f3a3 	rbit	r3, r3
 8005eee:	61fb      	str	r3, [r7, #28]
  return result;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef2:	fab3 f383 	clz	r3, r3
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	095b      	lsrs	r3, r3, #5
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	f043 0302 	orr.w	r3, r3, #2
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d10a      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 8005f06:	4b02      	ldr	r3, [pc, #8]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	e00f      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005f0c:	0800bacc 	.word	0x0800bacc
 8005f10:	40021000 	.word	0x40021000
 8005f14:	40007000 	.word	0x40007000
 8005f18:	10908100 	.word	0x10908100
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	fa93 f3a3 	rbit	r3, r3
 8005f26:	617b      	str	r3, [r7, #20]
 8005f28:	4b9d      	ldr	r3, [pc, #628]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	613a      	str	r2, [r7, #16]
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	fa92 f2a2 	rbit	r2, r2
 8005f36:	60fa      	str	r2, [r7, #12]
  return result;
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	fab2 f282 	clz	r2, r2
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f44:	b2d2      	uxtb	r2, r2
 8005f46:	f002 021f 	and.w	r2, r2, #31
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f50:	4013      	ands	r3, r2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0b5      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x156>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005f56:	4b92      	ldr	r3, [pc, #584]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	498f      	ldr	r1, [pc, #572]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d105      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f70:	4b8b      	ldr	r3, [pc, #556]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	4a8a      	ldr	r2, [pc, #552]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01c      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00f      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d00b      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d007      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d003      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005fa8:	21be      	movs	r1, #190	; 0xbe
 8005faa:	487e      	ldr	r0, [pc, #504]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005fac:	f7fb f965 	bl	800127a <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fb0:	4b7b      	ldr	r3, [pc, #492]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb4:	f023 0203 	bic.w	r2, r3, #3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	4978      	ldr	r1, [pc, #480]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d01f      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d012      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x290>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fde:	d00d      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x290>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fe8:	d008      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x290>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ff2:	d003      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x290>
 8005ff4:	21c9      	movs	r1, #201	; 0xc9
 8005ff6:	486b      	ldr	r0, [pc, #428]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005ff8:	f7fb f93f 	bl	800127a <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ffc:	4b68      	ldr	r3, [pc, #416]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006000:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	4965      	ldr	r1, [pc, #404]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800600a:	4313      	orrs	r3, r2
 800600c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0304 	and.w	r3, r3, #4
 8006016:	2b00      	cmp	r3, #0
 8006018:	d01f      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d012      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800602a:	d00d      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006034:	d008      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800603e:	d003      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8006040:	21d5      	movs	r1, #213	; 0xd5
 8006042:	4858      	ldr	r0, [pc, #352]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006044:	f7fb f919 	bl	800127a <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006048:	4b55      	ldr	r3, [pc, #340]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	4952      	ldr	r1, [pc, #328]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006056:	4313      	orrs	r3, r2
 8006058:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0320 	and.w	r3, r3, #32
 8006062:	2b00      	cmp	r3, #0
 8006064:	d014      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d007      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x312>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	2b10      	cmp	r3, #16
 8006074:	d003      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006076:	21e0      	movs	r1, #224	; 0xe0
 8006078:	484a      	ldr	r0, [pc, #296]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800607a:	f7fb f8fe 	bl	800127a <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800607e:	4b48      	ldr	r3, [pc, #288]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006082:	f023 0210 	bic.w	r2, r3, #16
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	4945      	ldr	r1, [pc, #276]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800608c:	4313      	orrs	r3, r2
 800608e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d015      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060a4:	d007      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80060ae:	21ee      	movs	r1, #238	; 0xee
 80060b0:	483c      	ldr	r0, [pc, #240]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80060b2:	f7fb f8e2 	bl	800127a <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80060b6:	4b3a      	ldr	r3, [pc, #232]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	4937      	ldr	r1, [pc, #220]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d015      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d008      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	d004      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 80060e4:	f44f 7181 	mov.w	r1, #258	; 0x102
 80060e8:	482e      	ldr	r0, [pc, #184]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80060ea:	f7fb f8c6 	bl	800127a <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060ee:	4b2c      	ldr	r3, [pc, #176]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80060f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f2:	f023 0220 	bic.w	r2, r3, #32
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	4929      	ldr	r1, [pc, #164]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0308 	and.w	r3, r3, #8
 8006108:	2b00      	cmp	r3, #0
 800610a:	d020      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d013      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800611c:	d00e      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006126:	d009      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006130:	d004      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006132:	f240 1123 	movw	r1, #291	; 0x123
 8006136:	481b      	ldr	r0, [pc, #108]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006138:	f7fb f89f 	bl	800127a <assert_failed>
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800613c:	4b18      	ldr	r3, [pc, #96]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800613e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006140:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	4915      	ldr	r1, [pc, #84]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800614a:	4313      	orrs	r3, r2
 800614c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0310 	and.w	r3, r3, #16
 8006156:	2b00      	cmp	r3, #0
 8006158:	d026      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d013      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800616a:	d00e      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x41e>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006174:	d009      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800617e:	d004      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8006180:	f240 112d 	movw	r1, #301	; 0x12d
 8006184:	4807      	ldr	r0, [pc, #28]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006186:	f7fb f878 	bl	800127a <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800618a:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	4902      	ldr	r1, [pc, #8]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006198:	4313      	orrs	r3, r2
 800619a:	630b      	str	r3, [r1, #48]	; 0x30
 800619c:	e004      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800619e:	bf00      	nop
 80061a0:	40021000 	.word	0x40021000
 80061a4:	0800bacc 	.word	0x0800bacc

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d016      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d009      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061c4:	d004      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80061c6:	f240 113d 	movw	r1, #317	; 0x13d
 80061ca:	4879      	ldr	r0, [pc, #484]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80061cc:	f7fb f855 	bl	800127a <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80061d0:	4b78      	ldr	r3, [pc, #480]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061dc:	4975      	ldr	r1, [pc, #468]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d04d      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x51e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d040      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061fe:	d03b      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8006208:	d036      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8006212:	d031      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800621c:	d02c      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006226:	d027      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8006230:	d022      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 800623a:	d01d      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8006244:	d018      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800624e:	d013      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006258:	d00e      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8006262:	d009      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800626c:	d004      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800626e:	f240 115d 	movw	r1, #349	; 0x15d
 8006272:	484f      	ldr	r0, [pc, #316]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006274:	f7fb f801 	bl	800127a <assert_failed>
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006278:	4b4e      	ldr	r3, [pc, #312]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	494b      	ldr	r1, [pc, #300]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8006286:	4313      	orrs	r3, r2
 8006288:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006292:	2b00      	cmp	r3, #0
 8006294:	d04d      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629a:	2b00      	cmp	r3, #0
 800629c:	d040      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062a6:	d03b      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ac:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 80062b0:	d036      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b6:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 80062ba:	d031      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c0:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 80062c4:	d02c      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ca:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80062ce:	d027      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d4:	f5b3 5f28 	cmp.w	r3, #10752	; 0x2a00
 80062d8:	d022      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062de:	f5b3 5f30 	cmp.w	r3, #11264	; 0x2c00
 80062e2:	d01d      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e8:	f5b3 5f38 	cmp.w	r3, #11776	; 0x2e00
 80062ec:	d018      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062f6:	d013      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fc:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 8006300:	d00e      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006306:	f5b3 5f50 	cmp.w	r3, #13312	; 0x3400
 800630a:	d009      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006310:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 8006314:	d004      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8006316:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 800631a:	4825      	ldr	r0, [pc, #148]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800631c:	f7fa ffad 	bl	800127a <assert_failed>
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006320:	4b24      	ldr	r3, [pc, #144]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632c:	4921      	ldr	r1, [pc, #132]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800632e:	4313      	orrs	r3, r2
 8006330:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d016      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006342:	2b00      	cmp	r3, #0
 8006344:	d009      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800634e:	d004      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 8006350:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8006354:	4816      	ldr	r0, [pc, #88]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006356:	f7fa ff90 	bl	800127a <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800635a:	4b16      	ldr	r3, [pc, #88]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800635c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006366:	4913      	ldr	r1, [pc, #76]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8006368:	4313      	orrs	r3, r2
 800636a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d016      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637c:	2b00      	cmp	r3, #0
 800637e:	d009      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x628>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006388:	d004      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x628>
 800638a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800638e:	4808      	ldr	r0, [pc, #32]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006390:	f7fa ff73 	bl	800127a <assert_failed>
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006394:	4b07      	ldr	r3, [pc, #28]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a0:	4904      	ldr	r1, [pc, #16]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3748      	adds	r7, #72	; 0x48
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	0800bacc 	.word	0x0800bacc
 80063b4:	40021000 	.word	0x40021000

080063b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e1e4      	b.n	8006794 <HAL_SPI_Init+0x3dc>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a92      	ldr	r2, [pc, #584]	; (8006618 <HAL_SPI_Init+0x260>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00e      	beq.n	80063f2 <HAL_SPI_Init+0x3a>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a90      	ldr	r2, [pc, #576]	; (800661c <HAL_SPI_Init+0x264>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d009      	beq.n	80063f2 <HAL_SPI_Init+0x3a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a8f      	ldr	r2, [pc, #572]	; (8006620 <HAL_SPI_Init+0x268>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d004      	beq.n	80063f2 <HAL_SPI_Init+0x3a>
 80063e8:	f240 1147 	movw	r1, #327	; 0x147
 80063ec:	488d      	ldr	r0, [pc, #564]	; (8006624 <HAL_SPI_Init+0x26c>)
 80063ee:	f7fa ff44 	bl	800127a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d009      	beq.n	800640e <HAL_SPI_Init+0x56>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006402:	d004      	beq.n	800640e <HAL_SPI_Init+0x56>
 8006404:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006408:	4886      	ldr	r0, [pc, #536]	; (8006624 <HAL_SPI_Init+0x26c>)
 800640a:	f7fa ff36 	bl	800127a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00e      	beq.n	8006434 <HAL_SPI_Init+0x7c>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800641e:	d009      	beq.n	8006434 <HAL_SPI_Init+0x7c>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006428:	d004      	beq.n	8006434 <HAL_SPI_Init+0x7c>
 800642a:	f240 1149 	movw	r1, #329	; 0x149
 800642e:	487d      	ldr	r0, [pc, #500]	; (8006624 <HAL_SPI_Init+0x26c>)
 8006430:	f7fa ff23 	bl	800127a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800643c:	d040      	beq.n	80064c0 <HAL_SPI_Init+0x108>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8006446:	d03b      	beq.n	80064c0 <HAL_SPI_Init+0x108>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8006450:	d036      	beq.n	80064c0 <HAL_SPI_Init+0x108>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800645a:	d031      	beq.n	80064c0 <HAL_SPI_Init+0x108>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8006464:	d02c      	beq.n	80064c0 <HAL_SPI_Init+0x108>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800646e:	d027      	beq.n	80064c0 <HAL_SPI_Init+0x108>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8006478:	d022      	beq.n	80064c0 <HAL_SPI_Init+0x108>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006482:	d01d      	beq.n	80064c0 <HAL_SPI_Init+0x108>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800648c:	d018      	beq.n	80064c0 <HAL_SPI_Init+0x108>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006496:	d013      	beq.n	80064c0 <HAL_SPI_Init+0x108>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80064a0:	d00e      	beq.n	80064c0 <HAL_SPI_Init+0x108>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064aa:	d009      	beq.n	80064c0 <HAL_SPI_Init+0x108>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064b4:	d004      	beq.n	80064c0 <HAL_SPI_Init+0x108>
 80064b6:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80064ba:	485a      	ldr	r0, [pc, #360]	; (8006624 <HAL_SPI_Init+0x26c>)
 80064bc:	f7fa fedd 	bl	800127a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c8:	d00d      	beq.n	80064e6 <HAL_SPI_Init+0x12e>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d009      	beq.n	80064e6 <HAL_SPI_Init+0x12e>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064da:	d004      	beq.n	80064e6 <HAL_SPI_Init+0x12e>
 80064dc:	f240 114b 	movw	r1, #331	; 0x14b
 80064e0:	4850      	ldr	r0, [pc, #320]	; (8006624 <HAL_SPI_Init+0x26c>)
 80064e2:	f7fa feca 	bl	800127a <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ea:	2b08      	cmp	r3, #8
 80064ec:	d008      	beq.n	8006500 <HAL_SPI_Init+0x148>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d004      	beq.n	8006500 <HAL_SPI_Init+0x148>
 80064f6:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80064fa:	484a      	ldr	r0, [pc, #296]	; (8006624 <HAL_SPI_Init+0x26c>)
 80064fc:	f7fa febd 	bl	800127a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d020      	beq.n	800654a <HAL_SPI_Init+0x192>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	2b08      	cmp	r3, #8
 800650e:	d01c      	beq.n	800654a <HAL_SPI_Init+0x192>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	2b10      	cmp	r3, #16
 8006516:	d018      	beq.n	800654a <HAL_SPI_Init+0x192>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	2b18      	cmp	r3, #24
 800651e:	d014      	beq.n	800654a <HAL_SPI_Init+0x192>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	2b20      	cmp	r3, #32
 8006526:	d010      	beq.n	800654a <HAL_SPI_Init+0x192>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	2b28      	cmp	r3, #40	; 0x28
 800652e:	d00c      	beq.n	800654a <HAL_SPI_Init+0x192>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	2b30      	cmp	r3, #48	; 0x30
 8006536:	d008      	beq.n	800654a <HAL_SPI_Init+0x192>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	2b38      	cmp	r3, #56	; 0x38
 800653e:	d004      	beq.n	800654a <HAL_SPI_Init+0x192>
 8006540:	f240 114d 	movw	r1, #333	; 0x14d
 8006544:	4837      	ldr	r0, [pc, #220]	; (8006624 <HAL_SPI_Init+0x26c>)
 8006546:	f7fa fe98 	bl	800127a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d008      	beq.n	8006564 <HAL_SPI_Init+0x1ac>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	2b80      	cmp	r3, #128	; 0x80
 8006558:	d004      	beq.n	8006564 <HAL_SPI_Init+0x1ac>
 800655a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800655e:	4831      	ldr	r0, [pc, #196]	; (8006624 <HAL_SPI_Init+0x26c>)
 8006560:	f7fa fe8b 	bl	800127a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	2b00      	cmp	r3, #0
 800656a:	d008      	beq.n	800657e <HAL_SPI_Init+0x1c6>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	2b10      	cmp	r3, #16
 8006572:	d004      	beq.n	800657e <HAL_SPI_Init+0x1c6>
 8006574:	f240 114f 	movw	r1, #335	; 0x14f
 8006578:	482a      	ldr	r0, [pc, #168]	; (8006624 <HAL_SPI_Init+0x26c>)
 800657a:	f7fa fe7e 	bl	800127a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006582:	2b00      	cmp	r3, #0
 8006584:	d150      	bne.n	8006628 <HAL_SPI_Init+0x270>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d008      	beq.n	80065a0 <HAL_SPI_Init+0x1e8>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	2b02      	cmp	r3, #2
 8006594:	d004      	beq.n	80065a0 <HAL_SPI_Init+0x1e8>
 8006596:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800659a:	4822      	ldr	r0, [pc, #136]	; (8006624 <HAL_SPI_Init+0x26c>)
 800659c:	f7fa fe6d 	bl	800127a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d008      	beq.n	80065ba <HAL_SPI_Init+0x202>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d004      	beq.n	80065ba <HAL_SPI_Init+0x202>
 80065b0:	f240 1153 	movw	r1, #339	; 0x153
 80065b4:	481b      	ldr	r0, [pc, #108]	; (8006624 <HAL_SPI_Init+0x26c>)
 80065b6:	f7fa fe60 	bl	800127a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065c2:	d125      	bne.n	8006610 <HAL_SPI_Init+0x258>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d058      	beq.n	800667e <HAL_SPI_Init+0x2c6>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	d054      	beq.n	800667e <HAL_SPI_Init+0x2c6>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	2b10      	cmp	r3, #16
 80065da:	d050      	beq.n	800667e <HAL_SPI_Init+0x2c6>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	2b18      	cmp	r3, #24
 80065e2:	d04c      	beq.n	800667e <HAL_SPI_Init+0x2c6>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	2b20      	cmp	r3, #32
 80065ea:	d048      	beq.n	800667e <HAL_SPI_Init+0x2c6>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	2b28      	cmp	r3, #40	; 0x28
 80065f2:	d044      	beq.n	800667e <HAL_SPI_Init+0x2c6>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	2b30      	cmp	r3, #48	; 0x30
 80065fa:	d040      	beq.n	800667e <HAL_SPI_Init+0x2c6>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	2b38      	cmp	r3, #56	; 0x38
 8006602:	d03c      	beq.n	800667e <HAL_SPI_Init+0x2c6>
 8006604:	f240 1157 	movw	r1, #343	; 0x157
 8006608:	4806      	ldr	r0, [pc, #24]	; (8006624 <HAL_SPI_Init+0x26c>)
 800660a:	f7fa fe36 	bl	800127a <assert_failed>
 800660e:	e036      	b.n	800667e <HAL_SPI_Init+0x2c6>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	61da      	str	r2, [r3, #28]
 8006616:	e032      	b.n	800667e <HAL_SPI_Init+0x2c6>
 8006618:	40013000 	.word	0x40013000
 800661c:	40003800 	.word	0x40003800
 8006620:	40003c00 	.word	0x40003c00
 8006624:	0800bb28 	.word	0x0800bb28
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d020      	beq.n	8006672 <HAL_SPI_Init+0x2ba>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	2b08      	cmp	r3, #8
 8006636:	d01c      	beq.n	8006672 <HAL_SPI_Init+0x2ba>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	2b10      	cmp	r3, #16
 800663e:	d018      	beq.n	8006672 <HAL_SPI_Init+0x2ba>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	69db      	ldr	r3, [r3, #28]
 8006644:	2b18      	cmp	r3, #24
 8006646:	d014      	beq.n	8006672 <HAL_SPI_Init+0x2ba>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	2b20      	cmp	r3, #32
 800664e:	d010      	beq.n	8006672 <HAL_SPI_Init+0x2ba>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	2b28      	cmp	r3, #40	; 0x28
 8006656:	d00c      	beq.n	8006672 <HAL_SPI_Init+0x2ba>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	69db      	ldr	r3, [r3, #28]
 800665c:	2b30      	cmp	r3, #48	; 0x30
 800665e:	d008      	beq.n	8006672 <HAL_SPI_Init+0x2ba>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	2b38      	cmp	r3, #56	; 0x38
 8006666:	d004      	beq.n	8006672 <HAL_SPI_Init+0x2ba>
 8006668:	f240 1161 	movw	r1, #353	; 0x161
 800666c:	484b      	ldr	r0, [pc, #300]	; (800679c <HAL_SPI_Init+0x3e4>)
 800666e:	f7fa fe04 	bl	800127a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d106      	bne.n	800669e <HAL_SPI_Init+0x2e6>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7fa fe37 	bl	800130c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2202      	movs	r2, #2
 80066a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066b4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066be:	d902      	bls.n	80066c6 <HAL_SPI_Init+0x30e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80066c0:	2300      	movs	r3, #0
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	e002      	b.n	80066cc <HAL_SPI_Init+0x314>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80066c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066ca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80066d4:	d007      	beq.n	80066e6 <HAL_SPI_Init+0x32e>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066de:	d002      	beq.n	80066e6 <HAL_SPI_Init+0x32e>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80066f6:	431a      	orrs	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	431a      	orrs	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	431a      	orrs	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800671e:	431a      	orrs	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006728:	ea42 0103 	orr.w	r1, r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006730:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	0c1b      	lsrs	r3, r3, #16
 8006742:	f003 0204 	and.w	r2, r3, #4
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	f003 0310 	and.w	r3, r3, #16
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	431a      	orrs	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006762:	ea42 0103 	orr.w	r1, r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69da      	ldr	r2, [r3, #28]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006782:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	0800bb28 	.word	0x0800bb28

080067a0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e02e      	b.n	8006810 <HAL_SPI_DeInit+0x70>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a18      	ldr	r2, [pc, #96]	; (8006818 <HAL_SPI_DeInit+0x78>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d00e      	beq.n	80067da <HAL_SPI_DeInit+0x3a>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a16      	ldr	r2, [pc, #88]	; (800681c <HAL_SPI_DeInit+0x7c>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d009      	beq.n	80067da <HAL_SPI_DeInit+0x3a>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a15      	ldr	r2, [pc, #84]	; (8006820 <HAL_SPI_DeInit+0x80>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d004      	beq.n	80067da <HAL_SPI_DeInit+0x3a>
 80067d0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80067d4:	4813      	ldr	r0, [pc, #76]	; (8006824 <HAL_SPI_DeInit+0x84>)
 80067d6:	f7fa fd50 	bl	800127a <assert_failed>

  hspi->State = HAL_SPI_STATE_BUSY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2202      	movs	r2, #2
 80067de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067f0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7fa fdcc 	bl	8001390 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	40013000 	.word	0x40013000
 800681c:	40003800 	.word	0x40003800
 8006820:	40003c00 	.word	0x40003c00
 8006824:	0800bb28 	.word	0x0800bb28

08006828 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08a      	sub	sp, #40	; 0x28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
 8006834:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006836:	2301      	movs	r3, #1
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d004      	beq.n	8006852 <HAL_SPI_TransmitReceive+0x2a>
 8006848:	f240 41e5 	movw	r1, #1253	; 0x4e5
 800684c:	4895      	ldr	r0, [pc, #596]	; (8006aa4 <HAL_SPI_TransmitReceive+0x27c>)
 800684e:	f7fa fd14 	bl	800127a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006858:	2b01      	cmp	r3, #1
 800685a:	d101      	bne.n	8006860 <HAL_SPI_TransmitReceive+0x38>
 800685c:	2302      	movs	r3, #2
 800685e:	e1fd      	b.n	8006c5c <HAL_SPI_TransmitReceive+0x434>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006868:	f7fb f92a 	bl	8001ac0 <HAL_GetTick>
 800686c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006874:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800687c:	887b      	ldrh	r3, [r7, #2]
 800687e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006880:	887b      	ldrh	r3, [r7, #2]
 8006882:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006884:	7efb      	ldrb	r3, [r7, #27]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d00e      	beq.n	80068a8 <HAL_SPI_TransmitReceive+0x80>
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006890:	d106      	bne.n	80068a0 <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d102      	bne.n	80068a0 <HAL_SPI_TransmitReceive+0x78>
 800689a:	7efb      	ldrb	r3, [r7, #27]
 800689c:	2b04      	cmp	r3, #4
 800689e:	d003      	beq.n	80068a8 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 80068a0:	2302      	movs	r3, #2
 80068a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80068a6:	e1cf      	b.n	8006c48 <HAL_SPI_TransmitReceive+0x420>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d005      	beq.n	80068ba <HAL_SPI_TransmitReceive+0x92>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <HAL_SPI_TransmitReceive+0x92>
 80068b4:	887b      	ldrh	r3, [r7, #2]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d103      	bne.n	80068c2 <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80068c0:	e1c2      	b.n	8006c48 <HAL_SPI_TransmitReceive+0x420>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d003      	beq.n	80068d6 <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2205      	movs	r2, #5
 80068d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	887a      	ldrh	r2, [r7, #2]
 80068e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	887a      	ldrh	r2, [r7, #2]
 80068ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	887a      	ldrh	r2, [r7, #2]
 80068fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	887a      	ldrh	r2, [r7, #2]
 8006902:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006918:	d802      	bhi.n	8006920 <HAL_SPI_TransmitReceive+0xf8>
 800691a:	8a3b      	ldrh	r3, [r7, #16]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d908      	bls.n	8006932 <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800692e:	605a      	str	r2, [r3, #4]
 8006930:	e007      	b.n	8006942 <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006940:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694c:	2b40      	cmp	r3, #64	; 0x40
 800694e:	d007      	beq.n	8006960 <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800695e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006968:	d97c      	bls.n	8006a64 <HAL_SPI_TransmitReceive+0x23c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <HAL_SPI_TransmitReceive+0x150>
 8006972:	8a7b      	ldrh	r3, [r7, #18]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d169      	bne.n	8006a4c <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697c:	881a      	ldrh	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006988:	1c9a      	adds	r2, r3, #2
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006992:	b29b      	uxth	r3, r3
 8006994:	3b01      	subs	r3, #1
 8006996:	b29a      	uxth	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800699c:	e056      	b.n	8006a4c <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d11b      	bne.n	80069e4 <HAL_SPI_TransmitReceive+0x1bc>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d016      	beq.n	80069e4 <HAL_SPI_TransmitReceive+0x1bc>
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d113      	bne.n	80069e4 <HAL_SPI_TransmitReceive+0x1bc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	881a      	ldrh	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069cc:	1c9a      	adds	r2, r3, #2
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	3b01      	subs	r3, #1
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d11c      	bne.n	8006a2c <HAL_SPI_TransmitReceive+0x204>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d016      	beq.n	8006a2c <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a08:	b292      	uxth	r2, r2
 8006a0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a10:	1c9a      	adds	r2, r3, #2
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a2c:	f7fb f848 	bl	8001ac0 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d807      	bhi.n	8006a4c <HAL_SPI_TransmitReceive+0x224>
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a42:	d003      	beq.n	8006a4c <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006a4a:	e0fd      	b.n	8006c48 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1a3      	bne.n	800699e <HAL_SPI_TransmitReceive+0x176>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d19d      	bne.n	800699e <HAL_SPI_TransmitReceive+0x176>
 8006a62:	e0e1      	b.n	8006c28 <HAL_SPI_TransmitReceive+0x400>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <HAL_SPI_TransmitReceive+0x24c>
 8006a6c:	8a7b      	ldrh	r3, [r7, #18]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	f040 80cd 	bne.w	8006c0e <HAL_SPI_TransmitReceive+0x3e6>
    {
      if (hspi->TxXferCount > 1U)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d914      	bls.n	8006aa8 <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a82:	881a      	ldrh	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8e:	1c9a      	adds	r2, r3, #2
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	3b02      	subs	r3, #2
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006aa2:	e0b4      	b.n	8006c0e <HAL_SPI_TransmitReceive+0x3e6>
 8006aa4:	0800bb28 	.word	0x0800bb28
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	7812      	ldrb	r2, [r2, #0]
 8006ab4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ace:	e09e      	b.n	8006c0e <HAL_SPI_TransmitReceive+0x3e6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d134      	bne.n	8006b48 <HAL_SPI_TransmitReceive+0x320>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d02f      	beq.n	8006b48 <HAL_SPI_TransmitReceive+0x320>
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d12c      	bne.n	8006b48 <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d912      	bls.n	8006b1e <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afc:	881a      	ldrh	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b08:	1c9a      	adds	r2, r3, #2
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	3b02      	subs	r3, #2
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b1c:	e012      	b.n	8006b44 <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	330c      	adds	r3, #12
 8006b28:	7812      	ldrb	r2, [r2, #0]
 8006b2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b30:	1c5a      	adds	r2, r3, #1
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d148      	bne.n	8006be8 <HAL_SPI_TransmitReceive+0x3c0>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d042      	beq.n	8006be8 <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d923      	bls.n	8006bb6 <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b78:	b292      	uxth	r2, r2
 8006b7a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b80:	1c9a      	adds	r2, r3, #2
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	3b02      	subs	r3, #2
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d81f      	bhi.n	8006be4 <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bb2:	605a      	str	r2, [r3, #4]
 8006bb4:	e016      	b.n	8006be4 <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f103 020c 	add.w	r2, r3, #12
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	7812      	ldrb	r2, [r2, #0]
 8006bc4:	b2d2      	uxtb	r2, r2
 8006bc6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bcc:	1c5a      	adds	r2, r3, #1
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006be4:	2301      	movs	r3, #1
 8006be6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006be8:	f7fa ff6a 	bl	8001ac0 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d803      	bhi.n	8006c00 <HAL_SPI_TransmitReceive+0x3d8>
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bfe:	d102      	bne.n	8006c06 <HAL_SPI_TransmitReceive+0x3de>
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d103      	bne.n	8006c0e <HAL_SPI_TransmitReceive+0x3e6>
      {
        errorcode = HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006c0c:	e01c      	b.n	8006c48 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f47f af5b 	bne.w	8006ad0 <HAL_SPI_TransmitReceive+0x2a8>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f47f af54 	bne.w	8006ad0 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c28:	69fa      	ldr	r2, [r7, #28]
 8006c2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 f93d 	bl	8006eac <SPI_EndRxTxTransaction>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d006      	beq.n	8006c46 <HAL_SPI_TransmitReceive+0x41e>
  {
    errorcode = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2220      	movs	r2, #32
 8006c42:	661a      	str	r2, [r3, #96]	; 0x60
 8006c44:	e000      	b.n	8006c48 <HAL_SPI_TransmitReceive+0x420>
  }

error :
 8006c46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006c58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3728      	adds	r7, #40	; 0x28
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c72:	b2db      	uxtb	r3, r3
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	603b      	str	r3, [r7, #0]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c90:	f7fa ff16 	bl	8001ac0 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	1a9b      	subs	r3, r3, r2
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ca0:	f7fa ff0e 	bl	8001ac0 <HAL_GetTick>
 8006ca4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ca6:	4b39      	ldr	r3, [pc, #228]	; (8006d8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	015b      	lsls	r3, r3, #5
 8006cac:	0d1b      	lsrs	r3, r3, #20
 8006cae:	69fa      	ldr	r2, [r7, #28]
 8006cb0:	fb02 f303 	mul.w	r3, r2, r3
 8006cb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cb6:	e054      	b.n	8006d62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cbe:	d050      	beq.n	8006d62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006cc0:	f7fa fefe 	bl	8001ac0 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	69fa      	ldr	r2, [r7, #28]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d902      	bls.n	8006cd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d13d      	bne.n	8006d52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ce4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cee:	d111      	bne.n	8006d14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cf8:	d004      	beq.n	8006d04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d02:	d107      	bne.n	8006d14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d1c:	d10f      	bne.n	8006d3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e017      	b.n	8006d82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	689a      	ldr	r2, [r3, #8]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	bf0c      	ite	eq
 8006d72:	2301      	moveq	r3, #1
 8006d74:	2300      	movne	r3, #0
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	461a      	mov	r2, r3
 8006d7a:	79fb      	ldrb	r3, [r7, #7]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d19b      	bne.n	8006cb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3720      	adds	r7, #32
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	2000006c 	.word	0x2000006c

08006d90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b088      	sub	sp, #32
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d9e:	f7fa fe8f 	bl	8001ac0 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	1a9b      	subs	r3, r3, r2
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	4413      	add	r3, r2
 8006dac:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006dae:	f7fa fe87 	bl	8001ac0 <HAL_GetTick>
 8006db2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006db4:	4b3c      	ldr	r3, [pc, #240]	; (8006ea8 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	4613      	mov	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	00da      	lsls	r2, r3, #3
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	0d1b      	lsrs	r3, r3, #20
 8006dc4:	69fa      	ldr	r2, [r7, #28]
 8006dc6:	fb02 f303 	mul.w	r3, r2, r3
 8006dca:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8006dcc:	e05f      	b.n	8006e8e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006dd4:	d106      	bne.n	8006de4 <SPI_WaitFifoStateUntilTimeout+0x54>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d103      	bne.n	8006de4 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	330c      	adds	r3, #12
 8006de2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dea:	d050      	beq.n	8006e8e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006dec:	f7fa fe68 	bl	8001ac0 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	69fa      	ldr	r2, [r7, #28]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d902      	bls.n	8006e02 <SPI_WaitFifoStateUntilTimeout+0x72>
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d13d      	bne.n	8006e7e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e1a:	d111      	bne.n	8006e40 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e24:	d004      	beq.n	8006e30 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e2e:	d107      	bne.n	8006e40 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e48:	d10f      	bne.n	8006e6a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e010      	b.n	8006ea0 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	4013      	ands	r3, r2
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d197      	bne.n	8006dce <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3720      	adds	r7, #32
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	2000006c 	.word	0x2000006c

08006eac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f7ff ff63 	bl	8006d90 <SPI_WaitFifoStateUntilTimeout>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d007      	beq.n	8006ee0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed4:	f043 0220 	orr.w	r2, r3, #32
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e027      	b.n	8006f30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	2180      	movs	r1, #128	; 0x80
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f7ff fec8 	bl	8006c80 <SPI_WaitFlagStateUntilTimeout>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d007      	beq.n	8006f06 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006efa:	f043 0220 	orr.w	r2, r3, #32
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e014      	b.n	8006f30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f7ff ff3c 	bl	8006d90 <SPI_WaitFifoStateUntilTimeout>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d007      	beq.n	8006f2e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f22:	f043 0220 	orr.w	r2, r3, #32
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e000      	b.n	8006f30 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006f48:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006f4c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b085      	sub	sp, #20
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006f6e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006f72:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	43db      	mvns	r3, r3
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	4013      	ands	r3, r2
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	f107 0014 	add.w	r0, r7, #20
 8006faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	b004      	add	sp, #16
 8006fdc:	4770      	bx	lr
	...

08006fe0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b09b      	sub	sp, #108	; 0x6c
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4413      	add	r3, r2
 8006ffa:	881b      	ldrh	r3, [r3, #0]
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007006:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	78db      	ldrb	r3, [r3, #3]
 800700e:	2b03      	cmp	r3, #3
 8007010:	d81f      	bhi.n	8007052 <USB_ActivateEndpoint+0x72>
 8007012:	a201      	add	r2, pc, #4	; (adr r2, 8007018 <USB_ActivateEndpoint+0x38>)
 8007014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007018:	08007029 	.word	0x08007029
 800701c:	08007045 	.word	0x08007045
 8007020:	0800705b 	.word	0x0800705b
 8007024:	08007037 	.word	0x08007037
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007028:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800702c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007030:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007034:	e012      	b.n	800705c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007036:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800703a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800703e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007042:	e00b      	b.n	800705c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007044:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007048:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800704c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007050:	e004      	b.n	800705c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007058:	e000      	b.n	800705c <USB_ActivateEndpoint+0x7c>
      break;
 800705a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	441a      	add	r2, r3
 8007066:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800706a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800706e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707a:	b29b      	uxth	r3, r3
 800707c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	b21b      	sxth	r3, r3
 800708e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007096:	b21a      	sxth	r2, r3
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	b21b      	sxth	r3, r3
 800709e:	4313      	orrs	r3, r2
 80070a0:	b21b      	sxth	r3, r3
 80070a2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	441a      	add	r2, r3
 80070b0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80070b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	7b1b      	ldrb	r3, [r3, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f040 8149 	bne.w	8007364 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	785b      	ldrb	r3, [r3, #1]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 8084 	beq.w	80071e4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	617b      	str	r3, [r7, #20]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	4413      	add	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	011a      	lsls	r2, r3, #4
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070fe:	613b      	str	r3, [r7, #16]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	88db      	ldrh	r3, [r3, #6]
 8007104:	085b      	lsrs	r3, r3, #1
 8007106:	b29b      	uxth	r3, r3
 8007108:	005b      	lsls	r3, r3, #1
 800710a:	b29a      	uxth	r2, r3
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	881b      	ldrh	r3, [r3, #0]
 800711c:	81fb      	strh	r3, [r7, #14]
 800711e:	89fb      	ldrh	r3, [r7, #14]
 8007120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007124:	2b00      	cmp	r3, #0
 8007126:	d01b      	beq.n	8007160 <USB_ActivateEndpoint+0x180>
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b29b      	uxth	r3, r3
 8007136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800713a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713e:	81bb      	strh	r3, [r7, #12]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	441a      	add	r2, r3
 800714a:	89bb      	ldrh	r3, [r7, #12]
 800714c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007158:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800715c:	b29b      	uxth	r3, r3
 800715e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	78db      	ldrb	r3, [r3, #3]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d020      	beq.n	80071aa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	b29b      	uxth	r3, r3
 8007176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800717a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800717e:	813b      	strh	r3, [r7, #8]
 8007180:	893b      	ldrh	r3, [r7, #8]
 8007182:	f083 0320 	eor.w	r3, r3, #32
 8007186:	813b      	strh	r3, [r7, #8]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	441a      	add	r2, r3
 8007192:	893b      	ldrh	r3, [r7, #8]
 8007194:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007198:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800719c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	8013      	strh	r3, [r2, #0]
 80071a8:	e27f      	b.n	80076aa <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071c0:	817b      	strh	r3, [r7, #10]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	441a      	add	r2, r3
 80071cc:	897b      	ldrh	r3, [r7, #10]
 80071ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071de:	b29b      	uxth	r3, r3
 80071e0:	8013      	strh	r3, [r2, #0]
 80071e2:	e262      	b.n	80076aa <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	461a      	mov	r2, r3
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	4413      	add	r3, r2
 80071f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	011a      	lsls	r2, r3, #4
 80071fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007200:	4413      	add	r3, r2
 8007202:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007206:	62bb      	str	r3, [r7, #40]	; 0x28
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	88db      	ldrh	r3, [r3, #6]
 800720c:	085b      	lsrs	r3, r3, #1
 800720e:	b29b      	uxth	r3, r3
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	b29a      	uxth	r2, r3
 8007214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007216:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	627b      	str	r3, [r7, #36]	; 0x24
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007222:	b29b      	uxth	r3, r3
 8007224:	461a      	mov	r2, r3
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	4413      	add	r3, r2
 800722a:	627b      	str	r3, [r7, #36]	; 0x24
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	011a      	lsls	r2, r3, #4
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	4413      	add	r3, r2
 8007236:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800723a:	623b      	str	r3, [r7, #32]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d112      	bne.n	800726a <USB_ActivateEndpoint+0x28a>
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	881b      	ldrh	r3, [r3, #0]
 8007248:	b29b      	uxth	r3, r3
 800724a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800724e:	b29a      	uxth	r2, r3
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	801a      	strh	r2, [r3, #0]
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	b29b      	uxth	r3, r3
 800725a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800725e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007262:	b29a      	uxth	r2, r3
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	801a      	strh	r2, [r3, #0]
 8007268:	e02f      	b.n	80072ca <USB_ActivateEndpoint+0x2ea>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	2b3e      	cmp	r3, #62	; 0x3e
 8007270:	d813      	bhi.n	800729a <USB_ActivateEndpoint+0x2ba>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	085b      	lsrs	r3, r3, #1
 8007278:	663b      	str	r3, [r7, #96]	; 0x60
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <USB_ActivateEndpoint+0x2ac>
 8007286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007288:	3301      	adds	r3, #1
 800728a:	663b      	str	r3, [r7, #96]	; 0x60
 800728c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800728e:	b29b      	uxth	r3, r3
 8007290:	029b      	lsls	r3, r3, #10
 8007292:	b29a      	uxth	r2, r3
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	801a      	strh	r2, [r3, #0]
 8007298:	e017      	b.n	80072ca <USB_ActivateEndpoint+0x2ea>
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	095b      	lsrs	r3, r3, #5
 80072a0:	663b      	str	r3, [r7, #96]	; 0x60
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	f003 031f 	and.w	r3, r3, #31
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d102      	bne.n	80072b4 <USB_ActivateEndpoint+0x2d4>
 80072ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072b0:	3b01      	subs	r3, #1
 80072b2:	663b      	str	r3, [r7, #96]	; 0x60
 80072b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	029b      	lsls	r3, r3, #10
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	83fb      	strh	r3, [r7, #30]
 80072d8:	8bfb      	ldrh	r3, [r7, #30]
 80072da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d01b      	beq.n	800731a <USB_ActivateEndpoint+0x33a>
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f8:	83bb      	strh	r3, [r7, #28]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	441a      	add	r2, r3
 8007304:	8bbb      	ldrh	r3, [r7, #28]
 8007306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800730a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800730e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007316:	b29b      	uxth	r3, r3
 8007318:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	b29b      	uxth	r3, r3
 8007328:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800732c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007330:	837b      	strh	r3, [r7, #26]
 8007332:	8b7b      	ldrh	r3, [r7, #26]
 8007334:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007338:	837b      	strh	r3, [r7, #26]
 800733a:	8b7b      	ldrh	r3, [r7, #26]
 800733c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007340:	837b      	strh	r3, [r7, #26]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	441a      	add	r2, r3
 800734c:	8b7b      	ldrh	r3, [r7, #26]
 800734e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800735a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800735e:	b29b      	uxth	r3, r3
 8007360:	8013      	strh	r3, [r2, #0]
 8007362:	e1a2      	b.n	80076aa <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	881b      	ldrh	r3, [r3, #0]
 8007370:	b29b      	uxth	r3, r3
 8007372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800737a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	441a      	add	r2, r3
 8007388:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800738c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007394:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800739c:	b29b      	uxth	r3, r3
 800739e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	461a      	mov	r2, r3
 80073ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073b0:	4413      	add	r3, r2
 80073b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	011a      	lsls	r2, r3, #4
 80073ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073bc:	4413      	add	r3, r2
 80073be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073c2:	657b      	str	r3, [r7, #84]	; 0x54
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	891b      	ldrh	r3, [r3, #8]
 80073c8:	085b      	lsrs	r3, r3, #1
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073d2:	801a      	strh	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	653b      	str	r3, [r7, #80]	; 0x50
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073de:	b29b      	uxth	r3, r3
 80073e0:	461a      	mov	r2, r3
 80073e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e4:	4413      	add	r3, r2
 80073e6:	653b      	str	r3, [r7, #80]	; 0x50
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	011a      	lsls	r2, r3, #4
 80073ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80073f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	895b      	ldrh	r3, [r3, #10]
 80073fc:	085b      	lsrs	r3, r3, #1
 80073fe:	b29b      	uxth	r3, r3
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	b29a      	uxth	r2, r3
 8007404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007406:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	785b      	ldrb	r3, [r3, #1]
 800740c:	2b00      	cmp	r3, #0
 800740e:	f040 8091 	bne.w	8007534 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007420:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d01b      	beq.n	8007462 <USB_ActivateEndpoint+0x482>
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b29b      	uxth	r3, r3
 8007438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800743c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007440:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	441a      	add	r2, r3
 800744c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800744e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007456:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800745a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800745e:	b29b      	uxth	r3, r3
 8007460:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	873b      	strh	r3, [r7, #56]	; 0x38
 8007470:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007476:	2b00      	cmp	r3, #0
 8007478:	d01b      	beq.n	80074b2 <USB_ActivateEndpoint+0x4d2>
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	881b      	ldrh	r3, [r3, #0]
 8007486:	b29b      	uxth	r3, r3
 8007488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800748c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007490:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	441a      	add	r2, r3
 800749c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800749e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	b29b      	uxth	r3, r3
 80074c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074c8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80074ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80074cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074d0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80074d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80074d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074d8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	441a      	add	r2, r3
 80074e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80074e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	b29b      	uxth	r3, r3
 8007508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800750c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007510:	867b      	strh	r3, [r7, #50]	; 0x32
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	441a      	add	r2, r3
 800751c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800751e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800752a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800752e:	b29b      	uxth	r3, r3
 8007530:	8013      	strh	r3, [r2, #0]
 8007532:	e0ba      	b.n	80076aa <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007544:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d01d      	beq.n	800758c <USB_ActivateEndpoint+0x5ac>
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	b29b      	uxth	r3, r3
 800755e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007566:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	441a      	add	r2, r3
 8007574:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800757c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007580:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007588:	b29b      	uxth	r3, r3
 800758a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800759c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80075a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d01d      	beq.n	80075e4 <USB_ActivateEndpoint+0x604>
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	441a      	add	r2, r3
 80075cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80075d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	78db      	ldrb	r3, [r3, #3]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d024      	beq.n	8007636 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007602:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007606:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800760a:	f083 0320 	eor.w	r3, r3, #32
 800760e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	441a      	add	r2, r3
 800761c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800762c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007630:	b29b      	uxth	r3, r3
 8007632:	8013      	strh	r3, [r2, #0]
 8007634:	e01d      	b.n	8007672 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	b29b      	uxth	r3, r3
 8007644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800764c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	441a      	add	r2, r3
 800765a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800765e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800766a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800766e:	b29b      	uxth	r3, r3
 8007670:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	b29b      	uxth	r3, r3
 8007680:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007688:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	441a      	add	r2, r3
 8007694:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800769a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800769e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80076aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	376c      	adds	r7, #108	; 0x6c
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop

080076bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076bc:	b480      	push	{r7}
 80076be:	b08d      	sub	sp, #52	; 0x34
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	7b1b      	ldrb	r3, [r3, #12]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f040 808e 	bne.w	80077ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	785b      	ldrb	r3, [r3, #1]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d044      	beq.n	8007762 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	81bb      	strh	r3, [r7, #12]
 80076e6:	89bb      	ldrh	r3, [r7, #12]
 80076e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d01b      	beq.n	8007728 <USB_DeactivateEndpoint+0x6c>
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007706:	817b      	strh	r3, [r7, #10]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	441a      	add	r2, r3
 8007712:	897b      	ldrh	r3, [r7, #10]
 8007714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800771c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007720:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007724:	b29b      	uxth	r3, r3
 8007726:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	b29b      	uxth	r3, r3
 8007736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800773a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800773e:	813b      	strh	r3, [r7, #8]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	441a      	add	r2, r3
 800774a:	893b      	ldrh	r3, [r7, #8]
 800774c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800775c:	b29b      	uxth	r3, r3
 800775e:	8013      	strh	r3, [r2, #0]
 8007760:	e192      	b.n	8007a88 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	827b      	strh	r3, [r7, #18]
 8007770:	8a7b      	ldrh	r3, [r7, #18]
 8007772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d01b      	beq.n	80077b2 <USB_DeactivateEndpoint+0xf6>
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	b29b      	uxth	r3, r3
 8007788:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800778c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007790:	823b      	strh	r3, [r7, #16]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	441a      	add	r2, r3
 800779c:	8a3b      	ldrh	r3, [r7, #16]
 800779e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c8:	81fb      	strh	r3, [r7, #14]
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	441a      	add	r2, r3
 80077d4:	89fb      	ldrh	r3, [r7, #14]
 80077d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	8013      	strh	r3, [r2, #0]
 80077ea:	e14d      	b.n	8007a88 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	785b      	ldrb	r3, [r3, #1]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f040 80a5 	bne.w	8007940 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	843b      	strh	r3, [r7, #32]
 8007804:	8c3b      	ldrh	r3, [r7, #32]
 8007806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d01b      	beq.n	8007846 <USB_DeactivateEndpoint+0x18a>
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	b29b      	uxth	r3, r3
 800781c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007824:	83fb      	strh	r3, [r7, #30]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	441a      	add	r2, r3
 8007830:	8bfb      	ldrh	r3, [r7, #30]
 8007832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800783a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800783e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007842:	b29b      	uxth	r3, r3
 8007844:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	83bb      	strh	r3, [r7, #28]
 8007854:	8bbb      	ldrh	r3, [r7, #28]
 8007856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785a:	2b00      	cmp	r3, #0
 800785c:	d01b      	beq.n	8007896 <USB_DeactivateEndpoint+0x1da>
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007874:	837b      	strh	r3, [r7, #26]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	441a      	add	r2, r3
 8007880:	8b7b      	ldrh	r3, [r7, #26]
 8007882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800788a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800788e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007892:	b29b      	uxth	r3, r3
 8007894:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	881b      	ldrh	r3, [r3, #0]
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ac:	833b      	strh	r3, [r7, #24]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	441a      	add	r2, r3
 80078b8:	8b3b      	ldrh	r3, [r7, #24]
 80078ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4413      	add	r3, r2
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078e4:	82fb      	strh	r3, [r7, #22]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	441a      	add	r2, r3
 80078f0:	8afb      	ldrh	r3, [r7, #22]
 80078f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007902:	b29b      	uxth	r3, r3
 8007904:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4413      	add	r3, r2
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	b29b      	uxth	r3, r3
 8007914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800791c:	82bb      	strh	r3, [r7, #20]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	441a      	add	r2, r3
 8007928:	8abb      	ldrh	r3, [r7, #20]
 800792a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800792e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800793a:	b29b      	uxth	r3, r3
 800793c:	8013      	strh	r3, [r2, #0]
 800793e:	e0a3      	b.n	8007a88 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800794e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d01b      	beq.n	8007990 <USB_DeactivateEndpoint+0x2d4>
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	b29b      	uxth	r3, r3
 8007966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800796a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	441a      	add	r2, r3
 800797a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800797c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007984:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800798c:	b29b      	uxth	r3, r3
 800798e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4413      	add	r3, r2
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800799e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80079a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d01b      	beq.n	80079e0 <USB_DeactivateEndpoint+0x324>
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	881b      	ldrh	r3, [r3, #0]
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079be:	853b      	strh	r3, [r7, #40]	; 0x28
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	441a      	add	r2, r3
 80079ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80079cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079dc:	b29b      	uxth	r3, r3
 80079de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4413      	add	r3, r2
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	441a      	add	r2, r3
 8007a02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	881b      	ldrh	r3, [r3, #0]
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a2e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	441a      	add	r2, r3
 8007a3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a66:	847b      	strh	r3, [r7, #34]	; 0x22
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	441a      	add	r2, r3
 8007a72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3734      	adds	r7, #52	; 0x34
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b0c4      	sub	sp, #272	; 0x110
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	1d3b      	adds	r3, r7, #4
 8007a9e:	6018      	str	r0, [r3, #0]
 8007aa0:	463b      	mov	r3, r7
 8007aa2:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007aa4:	463b      	mov	r3, r7
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	785b      	ldrb	r3, [r3, #1]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	f040 8557 	bne.w	800855e <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007ab0:	463b      	mov	r3, r7
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	699a      	ldr	r2, [r3, #24]
 8007ab6:	463b      	mov	r3, r7
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d905      	bls.n	8007acc <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007ac0:	463b      	mov	r3, r7
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007aca:	e004      	b.n	8007ad6 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007acc:	463b      	mov	r3, r7
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007ad6:	463b      	mov	r3, r7
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	7b1b      	ldrb	r3, [r3, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d12c      	bne.n	8007b3a <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007ae0:	463b      	mov	r3, r7
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6959      	ldr	r1, [r3, #20]
 8007ae6:	463b      	mov	r3, r7
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	88da      	ldrh	r2, [r3, #6]
 8007aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	1d38      	adds	r0, r7, #4
 8007af4:	6800      	ldr	r0, [r0, #0]
 8007af6:	f001 fa1c 	bl	8008f32 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007afa:	1d3b      	adds	r3, r7, #4
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	617b      	str	r3, [r7, #20]
 8007b00:	1d3b      	adds	r3, r7, #4
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	4413      	add	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]
 8007b12:	463b      	mov	r3, r7
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	011a      	lsls	r2, r3, #4
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007b22:	f107 0310 	add.w	r3, r7, #16
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	f107 0310 	add.w	r3, r7, #16
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	801a      	strh	r2, [r3, #0]
 8007b36:	f000 bcdd 	b.w	80084f4 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007b3a:	463b      	mov	r3, r7
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	78db      	ldrb	r3, [r3, #3]
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	f040 8347 	bne.w	80081d4 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007b46:	463b      	mov	r3, r7
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6a1a      	ldr	r2, [r3, #32]
 8007b4c:	463b      	mov	r3, r7
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	f240 82eb 	bls.w	800812e <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007b58:	1d3b      	adds	r3, r7, #4
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	463b      	mov	r3, r7
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b72:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8007b76:	1d3b      	adds	r3, r7, #4
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	463b      	mov	r3, r7
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	441a      	add	r2, r3
 8007b84:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b90:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007b9c:	463b      	mov	r3, r7
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6a1a      	ldr	r2, [r3, #32]
 8007ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ba6:	1ad2      	subs	r2, r2, r3
 8007ba8:	463b      	mov	r3, r7
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007bae:	1d3b      	adds	r3, r7, #4
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	463b      	mov	r3, r7
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 8159 	beq.w	8007e7c <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007bca:	1d3b      	adds	r3, r7, #4
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	637b      	str	r3, [r7, #52]	; 0x34
 8007bd0:	463b      	mov	r3, r7
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	785b      	ldrb	r3, [r3, #1]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d164      	bne.n	8007ca4 <USB_EPStartXfer+0x20e>
 8007bda:	1d3b      	adds	r3, r7, #4
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007be0:	1d3b      	adds	r3, r7, #4
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	461a      	mov	r2, r3
 8007bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bee:	4413      	add	r3, r2
 8007bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bf2:	463b      	mov	r3, r7
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	011a      	lsls	r2, r3, #4
 8007bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d112      	bne.n	8007c32 <USB_EPStartXfer+0x19c>
 8007c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0e:	881b      	ldrh	r3, [r3, #0]
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1a:	801a      	strh	r2, [r3, #0]
 8007c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1e:	881b      	ldrh	r3, [r3, #0]
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2e:	801a      	strh	r2, [r3, #0]
 8007c30:	e054      	b.n	8007cdc <USB_EPStartXfer+0x246>
 8007c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c36:	2b3e      	cmp	r3, #62	; 0x3e
 8007c38:	d817      	bhi.n	8007c6a <USB_EPStartXfer+0x1d4>
 8007c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c3e:	085b      	lsrs	r3, r3, #1
 8007c40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d004      	beq.n	8007c5a <USB_EPStartXfer+0x1c4>
 8007c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c54:	3301      	adds	r3, #1
 8007c56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	029b      	lsls	r3, r3, #10
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c66:	801a      	strh	r2, [r3, #0]
 8007c68:	e038      	b.n	8007cdc <USB_EPStartXfer+0x246>
 8007c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c6e:	095b      	lsrs	r3, r3, #5
 8007c70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c78:	f003 031f 	and.w	r3, r3, #31
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d104      	bne.n	8007c8a <USB_EPStartXfer+0x1f4>
 8007c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c84:	3b01      	subs	r3, #1
 8007c86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	029b      	lsls	r3, r3, #10
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca0:	801a      	strh	r2, [r3, #0]
 8007ca2:	e01b      	b.n	8007cdc <USB_EPStartXfer+0x246>
 8007ca4:	463b      	mov	r3, r7
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	785b      	ldrb	r3, [r3, #1]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d116      	bne.n	8007cdc <USB_EPStartXfer+0x246>
 8007cae:	1d3b      	adds	r3, r7, #4
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	461a      	mov	r2, r3
 8007cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cbc:	4413      	add	r3, r2
 8007cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8007cc0:	463b      	mov	r3, r7
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	011a      	lsls	r2, r3, #4
 8007cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cca:	4413      	add	r3, r2
 8007ccc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8007cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cda:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007cdc:	463b      	mov	r3, r7
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	895b      	ldrh	r3, [r3, #10]
 8007ce2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ce6:	463b      	mov	r3, r7
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6959      	ldr	r1, [r3, #20]
 8007cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007cf6:	1d38      	adds	r0, r7, #4
 8007cf8:	6800      	ldr	r0, [r0, #0]
 8007cfa:	f001 f91a 	bl	8008f32 <USB_WritePMA>
            ep->xfer_buff += len;
 8007cfe:	463b      	mov	r3, r7
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	695a      	ldr	r2, [r3, #20]
 8007d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d08:	441a      	add	r2, r3
 8007d0a:	463b      	mov	r3, r7
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007d10:	463b      	mov	r3, r7
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6a1a      	ldr	r2, [r3, #32]
 8007d16:	463b      	mov	r3, r7
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d909      	bls.n	8007d34 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8007d20:	463b      	mov	r3, r7
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6a1a      	ldr	r2, [r3, #32]
 8007d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d2a:	1ad2      	subs	r2, r2, r3
 8007d2c:	463b      	mov	r3, r7
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	621a      	str	r2, [r3, #32]
 8007d32:	e008      	b.n	8007d46 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8007d34:	463b      	mov	r3, r7
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007d3e:	463b      	mov	r3, r7
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2200      	movs	r2, #0
 8007d44:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d46:	463b      	mov	r3, r7
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	785b      	ldrb	r3, [r3, #1]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d164      	bne.n	8007e1a <USB_EPStartXfer+0x384>
 8007d50:	1d3b      	adds	r3, r7, #4
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	61fb      	str	r3, [r7, #28]
 8007d56:	1d3b      	adds	r3, r7, #4
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	461a      	mov	r2, r3
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	4413      	add	r3, r2
 8007d66:	61fb      	str	r3, [r7, #28]
 8007d68:	463b      	mov	r3, r7
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	011a      	lsls	r2, r3, #4
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	4413      	add	r3, r2
 8007d74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d78:	61bb      	str	r3, [r7, #24]
 8007d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d112      	bne.n	8007da8 <USB_EPStartXfer+0x312>
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	801a      	strh	r2, [r3, #0]
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	801a      	strh	r2, [r3, #0]
 8007da6:	e057      	b.n	8007e58 <USB_EPStartXfer+0x3c2>
 8007da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dac:	2b3e      	cmp	r3, #62	; 0x3e
 8007dae:	d817      	bhi.n	8007de0 <USB_EPStartXfer+0x34a>
 8007db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007db4:	085b      	lsrs	r3, r3, #1
 8007db6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d004      	beq.n	8007dd0 <USB_EPStartXfer+0x33a>
 8007dc6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dca:	3301      	adds	r3, #1
 8007dcc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007dd0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	029b      	lsls	r3, r3, #10
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	801a      	strh	r2, [r3, #0]
 8007dde:	e03b      	b.n	8007e58 <USB_EPStartXfer+0x3c2>
 8007de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007de4:	095b      	lsrs	r3, r3, #5
 8007de6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dee:	f003 031f 	and.w	r3, r3, #31
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d104      	bne.n	8007e00 <USB_EPStartXfer+0x36a>
 8007df6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	029b      	lsls	r3, r3, #10
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	801a      	strh	r2, [r3, #0]
 8007e18:	e01e      	b.n	8007e58 <USB_EPStartXfer+0x3c2>
 8007e1a:	463b      	mov	r3, r7
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	785b      	ldrb	r3, [r3, #1]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d119      	bne.n	8007e58 <USB_EPStartXfer+0x3c2>
 8007e24:	1d3b      	adds	r3, r7, #4
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	627b      	str	r3, [r7, #36]	; 0x24
 8007e2a:	1d3b      	adds	r3, r7, #4
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	461a      	mov	r2, r3
 8007e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e38:	4413      	add	r3, r2
 8007e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e3c:	463b      	mov	r3, r7
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	011a      	lsls	r2, r3, #4
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	4413      	add	r3, r2
 8007e48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e4c:	623b      	str	r3, [r7, #32]
 8007e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007e58:	463b      	mov	r3, r7
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	891b      	ldrh	r3, [r3, #8]
 8007e5e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e62:	463b      	mov	r3, r7
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6959      	ldr	r1, [r3, #20]
 8007e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007e72:	1d38      	adds	r0, r7, #4
 8007e74:	6800      	ldr	r0, [r0, #0]
 8007e76:	f001 f85c 	bl	8008f32 <USB_WritePMA>
 8007e7a:	e33b      	b.n	80084f4 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e7c:	463b      	mov	r3, r7
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	785b      	ldrb	r3, [r3, #1]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d164      	bne.n	8007f50 <USB_EPStartXfer+0x4ba>
 8007e86:	1d3b      	adds	r3, r7, #4
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e8c:	1d3b      	adds	r3, r7, #4
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	461a      	mov	r2, r3
 8007e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e9a:	4413      	add	r3, r2
 8007e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e9e:	463b      	mov	r3, r7
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	011a      	lsls	r2, r3, #4
 8007ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d112      	bne.n	8007ede <USB_EPStartXfer+0x448>
 8007eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eba:	881b      	ldrh	r3, [r3, #0]
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ec6:	801a      	strh	r2, [r3, #0]
 8007ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eca:	881b      	ldrh	r3, [r3, #0]
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eda:	801a      	strh	r2, [r3, #0]
 8007edc:	e057      	b.n	8007f8e <USB_EPStartXfer+0x4f8>
 8007ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ee2:	2b3e      	cmp	r3, #62	; 0x3e
 8007ee4:	d817      	bhi.n	8007f16 <USB_EPStartXfer+0x480>
 8007ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eea:	085b      	lsrs	r3, r3, #1
 8007eec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d004      	beq.n	8007f06 <USB_EPStartXfer+0x470>
 8007efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f00:	3301      	adds	r3, #1
 8007f02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	029b      	lsls	r3, r3, #10
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f12:	801a      	strh	r2, [r3, #0]
 8007f14:	e03b      	b.n	8007f8e <USB_EPStartXfer+0x4f8>
 8007f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f1a:	095b      	lsrs	r3, r3, #5
 8007f1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f24:	f003 031f 	and.w	r3, r3, #31
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d104      	bne.n	8007f36 <USB_EPStartXfer+0x4a0>
 8007f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f30:	3b01      	subs	r3, #1
 8007f32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	029b      	lsls	r3, r3, #10
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f4c:	801a      	strh	r2, [r3, #0]
 8007f4e:	e01e      	b.n	8007f8e <USB_EPStartXfer+0x4f8>
 8007f50:	463b      	mov	r3, r7
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	785b      	ldrb	r3, [r3, #1]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d119      	bne.n	8007f8e <USB_EPStartXfer+0x4f8>
 8007f5a:	1d3b      	adds	r3, r7, #4
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	657b      	str	r3, [r7, #84]	; 0x54
 8007f60:	1d3b      	adds	r3, r7, #4
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f6e:	4413      	add	r3, r2
 8007f70:	657b      	str	r3, [r7, #84]	; 0x54
 8007f72:	463b      	mov	r3, r7
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	011a      	lsls	r2, r3, #4
 8007f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f82:	653b      	str	r3, [r7, #80]	; 0x50
 8007f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007f8e:	463b      	mov	r3, r7
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	891b      	ldrh	r3, [r3, #8]
 8007f94:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f98:	463b      	mov	r3, r7
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6959      	ldr	r1, [r3, #20]
 8007f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007fa8:	1d38      	adds	r0, r7, #4
 8007faa:	6800      	ldr	r0, [r0, #0]
 8007fac:	f000 ffc1 	bl	8008f32 <USB_WritePMA>
            ep->xfer_buff += len;
 8007fb0:	463b      	mov	r3, r7
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	695a      	ldr	r2, [r3, #20]
 8007fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fba:	441a      	add	r2, r3
 8007fbc:	463b      	mov	r3, r7
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007fc2:	463b      	mov	r3, r7
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	6a1a      	ldr	r2, [r3, #32]
 8007fc8:	463b      	mov	r3, r7
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d909      	bls.n	8007fe6 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8007fd2:	463b      	mov	r3, r7
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	6a1a      	ldr	r2, [r3, #32]
 8007fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fdc:	1ad2      	subs	r2, r2, r3
 8007fde:	463b      	mov	r3, r7
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	621a      	str	r2, [r3, #32]
 8007fe4:	e008      	b.n	8007ff8 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8007fe6:	463b      	mov	r3, r7
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6a1b      	ldr	r3, [r3, #32]
 8007fec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007ff0:	463b      	mov	r3, r7
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ff8:	1d3b      	adds	r3, r7, #4
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8007ffe:	463b      	mov	r3, r7
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	785b      	ldrb	r3, [r3, #1]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d164      	bne.n	80080d2 <USB_EPStartXfer+0x63c>
 8008008:	1d3b      	adds	r3, r7, #4
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800800e:	1d3b      	adds	r3, r7, #4
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008016:	b29b      	uxth	r3, r3
 8008018:	461a      	mov	r2, r3
 800801a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800801c:	4413      	add	r3, r2
 800801e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008020:	463b      	mov	r3, r7
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	011a      	lsls	r2, r3, #4
 8008028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800802a:	4413      	add	r3, r2
 800802c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008030:	63bb      	str	r3, [r7, #56]	; 0x38
 8008032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008036:	2b00      	cmp	r3, #0
 8008038:	d112      	bne.n	8008060 <USB_EPStartXfer+0x5ca>
 800803a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803c:	881b      	ldrh	r3, [r3, #0]
 800803e:	b29b      	uxth	r3, r3
 8008040:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008044:	b29a      	uxth	r2, r3
 8008046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008048:	801a      	strh	r2, [r3, #0]
 800804a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	b29b      	uxth	r3, r3
 8008050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008058:	b29a      	uxth	r2, r3
 800805a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805c:	801a      	strh	r2, [r3, #0]
 800805e:	e054      	b.n	800810a <USB_EPStartXfer+0x674>
 8008060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008064:	2b3e      	cmp	r3, #62	; 0x3e
 8008066:	d817      	bhi.n	8008098 <USB_EPStartXfer+0x602>
 8008068:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800806c:	085b      	lsrs	r3, r3, #1
 800806e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008076:	f003 0301 	and.w	r3, r3, #1
 800807a:	2b00      	cmp	r3, #0
 800807c:	d004      	beq.n	8008088 <USB_EPStartXfer+0x5f2>
 800807e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008082:	3301      	adds	r3, #1
 8008084:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008088:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800808c:	b29b      	uxth	r3, r3
 800808e:	029b      	lsls	r3, r3, #10
 8008090:	b29a      	uxth	r2, r3
 8008092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008094:	801a      	strh	r2, [r3, #0]
 8008096:	e038      	b.n	800810a <USB_EPStartXfer+0x674>
 8008098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800809c:	095b      	lsrs	r3, r3, #5
 800809e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80080a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080a6:	f003 031f 	and.w	r3, r3, #31
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d104      	bne.n	80080b8 <USB_EPStartXfer+0x622>
 80080ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080b2:	3b01      	subs	r3, #1
 80080b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80080b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080bc:	b29b      	uxth	r3, r3
 80080be:	029b      	lsls	r3, r3, #10
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ce:	801a      	strh	r2, [r3, #0]
 80080d0:	e01b      	b.n	800810a <USB_EPStartXfer+0x674>
 80080d2:	463b      	mov	r3, r7
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	785b      	ldrb	r3, [r3, #1]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d116      	bne.n	800810a <USB_EPStartXfer+0x674>
 80080dc:	1d3b      	adds	r3, r7, #4
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	461a      	mov	r2, r3
 80080e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080ea:	4413      	add	r3, r2
 80080ec:	647b      	str	r3, [r7, #68]	; 0x44
 80080ee:	463b      	mov	r3, r7
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	011a      	lsls	r2, r3, #4
 80080f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080f8:	4413      	add	r3, r2
 80080fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080fe:	643b      	str	r3, [r7, #64]	; 0x40
 8008100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008104:	b29a      	uxth	r2, r3
 8008106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008108:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800810a:	463b      	mov	r3, r7
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	895b      	ldrh	r3, [r3, #10]
 8008110:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008114:	463b      	mov	r3, r7
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6959      	ldr	r1, [r3, #20]
 800811a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800811e:	b29b      	uxth	r3, r3
 8008120:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008124:	1d38      	adds	r0, r7, #4
 8008126:	6800      	ldr	r0, [r0, #0]
 8008128:	f000 ff03 	bl	8008f32 <USB_WritePMA>
 800812c:	e1e2      	b.n	80084f4 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800812e:	463b      	mov	r3, r7
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	6a1b      	ldr	r3, [r3, #32]
 8008134:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008138:	1d3b      	adds	r3, r7, #4
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	463b      	mov	r3, r7
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	b29b      	uxth	r3, r3
 800814a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800814e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008152:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008156:	1d3b      	adds	r3, r7, #4
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	463b      	mov	r3, r7
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	441a      	add	r2, r3
 8008164:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800816c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008178:	b29b      	uxth	r3, r3
 800817a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800817c:	1d3b      	adds	r3, r7, #4
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	663b      	str	r3, [r7, #96]	; 0x60
 8008182:	1d3b      	adds	r3, r7, #4
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800818a:	b29b      	uxth	r3, r3
 800818c:	461a      	mov	r2, r3
 800818e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008190:	4413      	add	r3, r2
 8008192:	663b      	str	r3, [r7, #96]	; 0x60
 8008194:	463b      	mov	r3, r7
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	011a      	lsls	r2, r3, #4
 800819c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800819e:	4413      	add	r3, r2
 80081a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80081b0:	463b      	mov	r3, r7
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	891b      	ldrh	r3, [r3, #8]
 80081b6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081ba:	463b      	mov	r3, r7
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6959      	ldr	r1, [r3, #20]
 80081c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80081ca:	1d38      	adds	r0, r7, #4
 80081cc:	6800      	ldr	r0, [r0, #0]
 80081ce:	f000 feb0 	bl	8008f32 <USB_WritePMA>
 80081d2:	e18f      	b.n	80084f4 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80081d4:	1d3b      	adds	r3, r7, #4
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	463b      	mov	r3, r7
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f000 808f 	beq.w	800830e <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80081f0:	1d3b      	adds	r3, r7, #4
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80081f6:	463b      	mov	r3, r7
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	785b      	ldrb	r3, [r3, #1]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d164      	bne.n	80082ca <USB_EPStartXfer+0x834>
 8008200:	1d3b      	adds	r3, r7, #4
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	673b      	str	r3, [r7, #112]	; 0x70
 8008206:	1d3b      	adds	r3, r7, #4
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800820e:	b29b      	uxth	r3, r3
 8008210:	461a      	mov	r2, r3
 8008212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008214:	4413      	add	r3, r2
 8008216:	673b      	str	r3, [r7, #112]	; 0x70
 8008218:	463b      	mov	r3, r7
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	011a      	lsls	r2, r3, #4
 8008220:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008222:	4413      	add	r3, r2
 8008224:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008228:	66fb      	str	r3, [r7, #108]	; 0x6c
 800822a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800822e:	2b00      	cmp	r3, #0
 8008230:	d112      	bne.n	8008258 <USB_EPStartXfer+0x7c2>
 8008232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	b29b      	uxth	r3, r3
 8008238:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800823c:	b29a      	uxth	r2, r3
 800823e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008240:	801a      	strh	r2, [r3, #0]
 8008242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	b29b      	uxth	r3, r3
 8008248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800824c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008250:	b29a      	uxth	r2, r3
 8008252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008254:	801a      	strh	r2, [r3, #0]
 8008256:	e054      	b.n	8008302 <USB_EPStartXfer+0x86c>
 8008258:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800825c:	2b3e      	cmp	r3, #62	; 0x3e
 800825e:	d817      	bhi.n	8008290 <USB_EPStartXfer+0x7fa>
 8008260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008264:	085b      	lsrs	r3, r3, #1
 8008266:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800826a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	2b00      	cmp	r3, #0
 8008274:	d004      	beq.n	8008280 <USB_EPStartXfer+0x7ea>
 8008276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800827a:	3301      	adds	r3, #1
 800827c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008284:	b29b      	uxth	r3, r3
 8008286:	029b      	lsls	r3, r3, #10
 8008288:	b29a      	uxth	r2, r3
 800828a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800828c:	801a      	strh	r2, [r3, #0]
 800828e:	e038      	b.n	8008302 <USB_EPStartXfer+0x86c>
 8008290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008294:	095b      	lsrs	r3, r3, #5
 8008296:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800829a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800829e:	f003 031f 	and.w	r3, r3, #31
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d104      	bne.n	80082b0 <USB_EPStartXfer+0x81a>
 80082a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082aa:	3b01      	subs	r3, #1
 80082ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80082b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	029b      	lsls	r3, r3, #10
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082c6:	801a      	strh	r2, [r3, #0]
 80082c8:	e01b      	b.n	8008302 <USB_EPStartXfer+0x86c>
 80082ca:	463b      	mov	r3, r7
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	785b      	ldrb	r3, [r3, #1]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d116      	bne.n	8008302 <USB_EPStartXfer+0x86c>
 80082d4:	1d3b      	adds	r3, r7, #4
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082dc:	b29b      	uxth	r3, r3
 80082de:	461a      	mov	r2, r3
 80082e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082e2:	4413      	add	r3, r2
 80082e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80082e6:	463b      	mov	r3, r7
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	011a      	lsls	r2, r3, #4
 80082ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082f0:	4413      	add	r3, r2
 80082f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082f6:	677b      	str	r3, [r7, #116]	; 0x74
 80082f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008300:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008302:	463b      	mov	r3, r7
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	895b      	ldrh	r3, [r3, #10]
 8008308:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800830c:	e097      	b.n	800843e <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800830e:	463b      	mov	r3, r7
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	785b      	ldrb	r3, [r3, #1]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d168      	bne.n	80083ea <USB_EPStartXfer+0x954>
 8008318:	1d3b      	adds	r3, r7, #4
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008320:	1d3b      	adds	r3, r7, #4
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008328:	b29b      	uxth	r3, r3
 800832a:	461a      	mov	r2, r3
 800832c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008330:	4413      	add	r3, r2
 8008332:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008336:	463b      	mov	r3, r7
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	011a      	lsls	r2, r3, #4
 800833e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008342:	4413      	add	r3, r2
 8008344:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008348:	67fb      	str	r3, [r7, #124]	; 0x7c
 800834a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800834e:	2b00      	cmp	r3, #0
 8008350:	d112      	bne.n	8008378 <USB_EPStartXfer+0x8e2>
 8008352:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008354:	881b      	ldrh	r3, [r3, #0]
 8008356:	b29b      	uxth	r3, r3
 8008358:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800835c:	b29a      	uxth	r2, r3
 800835e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008360:	801a      	strh	r2, [r3, #0]
 8008362:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008364:	881b      	ldrh	r3, [r3, #0]
 8008366:	b29b      	uxth	r3, r3
 8008368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800836c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008370:	b29a      	uxth	r2, r3
 8008372:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008374:	801a      	strh	r2, [r3, #0]
 8008376:	e05d      	b.n	8008434 <USB_EPStartXfer+0x99e>
 8008378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800837c:	2b3e      	cmp	r3, #62	; 0x3e
 800837e:	d817      	bhi.n	80083b0 <USB_EPStartXfer+0x91a>
 8008380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008384:	085b      	lsrs	r3, r3, #1
 8008386:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800838a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d004      	beq.n	80083a0 <USB_EPStartXfer+0x90a>
 8008396:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800839a:	3301      	adds	r3, #1
 800839c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80083a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	029b      	lsls	r3, r3, #10
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80083ac:	801a      	strh	r2, [r3, #0]
 80083ae:	e041      	b.n	8008434 <USB_EPStartXfer+0x99e>
 80083b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083b4:	095b      	lsrs	r3, r3, #5
 80083b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80083ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083be:	f003 031f 	and.w	r3, r3, #31
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d104      	bne.n	80083d0 <USB_EPStartXfer+0x93a>
 80083c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80083ca:	3b01      	subs	r3, #1
 80083cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80083d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	029b      	lsls	r3, r3, #10
 80083d8:	b29b      	uxth	r3, r3
 80083da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80083e6:	801a      	strh	r2, [r3, #0]
 80083e8:	e024      	b.n	8008434 <USB_EPStartXfer+0x99e>
 80083ea:	463b      	mov	r3, r7
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	785b      	ldrb	r3, [r3, #1]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d11f      	bne.n	8008434 <USB_EPStartXfer+0x99e>
 80083f4:	1d3b      	adds	r3, r7, #4
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80083fc:	1d3b      	adds	r3, r7, #4
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008404:	b29b      	uxth	r3, r3
 8008406:	461a      	mov	r2, r3
 8008408:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800840c:	4413      	add	r3, r2
 800840e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008412:	463b      	mov	r3, r7
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	011a      	lsls	r2, r3, #4
 800841a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800841e:	4413      	add	r3, r2
 8008420:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800842c:	b29a      	uxth	r2, r3
 800842e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008432:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008434:	463b      	mov	r3, r7
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	891b      	ldrh	r3, [r3, #8]
 800843a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800843e:	463b      	mov	r3, r7
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	6959      	ldr	r1, [r3, #20]
 8008444:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008448:	b29b      	uxth	r3, r3
 800844a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800844e:	1d38      	adds	r0, r7, #4
 8008450:	6800      	ldr	r0, [r0, #0]
 8008452:	f000 fd6e 	bl	8008f32 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008456:	463b      	mov	r3, r7
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	785b      	ldrb	r3, [r3, #1]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d122      	bne.n	80084a6 <USB_EPStartXfer+0xa10>
 8008460:	1d3b      	adds	r3, r7, #4
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	463b      	mov	r3, r7
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	881b      	ldrh	r3, [r3, #0]
 8008470:	b29b      	uxth	r3, r3
 8008472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800847a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800847e:	1d3b      	adds	r3, r7, #4
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	463b      	mov	r3, r7
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	441a      	add	r2, r3
 800848c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8008490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800849c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	8013      	strh	r3, [r2, #0]
 80084a4:	e026      	b.n	80084f4 <USB_EPStartXfer+0xa5e>
 80084a6:	463b      	mov	r3, r7
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	785b      	ldrb	r3, [r3, #1]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d121      	bne.n	80084f4 <USB_EPStartXfer+0xa5e>
 80084b0:	1d3b      	adds	r3, r7, #4
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	463b      	mov	r3, r7
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	881b      	ldrh	r3, [r3, #0]
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ca:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80084ce:	1d3b      	adds	r3, r7, #4
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	463b      	mov	r3, r7
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	441a      	add	r2, r3
 80084dc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80084e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80084f4:	1d3b      	adds	r3, r7, #4
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	463b      	mov	r3, r7
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	b29b      	uxth	r3, r3
 8008506:	f107 020e 	add.w	r2, r7, #14
 800850a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800850e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008512:	8013      	strh	r3, [r2, #0]
 8008514:	f107 030e 	add.w	r3, r7, #14
 8008518:	f107 020e 	add.w	r2, r7, #14
 800851c:	8812      	ldrh	r2, [r2, #0]
 800851e:	f082 0210 	eor.w	r2, r2, #16
 8008522:	801a      	strh	r2, [r3, #0]
 8008524:	f107 030e 	add.w	r3, r7, #14
 8008528:	f107 020e 	add.w	r2, r7, #14
 800852c:	8812      	ldrh	r2, [r2, #0]
 800852e:	f082 0220 	eor.w	r2, r2, #32
 8008532:	801a      	strh	r2, [r3, #0]
 8008534:	1d3b      	adds	r3, r7, #4
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	463b      	mov	r3, r7
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	441a      	add	r2, r3
 8008542:	f107 030e 	add.w	r3, r7, #14
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800854c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008558:	b29b      	uxth	r3, r3
 800855a:	8013      	strh	r3, [r2, #0]
 800855c:	e3b5      	b.n	8008cca <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800855e:	463b      	mov	r3, r7
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	7b1b      	ldrb	r3, [r3, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	f040 8090 	bne.w	800868a <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800856a:	463b      	mov	r3, r7
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	699a      	ldr	r2, [r3, #24]
 8008570:	463b      	mov	r3, r7
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	429a      	cmp	r2, r3
 8008578:	d90e      	bls.n	8008598 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 800857a:	463b      	mov	r3, r7
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8008584:	463b      	mov	r3, r7
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	699a      	ldr	r2, [r3, #24]
 800858a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800858e:	1ad2      	subs	r2, r2, r3
 8008590:	463b      	mov	r3, r7
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	619a      	str	r2, [r3, #24]
 8008596:	e008      	b.n	80085aa <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8008598:	463b      	mov	r3, r7
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80085a2:	463b      	mov	r3, r7
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2200      	movs	r2, #0
 80085a8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80085aa:	1d3b      	adds	r3, r7, #4
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80085b2:	1d3b      	adds	r3, r7, #4
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	461a      	mov	r2, r3
 80085be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085c2:	4413      	add	r3, r2
 80085c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80085c8:	463b      	mov	r3, r7
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	011a      	lsls	r2, r3, #4
 80085d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085d4:	4413      	add	r3, r2
 80085d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80085de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d116      	bne.n	8008614 <USB_EPStartXfer+0xb7e>
 80085e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085ea:	881b      	ldrh	r3, [r3, #0]
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085f8:	801a      	strh	r2, [r3, #0]
 80085fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	b29b      	uxth	r3, r3
 8008602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800860a:	b29a      	uxth	r2, r3
 800860c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008610:	801a      	strh	r2, [r3, #0]
 8008612:	e32c      	b.n	8008c6e <USB_EPStartXfer+0x11d8>
 8008614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008618:	2b3e      	cmp	r3, #62	; 0x3e
 800861a:	d818      	bhi.n	800864e <USB_EPStartXfer+0xbb8>
 800861c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008620:	085b      	lsrs	r3, r3, #1
 8008622:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008626:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	2b00      	cmp	r3, #0
 8008630:	d004      	beq.n	800863c <USB_EPStartXfer+0xba6>
 8008632:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008636:	3301      	adds	r3, #1
 8008638:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800863c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008640:	b29b      	uxth	r3, r3
 8008642:	029b      	lsls	r3, r3, #10
 8008644:	b29a      	uxth	r2, r3
 8008646:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800864a:	801a      	strh	r2, [r3, #0]
 800864c:	e30f      	b.n	8008c6e <USB_EPStartXfer+0x11d8>
 800864e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008652:	095b      	lsrs	r3, r3, #5
 8008654:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800865c:	f003 031f 	and.w	r3, r3, #31
 8008660:	2b00      	cmp	r3, #0
 8008662:	d104      	bne.n	800866e <USB_EPStartXfer+0xbd8>
 8008664:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008668:	3b01      	subs	r3, #1
 800866a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800866e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008672:	b29b      	uxth	r3, r3
 8008674:	029b      	lsls	r3, r3, #10
 8008676:	b29b      	uxth	r3, r3
 8008678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800867c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008680:	b29a      	uxth	r2, r3
 8008682:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008686:	801a      	strh	r2, [r3, #0]
 8008688:	e2f1      	b.n	8008c6e <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800868a:	463b      	mov	r3, r7
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	78db      	ldrb	r3, [r3, #3]
 8008690:	2b02      	cmp	r3, #2
 8008692:	f040 818f 	bne.w	80089b4 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008696:	463b      	mov	r3, r7
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	785b      	ldrb	r3, [r3, #1]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d175      	bne.n	800878c <USB_EPStartXfer+0xcf6>
 80086a0:	1d3b      	adds	r3, r7, #4
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086a8:	1d3b      	adds	r3, r7, #4
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	461a      	mov	r2, r3
 80086b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80086b8:	4413      	add	r3, r2
 80086ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086be:	463b      	mov	r3, r7
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	011a      	lsls	r2, r3, #4
 80086c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80086ca:	4413      	add	r3, r2
 80086cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086d4:	463b      	mov	r3, r7
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d116      	bne.n	800870c <USB_EPStartXfer+0xc76>
 80086de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086f0:	801a      	strh	r2, [r3, #0]
 80086f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086f6:	881b      	ldrh	r3, [r3, #0]
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008702:	b29a      	uxth	r2, r3
 8008704:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008708:	801a      	strh	r2, [r3, #0]
 800870a:	e065      	b.n	80087d8 <USB_EPStartXfer+0xd42>
 800870c:	463b      	mov	r3, r7
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	2b3e      	cmp	r3, #62	; 0x3e
 8008714:	d81a      	bhi.n	800874c <USB_EPStartXfer+0xcb6>
 8008716:	463b      	mov	r3, r7
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	085b      	lsrs	r3, r3, #1
 800871e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008722:	463b      	mov	r3, r7
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	f003 0301 	and.w	r3, r3, #1
 800872c:	2b00      	cmp	r3, #0
 800872e:	d004      	beq.n	800873a <USB_EPStartXfer+0xca4>
 8008730:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008734:	3301      	adds	r3, #1
 8008736:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800873a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800873e:	b29b      	uxth	r3, r3
 8008740:	029b      	lsls	r3, r3, #10
 8008742:	b29a      	uxth	r2, r3
 8008744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008748:	801a      	strh	r2, [r3, #0]
 800874a:	e045      	b.n	80087d8 <USB_EPStartXfer+0xd42>
 800874c:	463b      	mov	r3, r7
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	095b      	lsrs	r3, r3, #5
 8008754:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008758:	463b      	mov	r3, r7
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	f003 031f 	and.w	r3, r3, #31
 8008762:	2b00      	cmp	r3, #0
 8008764:	d104      	bne.n	8008770 <USB_EPStartXfer+0xcda>
 8008766:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800876a:	3b01      	subs	r3, #1
 800876c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008770:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008774:	b29b      	uxth	r3, r3
 8008776:	029b      	lsls	r3, r3, #10
 8008778:	b29b      	uxth	r3, r3
 800877a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800877e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008782:	b29a      	uxth	r2, r3
 8008784:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008788:	801a      	strh	r2, [r3, #0]
 800878a:	e025      	b.n	80087d8 <USB_EPStartXfer+0xd42>
 800878c:	463b      	mov	r3, r7
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	785b      	ldrb	r3, [r3, #1]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d120      	bne.n	80087d8 <USB_EPStartXfer+0xd42>
 8008796:	1d3b      	adds	r3, r7, #4
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800879e:	1d3b      	adds	r3, r7, #4
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	461a      	mov	r2, r3
 80087aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087ae:	4413      	add	r3, r2
 80087b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087b4:	463b      	mov	r3, r7
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	011a      	lsls	r2, r3, #4
 80087bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087c0:	4413      	add	r3, r2
 80087c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087ca:	463b      	mov	r3, r7
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087d6:	801a      	strh	r2, [r3, #0]
 80087d8:	1d3b      	adds	r3, r7, #4
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80087e0:	463b      	mov	r3, r7
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	785b      	ldrb	r3, [r3, #1]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d175      	bne.n	80088d6 <USB_EPStartXfer+0xe40>
 80087ea:	1d3b      	adds	r3, r7, #4
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80087f2:	1d3b      	adds	r3, r7, #4
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	461a      	mov	r2, r3
 80087fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008802:	4413      	add	r3, r2
 8008804:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008808:	463b      	mov	r3, r7
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	011a      	lsls	r2, r3, #4
 8008810:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008814:	4413      	add	r3, r2
 8008816:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800881a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800881e:	463b      	mov	r3, r7
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d116      	bne.n	8008856 <USB_EPStartXfer+0xdc0>
 8008828:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	b29b      	uxth	r3, r3
 8008830:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008834:	b29a      	uxth	r2, r3
 8008836:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800883a:	801a      	strh	r2, [r3, #0]
 800883c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008840:	881b      	ldrh	r3, [r3, #0]
 8008842:	b29b      	uxth	r3, r3
 8008844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800884c:	b29a      	uxth	r2, r3
 800884e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008852:	801a      	strh	r2, [r3, #0]
 8008854:	e061      	b.n	800891a <USB_EPStartXfer+0xe84>
 8008856:	463b      	mov	r3, r7
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	2b3e      	cmp	r3, #62	; 0x3e
 800885e:	d81a      	bhi.n	8008896 <USB_EPStartXfer+0xe00>
 8008860:	463b      	mov	r3, r7
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	085b      	lsrs	r3, r3, #1
 8008868:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800886c:	463b      	mov	r3, r7
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	2b00      	cmp	r3, #0
 8008878:	d004      	beq.n	8008884 <USB_EPStartXfer+0xdee>
 800887a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800887e:	3301      	adds	r3, #1
 8008880:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008888:	b29b      	uxth	r3, r3
 800888a:	029b      	lsls	r3, r3, #10
 800888c:	b29a      	uxth	r2, r3
 800888e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008892:	801a      	strh	r2, [r3, #0]
 8008894:	e041      	b.n	800891a <USB_EPStartXfer+0xe84>
 8008896:	463b      	mov	r3, r7
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	095b      	lsrs	r3, r3, #5
 800889e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80088a2:	463b      	mov	r3, r7
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	f003 031f 	and.w	r3, r3, #31
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d104      	bne.n	80088ba <USB_EPStartXfer+0xe24>
 80088b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088b4:	3b01      	subs	r3, #1
 80088b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80088ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088be:	b29b      	uxth	r3, r3
 80088c0:	029b      	lsls	r3, r3, #10
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088d2:	801a      	strh	r2, [r3, #0]
 80088d4:	e021      	b.n	800891a <USB_EPStartXfer+0xe84>
 80088d6:	463b      	mov	r3, r7
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	785b      	ldrb	r3, [r3, #1]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d11c      	bne.n	800891a <USB_EPStartXfer+0xe84>
 80088e0:	1d3b      	adds	r3, r7, #4
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	461a      	mov	r2, r3
 80088ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088f0:	4413      	add	r3, r2
 80088f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80088f6:	463b      	mov	r3, r7
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	011a      	lsls	r2, r3, #4
 80088fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008902:	4413      	add	r3, r2
 8008904:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008908:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800890c:	463b      	mov	r3, r7
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	b29a      	uxth	r2, r3
 8008914:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008918:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800891a:	463b      	mov	r3, r7
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	69db      	ldr	r3, [r3, #28]
 8008920:	2b00      	cmp	r3, #0
 8008922:	f000 81a4 	beq.w	8008c6e <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008926:	1d3b      	adds	r3, r7, #4
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	463b      	mov	r3, r7
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800893a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800893e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d005      	beq.n	8008952 <USB_EPStartXfer+0xebc>
 8008946:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800894a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10d      	bne.n	800896e <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008952:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800895a:	2b00      	cmp	r3, #0
 800895c:	f040 8187 	bne.w	8008c6e <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008960:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008968:	2b00      	cmp	r3, #0
 800896a:	f040 8180 	bne.w	8008c6e <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800896e:	1d3b      	adds	r3, r7, #4
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	463b      	mov	r3, r7
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	b29b      	uxth	r3, r3
 8008980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008988:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800898c:	1d3b      	adds	r3, r7, #4
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	463b      	mov	r3, r7
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	441a      	add	r2, r3
 800899a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800899e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	8013      	strh	r3, [r2, #0]
 80089b2:	e15c      	b.n	8008c6e <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80089b4:	463b      	mov	r3, r7
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	78db      	ldrb	r3, [r3, #3]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	f040 8155 	bne.w	8008c6a <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80089c0:	463b      	mov	r3, r7
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	699a      	ldr	r2, [r3, #24]
 80089c6:	463b      	mov	r3, r7
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d90e      	bls.n	80089ee <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80089d0:	463b      	mov	r3, r7
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80089da:	463b      	mov	r3, r7
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	699a      	ldr	r2, [r3, #24]
 80089e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089e4:	1ad2      	subs	r2, r2, r3
 80089e6:	463b      	mov	r3, r7
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	619a      	str	r2, [r3, #24]
 80089ec:	e008      	b.n	8008a00 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80089ee:	463b      	mov	r3, r7
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	699b      	ldr	r3, [r3, #24]
 80089f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80089f8:	463b      	mov	r3, r7
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2200      	movs	r2, #0
 80089fe:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008a00:	463b      	mov	r3, r7
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	785b      	ldrb	r3, [r3, #1]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d16f      	bne.n	8008aea <USB_EPStartXfer+0x1054>
 8008a0a:	1d3b      	adds	r3, r7, #4
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a12:	1d3b      	adds	r3, r7, #4
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008a22:	4413      	add	r3, r2
 8008a24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a28:	463b      	mov	r3, r7
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	011a      	lsls	r2, r3, #4
 8008a30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008a34:	4413      	add	r3, r2
 8008a36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d116      	bne.n	8008a74 <USB_EPStartXfer+0xfde>
 8008a46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008a58:	801a      	strh	r2, [r3, #0]
 8008a5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008a5e:	881b      	ldrh	r3, [r3, #0]
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008a70:	801a      	strh	r2, [r3, #0]
 8008a72:	e05f      	b.n	8008b34 <USB_EPStartXfer+0x109e>
 8008a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a78:	2b3e      	cmp	r3, #62	; 0x3e
 8008a7a:	d818      	bhi.n	8008aae <USB_EPStartXfer+0x1018>
 8008a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a80:	085b      	lsrs	r3, r3, #1
 8008a82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d004      	beq.n	8008a9c <USB_EPStartXfer+0x1006>
 8008a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a96:	3301      	adds	r3, #1
 8008a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	029b      	lsls	r3, r3, #10
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008aaa:	801a      	strh	r2, [r3, #0]
 8008aac:	e042      	b.n	8008b34 <USB_EPStartXfer+0x109e>
 8008aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ab2:	095b      	lsrs	r3, r3, #5
 8008ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008abc:	f003 031f 	and.w	r3, r3, #31
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d104      	bne.n	8008ace <USB_EPStartXfer+0x1038>
 8008ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	029b      	lsls	r3, r3, #10
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ae6:	801a      	strh	r2, [r3, #0]
 8008ae8:	e024      	b.n	8008b34 <USB_EPStartXfer+0x109e>
 8008aea:	463b      	mov	r3, r7
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	785b      	ldrb	r3, [r3, #1]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d11f      	bne.n	8008b34 <USB_EPStartXfer+0x109e>
 8008af4:	1d3b      	adds	r3, r7, #4
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008afc:	1d3b      	adds	r3, r7, #4
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	461a      	mov	r2, r3
 8008b08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b12:	463b      	mov	r3, r7
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	011a      	lsls	r2, r3, #4
 8008b1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b1e:	4413      	add	r3, r2
 8008b20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b2c:	b29a      	uxth	r2, r3
 8008b2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b32:	801a      	strh	r2, [r3, #0]
 8008b34:	1d3b      	adds	r3, r7, #4
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b3c:	463b      	mov	r3, r7
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	785b      	ldrb	r3, [r3, #1]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d16f      	bne.n	8008c26 <USB_EPStartXfer+0x1190>
 8008b46:	1d3b      	adds	r3, r7, #4
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b4e:	1d3b      	adds	r3, r7, #4
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	461a      	mov	r2, r3
 8008b5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008b5e:	4413      	add	r3, r2
 8008b60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b64:	463b      	mov	r3, r7
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	011a      	lsls	r2, r3, #4
 8008b6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008b70:	4413      	add	r3, r2
 8008b72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d116      	bne.n	8008bb0 <USB_EPStartXfer+0x111a>
 8008b82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b86:	881b      	ldrh	r3, [r3, #0]
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b94:	801a      	strh	r2, [r3, #0]
 8008b96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b9a:	881b      	ldrh	r3, [r3, #0]
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008bac:	801a      	strh	r2, [r3, #0]
 8008bae:	e05e      	b.n	8008c6e <USB_EPStartXfer+0x11d8>
 8008bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bb4:	2b3e      	cmp	r3, #62	; 0x3e
 8008bb6:	d818      	bhi.n	8008bea <USB_EPStartXfer+0x1154>
 8008bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bbc:	085b      	lsrs	r3, r3, #1
 8008bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d004      	beq.n	8008bd8 <USB_EPStartXfer+0x1142>
 8008bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	029b      	lsls	r3, r3, #10
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008be6:	801a      	strh	r2, [r3, #0]
 8008be8:	e041      	b.n	8008c6e <USB_EPStartXfer+0x11d8>
 8008bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bee:	095b      	lsrs	r3, r3, #5
 8008bf0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bf8:	f003 031f 	and.w	r3, r3, #31
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d104      	bne.n	8008c0a <USB_EPStartXfer+0x1174>
 8008c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c04:	3b01      	subs	r3, #1
 8008c06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	029b      	lsls	r3, r3, #10
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c22:	801a      	strh	r2, [r3, #0]
 8008c24:	e023      	b.n	8008c6e <USB_EPStartXfer+0x11d8>
 8008c26:	463b      	mov	r3, r7
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	785b      	ldrb	r3, [r3, #1]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d11e      	bne.n	8008c6e <USB_EPStartXfer+0x11d8>
 8008c30:	1d3b      	adds	r3, r7, #4
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c40:	4413      	add	r3, r2
 8008c42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c46:	463b      	mov	r3, r7
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	011a      	lsls	r2, r3, #4
 8008c4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c52:	4413      	add	r3, r2
 8008c54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008c66:	801a      	strh	r2, [r3, #0]
 8008c68:	e001      	b.n	8008c6e <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e02e      	b.n	8008ccc <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c6e:	1d3b      	adds	r3, r7, #4
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	463b      	mov	r3, r7
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4413      	add	r3, r2
 8008c7c:	881b      	ldrh	r3, [r3, #0]
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c88:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008c8c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008c90:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c94:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008c98:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008c9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ca0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008ca4:	1d3b      	adds	r3, r7, #4
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	463b      	mov	r3, r7
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	441a      	add	r2, r3
 8008cb2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b085      	sub	sp, #20
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	785b      	ldrb	r3, [r3, #1]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d020      	beq.n	8008d2a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4413      	add	r3, r2
 8008cf2:	881b      	ldrh	r3, [r3, #0]
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cfe:	81bb      	strh	r3, [r7, #12]
 8008d00:	89bb      	ldrh	r3, [r7, #12]
 8008d02:	f083 0310 	eor.w	r3, r3, #16
 8008d06:	81bb      	strh	r3, [r7, #12]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	441a      	add	r2, r3
 8008d12:	89bb      	ldrh	r3, [r7, #12]
 8008d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	8013      	strh	r3, [r2, #0]
 8008d28:	e01f      	b.n	8008d6a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4413      	add	r3, r2
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d40:	81fb      	strh	r3, [r7, #14]
 8008d42:	89fb      	ldrh	r3, [r7, #14]
 8008d44:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d48:	81fb      	strh	r3, [r7, #14]
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	441a      	add	r2, r3
 8008d54:	89fb      	ldrh	r3, [r7, #14]
 8008d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3714      	adds	r7, #20
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	7b1b      	ldrb	r3, [r3, #12]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f040 809d 	bne.w	8008ec6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	785b      	ldrb	r3, [r3, #1]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d04c      	beq.n	8008e2e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	4413      	add	r3, r2
 8008d9e:	881b      	ldrh	r3, [r3, #0]
 8008da0:	823b      	strh	r3, [r7, #16]
 8008da2:	8a3b      	ldrh	r3, [r7, #16]
 8008da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d01b      	beq.n	8008de4 <USB_EPClearStall+0x6c>
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	881b      	ldrh	r3, [r3, #0]
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dc2:	81fb      	strh	r3, [r7, #14]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	441a      	add	r2, r3
 8008dce:	89fb      	ldrh	r3, [r7, #14]
 8008dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ddc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	78db      	ldrb	r3, [r3, #3]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d06c      	beq.n	8008ec6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	881b      	ldrh	r3, [r3, #0]
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e02:	81bb      	strh	r3, [r7, #12]
 8008e04:	89bb      	ldrh	r3, [r7, #12]
 8008e06:	f083 0320 	eor.w	r3, r3, #32
 8008e0a:	81bb      	strh	r3, [r7, #12]
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	441a      	add	r2, r3
 8008e16:	89bb      	ldrh	r3, [r7, #12]
 8008e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	8013      	strh	r3, [r2, #0]
 8008e2c:	e04b      	b.n	8008ec6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4413      	add	r3, r2
 8008e38:	881b      	ldrh	r3, [r3, #0]
 8008e3a:	82fb      	strh	r3, [r7, #22]
 8008e3c:	8afb      	ldrh	r3, [r7, #22]
 8008e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d01b      	beq.n	8008e7e <USB_EPClearStall+0x106>
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	4413      	add	r3, r2
 8008e50:	881b      	ldrh	r3, [r3, #0]
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e5c:	82bb      	strh	r3, [r7, #20]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	441a      	add	r2, r3
 8008e68:	8abb      	ldrh	r3, [r7, #20]
 8008e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4413      	add	r3, r2
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e94:	827b      	strh	r3, [r7, #18]
 8008e96:	8a7b      	ldrh	r3, [r7, #18]
 8008e98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e9c:	827b      	strh	r3, [r7, #18]
 8008e9e:	8a7b      	ldrh	r3, [r7, #18]
 8008ea0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ea4:	827b      	strh	r3, [r7, #18]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	441a      	add	r2, r3
 8008eb0:	8a7b      	ldrh	r3, [r7, #18]
 8008eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	371c      	adds	r7, #28
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	460b      	mov	r3, r1
 8008ede:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008ee0:	78fb      	ldrb	r3, [r7, #3]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d103      	bne.n	8008eee <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2280      	movs	r2, #128	; 0x80
 8008eea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr

08008f12 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008f12:	b480      	push	{r7}
 8008f14:	b085      	sub	sp, #20
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008f24:	68fb      	ldr	r3, [r7, #12]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3714      	adds	r7, #20
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b08d      	sub	sp, #52	; 0x34
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	60f8      	str	r0, [r7, #12]
 8008f3a:	60b9      	str	r1, [r7, #8]
 8008f3c:	4611      	mov	r1, r2
 8008f3e:	461a      	mov	r2, r3
 8008f40:	460b      	mov	r3, r1
 8008f42:	80fb      	strh	r3, [r7, #6]
 8008f44:	4613      	mov	r3, r2
 8008f46:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008f48:	88bb      	ldrh	r3, [r7, #4]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	085b      	lsrs	r3, r3, #1
 8008f4e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f58:	88fb      	ldrh	r3, [r7, #6]
 8008f5a:	005a      	lsls	r2, r3, #1
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	4413      	add	r3, r2
 8008f60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f64:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f6a:	e01e      	b.n	8008faa <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f74:	3301      	adds	r3, #1
 8008f76:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	021b      	lsls	r3, r3, #8
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	461a      	mov	r2, r3
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f90:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f94:	3302      	adds	r3, #2
 8008f96:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9a:	3302      	adds	r3, #2
 8008f9c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1dd      	bne.n	8008f6c <USB_WritePMA+0x3a>
  }
}
 8008fb0:	bf00      	nop
 8008fb2:	3734      	adds	r7, #52	; 0x34
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b08b      	sub	sp, #44	; 0x2c
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	4611      	mov	r1, r2
 8008fc8:	461a      	mov	r2, r3
 8008fca:	460b      	mov	r3, r1
 8008fcc:	80fb      	strh	r3, [r7, #6]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008fd2:	88bb      	ldrh	r3, [r7, #4]
 8008fd4:	085b      	lsrs	r3, r3, #1
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008fe2:	88fb      	ldrh	r3, [r7, #6]
 8008fe4:	005a      	lsls	r2, r3, #1
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fee:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8008ff4:	e01b      	b.n	800902e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	881b      	ldrh	r3, [r3, #0]
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008ffe:	6a3b      	ldr	r3, [r7, #32]
 8009000:	3302      	adds	r3, #2
 8009002:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	b2da      	uxtb	r2, r3
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	3301      	adds	r3, #1
 8009010:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	0a1b      	lsrs	r3, r3, #8
 8009016:	b2da      	uxtb	r2, r3
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	3301      	adds	r3, #1
 8009020:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009022:	6a3b      	ldr	r3, [r7, #32]
 8009024:	3302      	adds	r3, #2
 8009026:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902a:	3b01      	subs	r3, #1
 800902c:	627b      	str	r3, [r7, #36]	; 0x24
 800902e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1e0      	bne.n	8008ff6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009034:	88bb      	ldrh	r3, [r7, #4]
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	b29b      	uxth	r3, r3
 800903c:	2b00      	cmp	r3, #0
 800903e:	d007      	beq.n	8009050 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	881b      	ldrh	r3, [r3, #0]
 8009044:	b29b      	uxth	r3, r3
 8009046:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	b2da      	uxtb	r2, r3
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	701a      	strb	r2, [r3, #0]
  }
}
 8009050:	bf00      	nop
 8009052:	372c      	adds	r7, #44	; 0x2c
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	460b      	mov	r3, r1
 8009066:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009068:	2300      	movs	r3, #0
 800906a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	7c1b      	ldrb	r3, [r3, #16]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d115      	bne.n	80090a0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009078:	2202      	movs	r2, #2
 800907a:	2181      	movs	r1, #129	; 0x81
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f001 fea6 	bl	800adce <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800908c:	2202      	movs	r2, #2
 800908e:	2101      	movs	r1, #1
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f001 fe9c 	bl	800adce <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800909e:	e012      	b.n	80090c6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80090a0:	2340      	movs	r3, #64	; 0x40
 80090a2:	2202      	movs	r2, #2
 80090a4:	2181      	movs	r1, #129	; 0x81
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f001 fe91 	bl	800adce <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80090b2:	2340      	movs	r3, #64	; 0x40
 80090b4:	2202      	movs	r2, #2
 80090b6:	2101      	movs	r1, #1
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f001 fe88 	bl	800adce <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80090c6:	2308      	movs	r3, #8
 80090c8:	2203      	movs	r2, #3
 80090ca:	2182      	movs	r1, #130	; 0x82
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f001 fe7e 	bl	800adce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2201      	movs	r2, #1
 80090d6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80090d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80090dc:	f001 ffa0 	bl	800b020 <USBD_static_malloc>
 80090e0:	4602      	mov	r2, r0
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d102      	bne.n	80090f8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80090f2:	2301      	movs	r3, #1
 80090f4:	73fb      	strb	r3, [r7, #15]
 80090f6:	e026      	b.n	8009146 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090fe:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	2200      	movs	r2, #0
 800910e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	2200      	movs	r2, #0
 8009116:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	7c1b      	ldrb	r3, [r3, #16]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d109      	bne.n	8009136 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009128:	f44f 7300 	mov.w	r3, #512	; 0x200
 800912c:	2101      	movs	r1, #1
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f001 ff3f 	bl	800afb2 <USBD_LL_PrepareReceive>
 8009134:	e007      	b.n	8009146 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800913c:	2340      	movs	r3, #64	; 0x40
 800913e:	2101      	movs	r1, #1
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f001 ff36 	bl	800afb2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009146:	7bfb      	ldrb	r3, [r7, #15]
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800915c:	2300      	movs	r3, #0
 800915e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009160:	2181      	movs	r1, #129	; 0x81
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f001 fe59 	bl	800ae1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800916e:	2101      	movs	r1, #1
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f001 fe52 	bl	800ae1a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800917e:	2182      	movs	r1, #130	; 0x82
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f001 fe4a 	bl	800ae1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00e      	beq.n	80091b4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a6:	4618      	mov	r0, r3
 80091a8:	f001 ff48 	bl	800b03c <USBD_static_free>
    pdev->pClassData = NULL;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b086      	sub	sp, #24
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ce:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80091d4:	2300      	movs	r3, #0
 80091d6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d039      	beq.n	800925c <USBD_CDC_Setup+0x9e>
 80091e8:	2b20      	cmp	r3, #32
 80091ea:	d17c      	bne.n	80092e6 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	88db      	ldrh	r3, [r3, #6]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d029      	beq.n	8009248 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	b25b      	sxtb	r3, r3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	da11      	bge.n	8009222 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800920a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800920c:	683a      	ldr	r2, [r7, #0]
 800920e:	88d2      	ldrh	r2, [r2, #6]
 8009210:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009212:	6939      	ldr	r1, [r7, #16]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	88db      	ldrh	r3, [r3, #6]
 8009218:	461a      	mov	r2, r3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f001 fa04 	bl	800a628 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009220:	e068      	b.n	80092f4 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	785a      	ldrb	r2, [r3, #1]
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	88db      	ldrh	r3, [r3, #6]
 8009230:	b2da      	uxtb	r2, r3
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009238:	6939      	ldr	r1, [r7, #16]
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	88db      	ldrh	r3, [r3, #6]
 800923e:	461a      	mov	r2, r3
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f001 fa1f 	bl	800a684 <USBD_CtlPrepareRx>
      break;
 8009246:	e055      	b.n	80092f4 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	7850      	ldrb	r0, [r2, #1]
 8009254:	2200      	movs	r2, #0
 8009256:	6839      	ldr	r1, [r7, #0]
 8009258:	4798      	blx	r3
      break;
 800925a:	e04b      	b.n	80092f4 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	785b      	ldrb	r3, [r3, #1]
 8009260:	2b0a      	cmp	r3, #10
 8009262:	d017      	beq.n	8009294 <USBD_CDC_Setup+0xd6>
 8009264:	2b0b      	cmp	r3, #11
 8009266:	d029      	beq.n	80092bc <USBD_CDC_Setup+0xfe>
 8009268:	2b00      	cmp	r3, #0
 800926a:	d133      	bne.n	80092d4 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009272:	2b03      	cmp	r3, #3
 8009274:	d107      	bne.n	8009286 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009276:	f107 030c 	add.w	r3, r7, #12
 800927a:	2202      	movs	r2, #2
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f001 f9d2 	bl	800a628 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009284:	e02e      	b.n	80092e4 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f001 f962 	bl	800a552 <USBD_CtlError>
            ret = USBD_FAIL;
 800928e:	2302      	movs	r3, #2
 8009290:	75fb      	strb	r3, [r7, #23]
          break;
 8009292:	e027      	b.n	80092e4 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800929a:	2b03      	cmp	r3, #3
 800929c:	d107      	bne.n	80092ae <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800929e:	f107 030f 	add.w	r3, r7, #15
 80092a2:	2201      	movs	r2, #1
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f001 f9be 	bl	800a628 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092ac:	e01a      	b.n	80092e4 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f001 f94e 	bl	800a552 <USBD_CtlError>
            ret = USBD_FAIL;
 80092b6:	2302      	movs	r3, #2
 80092b8:	75fb      	strb	r3, [r7, #23]
          break;
 80092ba:	e013      	b.n	80092e4 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092c2:	2b03      	cmp	r3, #3
 80092c4:	d00d      	beq.n	80092e2 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 f942 	bl	800a552 <USBD_CtlError>
            ret = USBD_FAIL;
 80092ce:	2302      	movs	r3, #2
 80092d0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80092d2:	e006      	b.n	80092e2 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f001 f93b 	bl	800a552 <USBD_CtlError>
          ret = USBD_FAIL;
 80092dc:	2302      	movs	r3, #2
 80092de:	75fb      	strb	r3, [r7, #23]
          break;
 80092e0:	e000      	b.n	80092e4 <USBD_CDC_Setup+0x126>
          break;
 80092e2:	bf00      	nop
      }
      break;
 80092e4:	e006      	b.n	80092f4 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 f932 	bl	800a552 <USBD_CtlError>
      ret = USBD_FAIL;
 80092ee:	2302      	movs	r3, #2
 80092f0:	75fb      	strb	r3, [r7, #23]
      break;
 80092f2:	bf00      	nop
  }

  return ret;
 80092f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	460b      	mov	r3, r1
 8009308:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009310:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009318:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009320:	2b00      	cmp	r3, #0
 8009322:	d03a      	beq.n	800939a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009324:	78fa      	ldrb	r2, [r7, #3]
 8009326:	6879      	ldr	r1, [r7, #4]
 8009328:	4613      	mov	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	4413      	add	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	440b      	add	r3, r1
 8009332:	331c      	adds	r3, #28
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d029      	beq.n	800938e <USBD_CDC_DataIn+0x90>
 800933a:	78fa      	ldrb	r2, [r7, #3]
 800933c:	6879      	ldr	r1, [r7, #4]
 800933e:	4613      	mov	r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	4413      	add	r3, r2
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	440b      	add	r3, r1
 8009348:	331c      	adds	r3, #28
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	78f9      	ldrb	r1, [r7, #3]
 800934e:	68b8      	ldr	r0, [r7, #8]
 8009350:	460b      	mov	r3, r1
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	440b      	add	r3, r1
 8009356:	00db      	lsls	r3, r3, #3
 8009358:	4403      	add	r3, r0
 800935a:	3338      	adds	r3, #56	; 0x38
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	fbb2 f1f3 	udiv	r1, r2, r3
 8009362:	fb03 f301 	mul.w	r3, r3, r1
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	2b00      	cmp	r3, #0
 800936a:	d110      	bne.n	800938e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800936c:	78fa      	ldrb	r2, [r7, #3]
 800936e:	6879      	ldr	r1, [r7, #4]
 8009370:	4613      	mov	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	440b      	add	r3, r1
 800937a:	331c      	adds	r3, #28
 800937c:	2200      	movs	r2, #0
 800937e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009380:	78f9      	ldrb	r1, [r7, #3]
 8009382:	2300      	movs	r3, #0
 8009384:	2200      	movs	r2, #0
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f001 fdf0 	bl	800af6c <USBD_LL_Transmit>
 800938c:	e003      	b.n	8009396 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	e000      	b.n	800939c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800939a:	2302      	movs	r3, #2
  }
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093b6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80093b8:	78fb      	ldrb	r3, [r7, #3]
 80093ba:	4619      	mov	r1, r3
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f001 fe1b 	bl	800aff8 <USBD_LL_GetRxDataSize>
 80093c2:	4602      	mov	r2, r0
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00d      	beq.n	80093f0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80093e8:	4611      	mov	r1, r2
 80093ea:	4798      	blx	r3

    return USBD_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	e000      	b.n	80093f2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80093f0:	2302      	movs	r3, #2
  }
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b084      	sub	sp, #16
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009408:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009410:	2b00      	cmp	r3, #0
 8009412:	d015      	beq.n	8009440 <USBD_CDC_EP0_RxReady+0x46>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800941a:	2bff      	cmp	r3, #255	; 0xff
 800941c:	d010      	beq.n	8009440 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800942c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800942e:	68fa      	ldr	r2, [r7, #12]
 8009430:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009434:	b292      	uxth	r2, r2
 8009436:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	22ff      	movs	r2, #255	; 0xff
 800943c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
	...

0800944c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2243      	movs	r2, #67	; 0x43
 8009458:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800945a:	4b03      	ldr	r3, [pc, #12]	; (8009468 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800945c:	4618      	mov	r0, r3
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr
 8009468:	20000100 	.word	0x20000100

0800946c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2243      	movs	r2, #67	; 0x43
 8009478:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800947a:	4b03      	ldr	r3, [pc, #12]	; (8009488 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800947c:	4618      	mov	r0, r3
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	200000bc 	.word	0x200000bc

0800948c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2243      	movs	r2, #67	; 0x43
 8009498:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800949a:	4b03      	ldr	r3, [pc, #12]	; (80094a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800949c:	4618      	mov	r0, r3
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr
 80094a8:	20000144 	.word	0x20000144

080094ac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	220a      	movs	r2, #10
 80094b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80094ba:	4b03      	ldr	r3, [pc, #12]	; (80094c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80094bc:	4618      	mov	r0, r3
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr
 80094c8:	20000078 	.word	0x20000078

080094cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80094d6:	2302      	movs	r3, #2
 80094d8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d005      	beq.n	80094ec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80094ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3714      	adds	r7, #20
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b087      	sub	sp, #28
 80094fe:	af00      	add	r7, sp, #0
 8009500:	60f8      	str	r0, [r7, #12]
 8009502:	60b9      	str	r1, [r7, #8]
 8009504:	4613      	mov	r3, r2
 8009506:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800950e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	68ba      	ldr	r2, [r7, #8]
 8009514:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009518:	88fa      	ldrh	r2, [r7, #6]
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	371c      	adds	r7, #28
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr

0800952e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800952e:	b480      	push	{r7}
 8009530:	b085      	sub	sp, #20
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
 8009536:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800953e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	683a      	ldr	r2, [r7, #0]
 8009544:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3714      	adds	r7, #20
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b084      	sub	sp, #16
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009564:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800956c:	2b00      	cmp	r3, #0
 800956e:	d01c      	beq.n	80095aa <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009576:	2b00      	cmp	r3, #0
 8009578:	d115      	bne.n	80095a6 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2201      	movs	r2, #1
 800957e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009598:	b29b      	uxth	r3, r3
 800959a:	2181      	movs	r1, #129	; 0x81
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f001 fce5 	bl	800af6c <USBD_LL_Transmit>

      return USBD_OK;
 80095a2:	2300      	movs	r3, #0
 80095a4:	e002      	b.n	80095ac <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80095a6:	2301      	movs	r3, #1
 80095a8:	e000      	b.n	80095ac <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80095aa:	2302      	movs	r3, #2
  }
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095c2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d017      	beq.n	80095fe <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	7c1b      	ldrb	r3, [r3, #16]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d109      	bne.n	80095ea <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80095dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095e0:	2101      	movs	r1, #1
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f001 fce5 	bl	800afb2 <USBD_LL_PrepareReceive>
 80095e8:	e007      	b.n	80095fa <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80095f0:	2340      	movs	r3, #64	; 0x40
 80095f2:	2101      	movs	r1, #1
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f001 fcdc 	bl	800afb2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	e000      	b.n	8009600 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80095fe:	2302      	movs	r3, #2
  }
}
 8009600:	4618      	mov	r0, r3
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	4613      	mov	r3, r2
 8009614:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d101      	bne.n	8009620 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800961c:	2302      	movs	r3, #2
 800961e:	e01a      	b.n	8009656 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009626:	2b00      	cmp	r3, #0
 8009628:	d003      	beq.n	8009632 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d003      	beq.n	8009640 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	79fa      	ldrb	r2, [r7, #7]
 800964c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f001 fb48 	bl	800ace4 <USBD_LL_Init>

  return USBD_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800965e:	b480      	push	{r7}
 8009660:	b085      	sub	sp, #20
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d006      	beq.n	8009680 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	683a      	ldr	r2, [r7, #0]
 8009676:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800967a:	2300      	movs	r3, #0
 800967c:	73fb      	strb	r3, [r7, #15]
 800967e:	e001      	b.n	8009684 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009680:	2302      	movs	r3, #2
 8009682:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009684:	7bfb      	ldrb	r3, [r7, #15]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b082      	sub	sp, #8
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f001 fb7c 	bl	800ad98 <USBD_LL_Start>

  return USBD_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80096aa:	b480      	push	{r7}
 80096ac:	b083      	sub	sp, #12
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	460b      	mov	r3, r1
 80096ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80096cc:	2302      	movs	r3, #2
 80096ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00c      	beq.n	80096f4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	78fa      	ldrb	r2, [r7, #3]
 80096e4:	4611      	mov	r1, r2
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	4798      	blx	r3
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80096f0:	2300      	movs	r3, #0
 80096f2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b082      	sub	sp, #8
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	460b      	mov	r3, r1
 8009708:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	78fa      	ldrb	r2, [r7, #3]
 8009714:	4611      	mov	r1, r2
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	4798      	blx	r3

  return USBD_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009734:	6839      	ldr	r1, [r7, #0]
 8009736:	4618      	mov	r0, r3
 8009738:	f000 fece 	bl	800a4d8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800974a:	461a      	mov	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009758:	f003 031f 	and.w	r3, r3, #31
 800975c:	2b01      	cmp	r3, #1
 800975e:	d00c      	beq.n	800977a <USBD_LL_SetupStage+0x56>
 8009760:	2b01      	cmp	r3, #1
 8009762:	d302      	bcc.n	800976a <USBD_LL_SetupStage+0x46>
 8009764:	2b02      	cmp	r3, #2
 8009766:	d010      	beq.n	800978a <USBD_LL_SetupStage+0x66>
 8009768:	e017      	b.n	800979a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009770:	4619      	mov	r1, r3
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f9ce 	bl	8009b14 <USBD_StdDevReq>
      break;
 8009778:	e01a      	b.n	80097b0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009780:	4619      	mov	r1, r3
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 fa30 	bl	8009be8 <USBD_StdItfReq>
      break;
 8009788:	e012      	b.n	80097b0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 fa6e 	bl	8009c74 <USBD_StdEPReq>
      break;
 8009798:	e00a      	b.n	80097b0 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80097a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	4619      	mov	r1, r3
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f001 fb55 	bl	800ae58 <USBD_LL_StallEP>
      break;
 80097ae:	bf00      	nop
  }

  return USBD_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b086      	sub	sp, #24
 80097be:	af00      	add	r7, sp, #0
 80097c0:	60f8      	str	r0, [r7, #12]
 80097c2:	460b      	mov	r3, r1
 80097c4:	607a      	str	r2, [r7, #4]
 80097c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80097c8:	7afb      	ldrb	r3, [r7, #11]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d14b      	bne.n	8009866 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80097d4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80097dc:	2b03      	cmp	r3, #3
 80097de:	d134      	bne.n	800984a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	68da      	ldr	r2, [r3, #12]
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d919      	bls.n	8009820 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	68da      	ldr	r2, [r3, #12]
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	1ad2      	subs	r2, r2, r3
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	68da      	ldr	r2, [r3, #12]
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009802:	429a      	cmp	r2, r3
 8009804:	d203      	bcs.n	800980e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800980a:	b29b      	uxth	r3, r3
 800980c:	e002      	b.n	8009814 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009812:	b29b      	uxth	r3, r3
 8009814:	461a      	mov	r2, r3
 8009816:	6879      	ldr	r1, [r7, #4]
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f000 ff51 	bl	800a6c0 <USBD_CtlContinueRx>
 800981e:	e038      	b.n	8009892 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00a      	beq.n	8009842 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009832:	2b03      	cmp	r3, #3
 8009834:	d105      	bne.n	8009842 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009842:	68f8      	ldr	r0, [r7, #12]
 8009844:	f000 ff4e 	bl	800a6e4 <USBD_CtlSendStatus>
 8009848:	e023      	b.n	8009892 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009850:	2b05      	cmp	r3, #5
 8009852:	d11e      	bne.n	8009892 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2200      	movs	r2, #0
 8009858:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800985c:	2100      	movs	r1, #0
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f001 fafa 	bl	800ae58 <USBD_LL_StallEP>
 8009864:	e015      	b.n	8009892 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00d      	beq.n	800988e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009878:	2b03      	cmp	r3, #3
 800987a:	d108      	bne.n	800988e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	7afa      	ldrb	r2, [r7, #11]
 8009886:	4611      	mov	r1, r2
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	4798      	blx	r3
 800988c:	e001      	b.n	8009892 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800988e:	2302      	movs	r3, #2
 8009890:	e000      	b.n	8009894 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3718      	adds	r7, #24
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b086      	sub	sp, #24
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	460b      	mov	r3, r1
 80098a6:	607a      	str	r2, [r7, #4]
 80098a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80098aa:	7afb      	ldrb	r3, [r7, #11]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d17f      	bne.n	80099b0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	3314      	adds	r3, #20
 80098b4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d15c      	bne.n	800997a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	68da      	ldr	r2, [r3, #12]
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d915      	bls.n	80098f8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	68da      	ldr	r2, [r3, #12]
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	1ad2      	subs	r2, r2, r3
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	b29b      	uxth	r3, r3
 80098e0:	461a      	mov	r2, r3
 80098e2:	6879      	ldr	r1, [r7, #4]
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f000 febb 	bl	800a660 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098ea:	2300      	movs	r3, #0
 80098ec:	2200      	movs	r2, #0
 80098ee:	2100      	movs	r1, #0
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f001 fb5e 	bl	800afb2 <USBD_LL_PrepareReceive>
 80098f6:	e04e      	b.n	8009996 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	6912      	ldr	r2, [r2, #16]
 8009900:	fbb3 f1f2 	udiv	r1, r3, r2
 8009904:	fb02 f201 	mul.w	r2, r2, r1
 8009908:	1a9b      	subs	r3, r3, r2
 800990a:	2b00      	cmp	r3, #0
 800990c:	d11c      	bne.n	8009948 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	689a      	ldr	r2, [r3, #8]
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009916:	429a      	cmp	r2, r3
 8009918:	d316      	bcc.n	8009948 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	689a      	ldr	r2, [r3, #8]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009924:	429a      	cmp	r2, r3
 8009926:	d20f      	bcs.n	8009948 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009928:	2200      	movs	r2, #0
 800992a:	2100      	movs	r1, #0
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f000 fe97 	bl	800a660 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800993a:	2300      	movs	r3, #0
 800993c:	2200      	movs	r2, #0
 800993e:	2100      	movs	r1, #0
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f001 fb36 	bl	800afb2 <USBD_LL_PrepareReceive>
 8009946:	e026      	b.n	8009996 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d00a      	beq.n	800996a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800995a:	2b03      	cmp	r3, #3
 800995c:	d105      	bne.n	800996a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800996a:	2180      	movs	r1, #128	; 0x80
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f001 fa73 	bl	800ae58 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 fec9 	bl	800a70a <USBD_CtlReceiveStatus>
 8009978:	e00d      	b.n	8009996 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009980:	2b04      	cmp	r3, #4
 8009982:	d004      	beq.n	800998e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800998a:	2b00      	cmp	r3, #0
 800998c:	d103      	bne.n	8009996 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800998e:	2180      	movs	r1, #128	; 0x80
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f001 fa61 	bl	800ae58 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800999c:	2b01      	cmp	r3, #1
 800999e:	d11d      	bne.n	80099dc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f7ff fe82 	bl	80096aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80099ae:	e015      	b.n	80099dc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099b6:	695b      	ldr	r3, [r3, #20]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00d      	beq.n	80099d8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80099c2:	2b03      	cmp	r3, #3
 80099c4:	d108      	bne.n	80099d8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099cc:	695b      	ldr	r3, [r3, #20]
 80099ce:	7afa      	ldrb	r2, [r7, #11]
 80099d0:	4611      	mov	r1, r2
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	4798      	blx	r3
 80099d6:	e001      	b.n	80099dc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80099d8:	2302      	movs	r3, #2
 80099da:	e000      	b.n	80099de <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3718      	adds	r7, #24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b082      	sub	sp, #8
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80099ee:	2340      	movs	r3, #64	; 0x40
 80099f0:	2200      	movs	r2, #0
 80099f2:	2100      	movs	r1, #0
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f001 f9ea 	bl	800adce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2240      	movs	r2, #64	; 0x40
 8009a06:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a0a:	2340      	movs	r3, #64	; 0x40
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	2180      	movs	r1, #128	; 0x80
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f001 f9dc 	bl	800adce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2240      	movs	r2, #64	; 0x40
 8009a20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2201      	movs	r2, #1
 8009a26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d009      	beq.n	8009a5e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	6852      	ldr	r2, [r2, #4]
 8009a56:	b2d2      	uxtb	r2, r2
 8009a58:	4611      	mov	r1, r2
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	4798      	blx	r3
  }

  return USBD_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	460b      	mov	r3, r1
 8009a72:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	78fa      	ldrb	r2, [r7, #3]
 8009a78:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2204      	movs	r2, #4
 8009aa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	370c      	adds	r7, #12
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr

08009ab2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009ab2:	b480      	push	{r7}
 8009ab4:	b083      	sub	sp, #12
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ac0:	2b04      	cmp	r3, #4
 8009ac2:	d105      	bne.n	8009ad0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b082      	sub	sp, #8
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aec:	2b03      	cmp	r3, #3
 8009aee:	d10b      	bne.n	8009b08 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009af6:	69db      	ldr	r3, [r3, #28]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d005      	beq.n	8009b08 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b02:	69db      	ldr	r3, [r3, #28]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
	...

08009b14 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b2a:	2b20      	cmp	r3, #32
 8009b2c:	d004      	beq.n	8009b38 <USBD_StdDevReq+0x24>
 8009b2e:	2b40      	cmp	r3, #64	; 0x40
 8009b30:	d002      	beq.n	8009b38 <USBD_StdDevReq+0x24>
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d008      	beq.n	8009b48 <USBD_StdDevReq+0x34>
 8009b36:	e04c      	b.n	8009bd2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	6839      	ldr	r1, [r7, #0]
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	4798      	blx	r3
      break;
 8009b46:	e049      	b.n	8009bdc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	785b      	ldrb	r3, [r3, #1]
 8009b4c:	2b09      	cmp	r3, #9
 8009b4e:	d83a      	bhi.n	8009bc6 <USBD_StdDevReq+0xb2>
 8009b50:	a201      	add	r2, pc, #4	; (adr r2, 8009b58 <USBD_StdDevReq+0x44>)
 8009b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b56:	bf00      	nop
 8009b58:	08009ba9 	.word	0x08009ba9
 8009b5c:	08009bbd 	.word	0x08009bbd
 8009b60:	08009bc7 	.word	0x08009bc7
 8009b64:	08009bb3 	.word	0x08009bb3
 8009b68:	08009bc7 	.word	0x08009bc7
 8009b6c:	08009b8b 	.word	0x08009b8b
 8009b70:	08009b81 	.word	0x08009b81
 8009b74:	08009bc7 	.word	0x08009bc7
 8009b78:	08009b9f 	.word	0x08009b9f
 8009b7c:	08009b95 	.word	0x08009b95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f9d4 	bl	8009f30 <USBD_GetDescriptor>
          break;
 8009b88:	e022      	b.n	8009bd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fb37 	bl	800a200 <USBD_SetAddress>
          break;
 8009b92:	e01d      	b.n	8009bd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fb74 	bl	800a284 <USBD_SetConfig>
          break;
 8009b9c:	e018      	b.n	8009bd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b9e:	6839      	ldr	r1, [r7, #0]
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 fbfd 	bl	800a3a0 <USBD_GetConfig>
          break;
 8009ba6:	e013      	b.n	8009bd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009ba8:	6839      	ldr	r1, [r7, #0]
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fc2c 	bl	800a408 <USBD_GetStatus>
          break;
 8009bb0:	e00e      	b.n	8009bd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009bb2:	6839      	ldr	r1, [r7, #0]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fc5a 	bl	800a46e <USBD_SetFeature>
          break;
 8009bba:	e009      	b.n	8009bd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fc69 	bl	800a496 <USBD_ClrFeature>
          break;
 8009bc4:	e004      	b.n	8009bd0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009bc6:	6839      	ldr	r1, [r7, #0]
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fcc2 	bl	800a552 <USBD_CtlError>
          break;
 8009bce:	bf00      	nop
      }
      break;
 8009bd0:	e004      	b.n	8009bdc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009bd2:	6839      	ldr	r1, [r7, #0]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 fcbc 	bl	800a552 <USBD_CtlError>
      break;
 8009bda:	bf00      	nop
  }

  return ret;
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop

08009be8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bfe:	2b20      	cmp	r3, #32
 8009c00:	d003      	beq.n	8009c0a <USBD_StdItfReq+0x22>
 8009c02:	2b40      	cmp	r3, #64	; 0x40
 8009c04:	d001      	beq.n	8009c0a <USBD_StdItfReq+0x22>
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d12a      	bne.n	8009c60 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c10:	3b01      	subs	r3, #1
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d81d      	bhi.n	8009c52 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	889b      	ldrh	r3, [r3, #4]
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d813      	bhi.n	8009c48 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	6839      	ldr	r1, [r7, #0]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	4798      	blx	r3
 8009c2e:	4603      	mov	r3, r0
 8009c30:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	88db      	ldrh	r3, [r3, #6]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d110      	bne.n	8009c5c <USBD_StdItfReq+0x74>
 8009c3a:	7bfb      	ldrb	r3, [r7, #15]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d10d      	bne.n	8009c5c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 fd4f 	bl	800a6e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c46:	e009      	b.n	8009c5c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 fc81 	bl	800a552 <USBD_CtlError>
          break;
 8009c50:	e004      	b.n	8009c5c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fc7c 	bl	800a552 <USBD_CtlError>
          break;
 8009c5a:	e000      	b.n	8009c5e <USBD_StdItfReq+0x76>
          break;
 8009c5c:	bf00      	nop
      }
      break;
 8009c5e:	e004      	b.n	8009c6a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fc75 	bl	800a552 <USBD_CtlError>
      break;
 8009c68:	bf00      	nop
  }

  return USBD_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	889b      	ldrh	r3, [r3, #4]
 8009c86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c90:	2b20      	cmp	r3, #32
 8009c92:	d004      	beq.n	8009c9e <USBD_StdEPReq+0x2a>
 8009c94:	2b40      	cmp	r3, #64	; 0x40
 8009c96:	d002      	beq.n	8009c9e <USBD_StdEPReq+0x2a>
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d008      	beq.n	8009cae <USBD_StdEPReq+0x3a>
 8009c9c:	e13d      	b.n	8009f1a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	4798      	blx	r3
      break;
 8009cac:	e13a      	b.n	8009f24 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cb6:	2b20      	cmp	r3, #32
 8009cb8:	d10a      	bne.n	8009cd0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	6839      	ldr	r1, [r7, #0]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	4798      	blx	r3
 8009cc8:	4603      	mov	r3, r0
 8009cca:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
 8009cce:	e12a      	b.n	8009f26 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	785b      	ldrb	r3, [r3, #1]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d03e      	beq.n	8009d56 <USBD_StdEPReq+0xe2>
 8009cd8:	2b03      	cmp	r3, #3
 8009cda:	d002      	beq.n	8009ce2 <USBD_StdEPReq+0x6e>
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d070      	beq.n	8009dc2 <USBD_StdEPReq+0x14e>
 8009ce0:	e115      	b.n	8009f0e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	d002      	beq.n	8009cf2 <USBD_StdEPReq+0x7e>
 8009cec:	2b03      	cmp	r3, #3
 8009cee:	d015      	beq.n	8009d1c <USBD_StdEPReq+0xa8>
 8009cf0:	e02b      	b.n	8009d4a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cf2:	7bbb      	ldrb	r3, [r7, #14]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d00c      	beq.n	8009d12 <USBD_StdEPReq+0x9e>
 8009cf8:	7bbb      	ldrb	r3, [r7, #14]
 8009cfa:	2b80      	cmp	r3, #128	; 0x80
 8009cfc:	d009      	beq.n	8009d12 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009cfe:	7bbb      	ldrb	r3, [r7, #14]
 8009d00:	4619      	mov	r1, r3
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f001 f8a8 	bl	800ae58 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009d08:	2180      	movs	r1, #128	; 0x80
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f001 f8a4 	bl	800ae58 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d10:	e020      	b.n	8009d54 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fc1c 	bl	800a552 <USBD_CtlError>
              break;
 8009d1a:	e01b      	b.n	8009d54 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	885b      	ldrh	r3, [r3, #2]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10e      	bne.n	8009d42 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8009d24:	7bbb      	ldrb	r3, [r7, #14]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00b      	beq.n	8009d42 <USBD_StdEPReq+0xce>
 8009d2a:	7bbb      	ldrb	r3, [r7, #14]
 8009d2c:	2b80      	cmp	r3, #128	; 0x80
 8009d2e:	d008      	beq.n	8009d42 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	88db      	ldrh	r3, [r3, #6]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d104      	bne.n	8009d42 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009d38:	7bbb      	ldrb	r3, [r7, #14]
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f001 f88b 	bl	800ae58 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fcce 	bl	800a6e4 <USBD_CtlSendStatus>

              break;
 8009d48:	e004      	b.n	8009d54 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8009d4a:	6839      	ldr	r1, [r7, #0]
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 fc00 	bl	800a552 <USBD_CtlError>
              break;
 8009d52:	bf00      	nop
          }
          break;
 8009d54:	e0e0      	b.n	8009f18 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d002      	beq.n	8009d66 <USBD_StdEPReq+0xf2>
 8009d60:	2b03      	cmp	r3, #3
 8009d62:	d015      	beq.n	8009d90 <USBD_StdEPReq+0x11c>
 8009d64:	e026      	b.n	8009db4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d66:	7bbb      	ldrb	r3, [r7, #14]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00c      	beq.n	8009d86 <USBD_StdEPReq+0x112>
 8009d6c:	7bbb      	ldrb	r3, [r7, #14]
 8009d6e:	2b80      	cmp	r3, #128	; 0x80
 8009d70:	d009      	beq.n	8009d86 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009d72:	7bbb      	ldrb	r3, [r7, #14]
 8009d74:	4619      	mov	r1, r3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f001 f86e 	bl	800ae58 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009d7c:	2180      	movs	r1, #128	; 0x80
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f001 f86a 	bl	800ae58 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d84:	e01c      	b.n	8009dc0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8009d86:	6839      	ldr	r1, [r7, #0]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fbe2 	bl	800a552 <USBD_CtlError>
              break;
 8009d8e:	e017      	b.n	8009dc0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	885b      	ldrh	r3, [r3, #2]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d112      	bne.n	8009dbe <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d98:	7bbb      	ldrb	r3, [r7, #14]
 8009d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d004      	beq.n	8009dac <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009da2:	7bbb      	ldrb	r3, [r7, #14]
 8009da4:	4619      	mov	r1, r3
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f001 f875 	bl	800ae96 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fc99 	bl	800a6e4 <USBD_CtlSendStatus>
              }
              break;
 8009db2:	e004      	b.n	8009dbe <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8009db4:	6839      	ldr	r1, [r7, #0]
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 fbcb 	bl	800a552 <USBD_CtlError>
              break;
 8009dbc:	e000      	b.n	8009dc0 <USBD_StdEPReq+0x14c>
              break;
 8009dbe:	bf00      	nop
          }
          break;
 8009dc0:	e0aa      	b.n	8009f18 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	d002      	beq.n	8009dd2 <USBD_StdEPReq+0x15e>
 8009dcc:	2b03      	cmp	r3, #3
 8009dce:	d032      	beq.n	8009e36 <USBD_StdEPReq+0x1c2>
 8009dd0:	e097      	b.n	8009f02 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dd2:	7bbb      	ldrb	r3, [r7, #14]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d007      	beq.n	8009de8 <USBD_StdEPReq+0x174>
 8009dd8:	7bbb      	ldrb	r3, [r7, #14]
 8009dda:	2b80      	cmp	r3, #128	; 0x80
 8009ddc:	d004      	beq.n	8009de8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8009dde:	6839      	ldr	r1, [r7, #0]
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fbb6 	bl	800a552 <USBD_CtlError>
                break;
 8009de6:	e091      	b.n	8009f0c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009de8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	da0b      	bge.n	8009e08 <USBD_StdEPReq+0x194>
 8009df0:	7bbb      	ldrb	r3, [r7, #14]
 8009df2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009df6:	4613      	mov	r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	4413      	add	r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	3310      	adds	r3, #16
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	4413      	add	r3, r2
 8009e04:	3304      	adds	r3, #4
 8009e06:	e00b      	b.n	8009e20 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e08:	7bbb      	ldrb	r3, [r7, #14]
 8009e0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e0e:	4613      	mov	r3, r2
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	4413      	add	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	3304      	adds	r3, #4
 8009e20:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	2200      	movs	r2, #0
 8009e26:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2202      	movs	r2, #2
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fbfa 	bl	800a628 <USBD_CtlSendData>
              break;
 8009e34:	e06a      	b.n	8009f0c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009e36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	da11      	bge.n	8009e62 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e3e:	7bbb      	ldrb	r3, [r7, #14]
 8009e40:	f003 020f 	and.w	r2, r3, #15
 8009e44:	6879      	ldr	r1, [r7, #4]
 8009e46:	4613      	mov	r3, r2
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	4413      	add	r3, r2
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	440b      	add	r3, r1
 8009e50:	3318      	adds	r3, #24
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d117      	bne.n	8009e88 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009e58:	6839      	ldr	r1, [r7, #0]
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 fb79 	bl	800a552 <USBD_CtlError>
                  break;
 8009e60:	e054      	b.n	8009f0c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e62:	7bbb      	ldrb	r3, [r7, #14]
 8009e64:	f003 020f 	and.w	r2, r3, #15
 8009e68:	6879      	ldr	r1, [r7, #4]
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	4413      	add	r3, r2
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	440b      	add	r3, r1
 8009e74:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d104      	bne.n	8009e88 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009e7e:	6839      	ldr	r1, [r7, #0]
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fb66 	bl	800a552 <USBD_CtlError>
                  break;
 8009e86:	e041      	b.n	8009f0c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	da0b      	bge.n	8009ea8 <USBD_StdEPReq+0x234>
 8009e90:	7bbb      	ldrb	r3, [r7, #14]
 8009e92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e96:	4613      	mov	r3, r2
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	4413      	add	r3, r2
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	3310      	adds	r3, #16
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	e00b      	b.n	8009ec0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ea8:	7bbb      	ldrb	r3, [r7, #14]
 8009eaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009eae:	4613      	mov	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	3304      	adds	r3, #4
 8009ec0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ec2:	7bbb      	ldrb	r3, [r7, #14]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d002      	beq.n	8009ece <USBD_StdEPReq+0x25a>
 8009ec8:	7bbb      	ldrb	r3, [r7, #14]
 8009eca:	2b80      	cmp	r3, #128	; 0x80
 8009ecc:	d103      	bne.n	8009ed6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	e00e      	b.n	8009ef4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009ed6:	7bbb      	ldrb	r3, [r7, #14]
 8009ed8:	4619      	mov	r1, r3
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fffa 	bl	800aed4 <USBD_LL_IsStallEP>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d003      	beq.n	8009eee <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	601a      	str	r2, [r3, #0]
 8009eec:	e002      	b.n	8009ef4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	4619      	mov	r1, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fb94 	bl	800a628 <USBD_CtlSendData>
              break;
 8009f00:	e004      	b.n	8009f0c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8009f02:	6839      	ldr	r1, [r7, #0]
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 fb24 	bl	800a552 <USBD_CtlError>
              break;
 8009f0a:	bf00      	nop
          }
          break;
 8009f0c:	e004      	b.n	8009f18 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fb1e 	bl	800a552 <USBD_CtlError>
          break;
 8009f16:	bf00      	nop
      }
      break;
 8009f18:	e004      	b.n	8009f24 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8009f1a:	6839      	ldr	r1, [r7, #0]
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 fb18 	bl	800a552 <USBD_CtlError>
      break;
 8009f22:	bf00      	nop
  }

  return ret;
 8009f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
	...

08009f30 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f42:	2300      	movs	r3, #0
 8009f44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	885b      	ldrh	r3, [r3, #2]
 8009f4a:	0a1b      	lsrs	r3, r3, #8
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	2b06      	cmp	r3, #6
 8009f52:	f200 8128 	bhi.w	800a1a6 <USBD_GetDescriptor+0x276>
 8009f56:	a201      	add	r2, pc, #4	; (adr r2, 8009f5c <USBD_GetDescriptor+0x2c>)
 8009f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f5c:	08009f79 	.word	0x08009f79
 8009f60:	08009f91 	.word	0x08009f91
 8009f64:	08009fd1 	.word	0x08009fd1
 8009f68:	0800a1a7 	.word	0x0800a1a7
 8009f6c:	0800a1a7 	.word	0x0800a1a7
 8009f70:	0800a147 	.word	0x0800a147
 8009f74:	0800a173 	.word	0x0800a173
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	7c12      	ldrb	r2, [r2, #16]
 8009f84:	f107 0108 	add.w	r1, r7, #8
 8009f88:	4610      	mov	r0, r2
 8009f8a:	4798      	blx	r3
 8009f8c:	60f8      	str	r0, [r7, #12]
      break;
 8009f8e:	e112      	b.n	800a1b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	7c1b      	ldrb	r3, [r3, #16]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10d      	bne.n	8009fb4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa0:	f107 0208 	add.w	r2, r7, #8
 8009fa4:	4610      	mov	r0, r2
 8009fa6:	4798      	blx	r3
 8009fa8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	3301      	adds	r3, #1
 8009fae:	2202      	movs	r2, #2
 8009fb0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009fb2:	e100      	b.n	800a1b6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbc:	f107 0208 	add.w	r2, r7, #8
 8009fc0:	4610      	mov	r0, r2
 8009fc2:	4798      	blx	r3
 8009fc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	2202      	movs	r2, #2
 8009fcc:	701a      	strb	r2, [r3, #0]
      break;
 8009fce:	e0f2      	b.n	800a1b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	885b      	ldrh	r3, [r3, #2]
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b05      	cmp	r3, #5
 8009fd8:	f200 80ac 	bhi.w	800a134 <USBD_GetDescriptor+0x204>
 8009fdc:	a201      	add	r2, pc, #4	; (adr r2, 8009fe4 <USBD_GetDescriptor+0xb4>)
 8009fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe2:	bf00      	nop
 8009fe4:	08009ffd 	.word	0x08009ffd
 8009fe8:	0800a031 	.word	0x0800a031
 8009fec:	0800a065 	.word	0x0800a065
 8009ff0:	0800a099 	.word	0x0800a099
 8009ff4:	0800a0cd 	.word	0x0800a0cd
 8009ff8:	0800a101 	.word	0x0800a101
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00b      	beq.n	800a020 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	7c12      	ldrb	r2, [r2, #16]
 800a014:	f107 0108 	add.w	r1, r7, #8
 800a018:	4610      	mov	r0, r2
 800a01a:	4798      	blx	r3
 800a01c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a01e:	e091      	b.n	800a144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a020:	6839      	ldr	r1, [r7, #0]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 fa95 	bl	800a552 <USBD_CtlError>
            err++;
 800a028:	7afb      	ldrb	r3, [r7, #11]
 800a02a:	3301      	adds	r3, #1
 800a02c:	72fb      	strb	r3, [r7, #11]
          break;
 800a02e:	e089      	b.n	800a144 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00b      	beq.n	800a054 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	7c12      	ldrb	r2, [r2, #16]
 800a048:	f107 0108 	add.w	r1, r7, #8
 800a04c:	4610      	mov	r0, r2
 800a04e:	4798      	blx	r3
 800a050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a052:	e077      	b.n	800a144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a054:	6839      	ldr	r1, [r7, #0]
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fa7b 	bl	800a552 <USBD_CtlError>
            err++;
 800a05c:	7afb      	ldrb	r3, [r7, #11]
 800a05e:	3301      	adds	r3, #1
 800a060:	72fb      	strb	r3, [r7, #11]
          break;
 800a062:	e06f      	b.n	800a144 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00b      	beq.n	800a088 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	7c12      	ldrb	r2, [r2, #16]
 800a07c:	f107 0108 	add.w	r1, r7, #8
 800a080:	4610      	mov	r0, r2
 800a082:	4798      	blx	r3
 800a084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a086:	e05d      	b.n	800a144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a088:	6839      	ldr	r1, [r7, #0]
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fa61 	bl	800a552 <USBD_CtlError>
            err++;
 800a090:	7afb      	ldrb	r3, [r7, #11]
 800a092:	3301      	adds	r3, #1
 800a094:	72fb      	strb	r3, [r7, #11]
          break;
 800a096:	e055      	b.n	800a144 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00b      	beq.n	800a0bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0aa:	691b      	ldr	r3, [r3, #16]
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	7c12      	ldrb	r2, [r2, #16]
 800a0b0:	f107 0108 	add.w	r1, r7, #8
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	4798      	blx	r3
 800a0b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ba:	e043      	b.n	800a144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 fa47 	bl	800a552 <USBD_CtlError>
            err++;
 800a0c4:	7afb      	ldrb	r3, [r7, #11]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a0ca:	e03b      	b.n	800a144 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0d2:	695b      	ldr	r3, [r3, #20]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00b      	beq.n	800a0f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0de:	695b      	ldr	r3, [r3, #20]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	7c12      	ldrb	r2, [r2, #16]
 800a0e4:	f107 0108 	add.w	r1, r7, #8
 800a0e8:	4610      	mov	r0, r2
 800a0ea:	4798      	blx	r3
 800a0ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ee:	e029      	b.n	800a144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0f0:	6839      	ldr	r1, [r7, #0]
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fa2d 	bl	800a552 <USBD_CtlError>
            err++;
 800a0f8:	7afb      	ldrb	r3, [r7, #11]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a0fe:	e021      	b.n	800a144 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d00b      	beq.n	800a124 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	7c12      	ldrb	r2, [r2, #16]
 800a118:	f107 0108 	add.w	r1, r7, #8
 800a11c:	4610      	mov	r0, r2
 800a11e:	4798      	blx	r3
 800a120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a122:	e00f      	b.n	800a144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 fa13 	bl	800a552 <USBD_CtlError>
            err++;
 800a12c:	7afb      	ldrb	r3, [r7, #11]
 800a12e:	3301      	adds	r3, #1
 800a130:	72fb      	strb	r3, [r7, #11]
          break;
 800a132:	e007      	b.n	800a144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a134:	6839      	ldr	r1, [r7, #0]
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fa0b 	bl	800a552 <USBD_CtlError>
          err++;
 800a13c:	7afb      	ldrb	r3, [r7, #11]
 800a13e:	3301      	adds	r3, #1
 800a140:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a142:	e038      	b.n	800a1b6 <USBD_GetDescriptor+0x286>
 800a144:	e037      	b.n	800a1b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	7c1b      	ldrb	r3, [r3, #16]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d109      	bne.n	800a162 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a156:	f107 0208 	add.w	r2, r7, #8
 800a15a:	4610      	mov	r0, r2
 800a15c:	4798      	blx	r3
 800a15e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a160:	e029      	b.n	800a1b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a162:	6839      	ldr	r1, [r7, #0]
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 f9f4 	bl	800a552 <USBD_CtlError>
        err++;
 800a16a:	7afb      	ldrb	r3, [r7, #11]
 800a16c:	3301      	adds	r3, #1
 800a16e:	72fb      	strb	r3, [r7, #11]
      break;
 800a170:	e021      	b.n	800a1b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	7c1b      	ldrb	r3, [r3, #16]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d10d      	bne.n	800a196 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a182:	f107 0208 	add.w	r2, r7, #8
 800a186:	4610      	mov	r0, r2
 800a188:	4798      	blx	r3
 800a18a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	3301      	adds	r3, #1
 800a190:	2207      	movs	r2, #7
 800a192:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a194:	e00f      	b.n	800a1b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f9da 	bl	800a552 <USBD_CtlError>
        err++;
 800a19e:	7afb      	ldrb	r3, [r7, #11]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	72fb      	strb	r3, [r7, #11]
      break;
 800a1a4:	e007      	b.n	800a1b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a1a6:	6839      	ldr	r1, [r7, #0]
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f9d2 	bl	800a552 <USBD_CtlError>
      err++;
 800a1ae:	7afb      	ldrb	r3, [r7, #11]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	72fb      	strb	r3, [r7, #11]
      break;
 800a1b4:	bf00      	nop
  }

  if (err != 0U)
 800a1b6:	7afb      	ldrb	r3, [r7, #11]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d11c      	bne.n	800a1f6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a1bc:	893b      	ldrh	r3, [r7, #8]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d011      	beq.n	800a1e6 <USBD_GetDescriptor+0x2b6>
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	88db      	ldrh	r3, [r3, #6]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00d      	beq.n	800a1e6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	88da      	ldrh	r2, [r3, #6]
 800a1ce:	893b      	ldrh	r3, [r7, #8]
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	bf28      	it	cs
 800a1d4:	4613      	movcs	r3, r2
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a1da:	893b      	ldrh	r3, [r7, #8]
 800a1dc:	461a      	mov	r2, r3
 800a1de:	68f9      	ldr	r1, [r7, #12]
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 fa21 	bl	800a628 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	88db      	ldrh	r3, [r3, #6]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d104      	bne.n	800a1f8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fa78 	bl	800a6e4 <USBD_CtlSendStatus>
 800a1f4:	e000      	b.n	800a1f8 <USBD_GetDescriptor+0x2c8>
    return;
 800a1f6:	bf00      	nop
    }
  }
}
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop

0800a200 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	889b      	ldrh	r3, [r3, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d130      	bne.n	800a274 <USBD_SetAddress+0x74>
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	88db      	ldrh	r3, [r3, #6]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d12c      	bne.n	800a274 <USBD_SetAddress+0x74>
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	885b      	ldrh	r3, [r3, #2]
 800a21e:	2b7f      	cmp	r3, #127	; 0x7f
 800a220:	d828      	bhi.n	800a274 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	885b      	ldrh	r3, [r3, #2]
 800a226:	b2db      	uxtb	r3, r3
 800a228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a22c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a234:	2b03      	cmp	r3, #3
 800a236:	d104      	bne.n	800a242 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a238:	6839      	ldr	r1, [r7, #0]
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 f989 	bl	800a552 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a240:	e01c      	b.n	800a27c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	7bfa      	ldrb	r2, [r7, #15]
 800a246:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a24a:	7bfb      	ldrb	r3, [r7, #15]
 800a24c:	4619      	mov	r1, r3
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fe6d 	bl	800af2e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 fa45 	bl	800a6e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a25a:	7bfb      	ldrb	r3, [r7, #15]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d004      	beq.n	800a26a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2202      	movs	r2, #2
 800a264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a268:	e008      	b.n	800a27c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2201      	movs	r2, #1
 800a26e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a272:	e003      	b.n	800a27c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a274:	6839      	ldr	r1, [r7, #0]
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 f96b 	bl	800a552 <USBD_CtlError>
  }
}
 800a27c:	bf00      	nop
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	885b      	ldrh	r3, [r3, #2]
 800a292:	b2da      	uxtb	r2, r3
 800a294:	4b41      	ldr	r3, [pc, #260]	; (800a39c <USBD_SetConfig+0x118>)
 800a296:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a298:	4b40      	ldr	r3, [pc, #256]	; (800a39c <USBD_SetConfig+0x118>)
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d904      	bls.n	800a2aa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f955 	bl	800a552 <USBD_CtlError>
 800a2a8:	e075      	b.n	800a396 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d002      	beq.n	800a2ba <USBD_SetConfig+0x36>
 800a2b4:	2b03      	cmp	r3, #3
 800a2b6:	d023      	beq.n	800a300 <USBD_SetConfig+0x7c>
 800a2b8:	e062      	b.n	800a380 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a2ba:	4b38      	ldr	r3, [pc, #224]	; (800a39c <USBD_SetConfig+0x118>)
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d01a      	beq.n	800a2f8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a2c2:	4b36      	ldr	r3, [pc, #216]	; (800a39c <USBD_SetConfig+0x118>)
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2203      	movs	r2, #3
 800a2d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a2d4:	4b31      	ldr	r3, [pc, #196]	; (800a39c <USBD_SetConfig+0x118>)
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	4619      	mov	r1, r3
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7ff f9f0 	bl	80096c0 <USBD_SetClassConfig>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d104      	bne.n	800a2f0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a2e6:	6839      	ldr	r1, [r7, #0]
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 f932 	bl	800a552 <USBD_CtlError>
            return;
 800a2ee:	e052      	b.n	800a396 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 f9f7 	bl	800a6e4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a2f6:	e04e      	b.n	800a396 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f9f3 	bl	800a6e4 <USBD_CtlSendStatus>
        break;
 800a2fe:	e04a      	b.n	800a396 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a300:	4b26      	ldr	r3, [pc, #152]	; (800a39c <USBD_SetConfig+0x118>)
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d112      	bne.n	800a32e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2202      	movs	r2, #2
 800a30c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a310:	4b22      	ldr	r3, [pc, #136]	; (800a39c <USBD_SetConfig+0x118>)
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	461a      	mov	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a31a:	4b20      	ldr	r3, [pc, #128]	; (800a39c <USBD_SetConfig+0x118>)
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	4619      	mov	r1, r3
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f7ff f9ec 	bl	80096fe <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 f9dc 	bl	800a6e4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a32c:	e033      	b.n	800a396 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a32e:	4b1b      	ldr	r3, [pc, #108]	; (800a39c <USBD_SetConfig+0x118>)
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	461a      	mov	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d01d      	beq.n	800a378 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	b2db      	uxtb	r3, r3
 800a342:	4619      	mov	r1, r3
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f7ff f9da 	bl	80096fe <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a34a:	4b14      	ldr	r3, [pc, #80]	; (800a39c <USBD_SetConfig+0x118>)
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	461a      	mov	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a354:	4b11      	ldr	r3, [pc, #68]	; (800a39c <USBD_SetConfig+0x118>)
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	4619      	mov	r1, r3
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7ff f9b0 	bl	80096c0 <USBD_SetClassConfig>
 800a360:	4603      	mov	r3, r0
 800a362:	2b02      	cmp	r3, #2
 800a364:	d104      	bne.n	800a370 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a366:	6839      	ldr	r1, [r7, #0]
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 f8f2 	bl	800a552 <USBD_CtlError>
            return;
 800a36e:	e012      	b.n	800a396 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 f9b7 	bl	800a6e4 <USBD_CtlSendStatus>
        break;
 800a376:	e00e      	b.n	800a396 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 f9b3 	bl	800a6e4 <USBD_CtlSendStatus>
        break;
 800a37e:	e00a      	b.n	800a396 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f8e5 	bl	800a552 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a388:	4b04      	ldr	r3, [pc, #16]	; (800a39c <USBD_SetConfig+0x118>)
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	4619      	mov	r1, r3
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7ff f9b5 	bl	80096fe <USBD_ClrClassConfig>
        break;
 800a394:	bf00      	nop
    }
  }
}
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	200003c0 	.word	0x200003c0

0800a3a0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	88db      	ldrh	r3, [r3, #6]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d004      	beq.n	800a3bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 f8cc 	bl	800a552 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a3ba:	e021      	b.n	800a400 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	db17      	blt.n	800a3f6 <USBD_GetConfig+0x56>
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	dd02      	ble.n	800a3d0 <USBD_GetConfig+0x30>
 800a3ca:	2b03      	cmp	r3, #3
 800a3cc:	d00b      	beq.n	800a3e6 <USBD_GetConfig+0x46>
 800a3ce:	e012      	b.n	800a3f6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	3308      	adds	r3, #8
 800a3da:	2201      	movs	r2, #1
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 f922 	bl	800a628 <USBD_CtlSendData>
        break;
 800a3e4:	e00c      	b.n	800a400 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3304      	adds	r3, #4
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 f91a 	bl	800a628 <USBD_CtlSendData>
        break;
 800a3f4:	e004      	b.n	800a400 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800a3f6:	6839      	ldr	r1, [r7, #0]
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 f8aa 	bl	800a552 <USBD_CtlError>
        break;
 800a3fe:	bf00      	nop
}
 800a400:	bf00      	nop
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a418:	3b01      	subs	r3, #1
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d81e      	bhi.n	800a45c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	88db      	ldrh	r3, [r3, #6]
 800a422:	2b02      	cmp	r3, #2
 800a424:	d004      	beq.n	800a430 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a426:	6839      	ldr	r1, [r7, #0]
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 f892 	bl	800a552 <USBD_CtlError>
        break;
 800a42e:	e01a      	b.n	800a466 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2201      	movs	r2, #1
 800a434:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d005      	beq.n	800a44c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	f043 0202 	orr.w	r2, r3, #2
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	330c      	adds	r3, #12
 800a450:	2202      	movs	r2, #2
 800a452:	4619      	mov	r1, r3
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 f8e7 	bl	800a628 <USBD_CtlSendData>
      break;
 800a45a:	e004      	b.n	800a466 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a45c:	6839      	ldr	r1, [r7, #0]
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f877 	bl	800a552 <USBD_CtlError>
      break;
 800a464:	bf00      	nop
  }
}
 800a466:	bf00      	nop
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b082      	sub	sp, #8
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	885b      	ldrh	r3, [r3, #2]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d106      	bne.n	800a48e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 f92b 	bl	800a6e4 <USBD_CtlSendStatus>
  }
}
 800a48e:	bf00      	nop
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b082      	sub	sp, #8
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d80b      	bhi.n	800a4c4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	885b      	ldrh	r3, [r3, #2]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d10c      	bne.n	800a4ce <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 f911 	bl	800a6e4 <USBD_CtlSendStatus>
      }
      break;
 800a4c2:	e004      	b.n	800a4ce <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a4c4:	6839      	ldr	r1, [r7, #0]
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f843 	bl	800a552 <USBD_CtlError>
      break;
 800a4cc:	e000      	b.n	800a4d0 <USBD_ClrFeature+0x3a>
      break;
 800a4ce:	bf00      	nop
  }
}
 800a4d0:	bf00      	nop
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	781a      	ldrb	r2, [r3, #0]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	785a      	ldrb	r2, [r3, #1]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	3302      	adds	r3, #2
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	3303      	adds	r3, #3
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	b29b      	uxth	r3, r3
 800a502:	021b      	lsls	r3, r3, #8
 800a504:	b29b      	uxth	r3, r3
 800a506:	4413      	add	r3, r2
 800a508:	b29a      	uxth	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	3304      	adds	r3, #4
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	b29a      	uxth	r2, r3
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	3305      	adds	r3, #5
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	021b      	lsls	r3, r3, #8
 800a520:	b29b      	uxth	r3, r3
 800a522:	4413      	add	r3, r2
 800a524:	b29a      	uxth	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	3306      	adds	r3, #6
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	b29a      	uxth	r2, r3
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	3307      	adds	r3, #7
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	b29b      	uxth	r3, r3
 800a53a:	021b      	lsls	r3, r3, #8
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	4413      	add	r3, r2
 800a540:	b29a      	uxth	r2, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	80da      	strh	r2, [r3, #6]

}
 800a546:	bf00      	nop
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr

0800a552 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a55c:	2180      	movs	r1, #128	; 0x80
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fc7a 	bl	800ae58 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a564:	2100      	movs	r1, #0
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 fc76 	bl	800ae58 <USBD_LL_StallEP>
}
 800a56c:	bf00      	nop
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b086      	sub	sp, #24
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a580:	2300      	movs	r3, #0
 800a582:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d032      	beq.n	800a5f0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f000 f834 	bl	800a5f8 <USBD_GetLen>
 800a590:	4603      	mov	r3, r0
 800a592:	3301      	adds	r3, #1
 800a594:	b29b      	uxth	r3, r3
 800a596:	005b      	lsls	r3, r3, #1
 800a598:	b29a      	uxth	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a59e:	7dfb      	ldrb	r3, [r7, #23]
 800a5a0:	1c5a      	adds	r2, r3, #1
 800a5a2:	75fa      	strb	r2, [r7, #23]
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	7812      	ldrb	r2, [r2, #0]
 800a5ae:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a5b0:	7dfb      	ldrb	r3, [r7, #23]
 800a5b2:	1c5a      	adds	r2, r3, #1
 800a5b4:	75fa      	strb	r2, [r7, #23]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	2203      	movs	r2, #3
 800a5be:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a5c0:	e012      	b.n	800a5e8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	1c5a      	adds	r2, r3, #1
 800a5c6:	60fa      	str	r2, [r7, #12]
 800a5c8:	7dfa      	ldrb	r2, [r7, #23]
 800a5ca:	1c51      	adds	r1, r2, #1
 800a5cc:	75f9      	strb	r1, [r7, #23]
 800a5ce:	4611      	mov	r1, r2
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	440a      	add	r2, r1
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a5d8:	7dfb      	ldrb	r3, [r7, #23]
 800a5da:	1c5a      	adds	r2, r3, #1
 800a5dc:	75fa      	strb	r2, [r7, #23]
 800a5de:	461a      	mov	r2, r3
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d1e8      	bne.n	800a5c2 <USBD_GetString+0x4e>
    }
  }
}
 800a5f0:	bf00      	nop
 800a5f2:	3718      	adds	r7, #24
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a600:	2300      	movs	r3, #0
 800a602:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a604:	e005      	b.n	800a612 <USBD_GetLen+0x1a>
  {
    len++;
 800a606:	7bfb      	ldrb	r3, [r7, #15]
 800a608:	3301      	adds	r3, #1
 800a60a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	3301      	adds	r3, #1
 800a610:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1f5      	bne.n	800a606 <USBD_GetLen+0xe>
  }

  return len;
 800a61a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	4613      	mov	r3, r2
 800a634:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2202      	movs	r2, #2
 800a63a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a63e:	88fa      	ldrh	r2, [r7, #6]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a644:	88fa      	ldrh	r2, [r7, #6]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a64a:	88fb      	ldrh	r3, [r7, #6]
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	2100      	movs	r1, #0
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f000 fc8b 	bl	800af6c <USBD_LL_Transmit>

  return USBD_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	4613      	mov	r3, r2
 800a66c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a66e:	88fb      	ldrh	r3, [r7, #6]
 800a670:	68ba      	ldr	r2, [r7, #8]
 800a672:	2100      	movs	r1, #0
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f000 fc79 	bl	800af6c <USBD_LL_Transmit>

  return USBD_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	4613      	mov	r3, r2
 800a690:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2203      	movs	r2, #3
 800a696:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a69a:	88fa      	ldrh	r2, [r7, #6]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a6a2:	88fa      	ldrh	r2, [r7, #6]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6aa:	88fb      	ldrh	r3, [r7, #6]
 800a6ac:	68ba      	ldr	r2, [r7, #8]
 800a6ae:	2100      	movs	r1, #0
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f000 fc7e 	bl	800afb2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6ce:	88fb      	ldrh	r3, [r7, #6]
 800a6d0:	68ba      	ldr	r2, [r7, #8]
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f000 fc6c 	bl	800afb2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2204      	movs	r2, #4
 800a6f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 fc36 	bl	800af6c <USBD_LL_Transmit>

  return USBD_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b082      	sub	sp, #8
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2205      	movs	r2, #5
 800a716:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a71a:	2300      	movs	r3, #0
 800a71c:	2200      	movs	r2, #0
 800a71e:	2100      	movs	r1, #0
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 fc46 	bl	800afb2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a734:	2200      	movs	r2, #0
 800a736:	4912      	ldr	r1, [pc, #72]	; (800a780 <MX_USB_DEVICE_Init+0x50>)
 800a738:	4812      	ldr	r0, [pc, #72]	; (800a784 <MX_USB_DEVICE_Init+0x54>)
 800a73a:	f7fe ff65 	bl	8009608 <USBD_Init>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a744:	f7f6 fd92 	bl	800126c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a748:	490f      	ldr	r1, [pc, #60]	; (800a788 <MX_USB_DEVICE_Init+0x58>)
 800a74a:	480e      	ldr	r0, [pc, #56]	; (800a784 <MX_USB_DEVICE_Init+0x54>)
 800a74c:	f7fe ff87 	bl	800965e <USBD_RegisterClass>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a756:	f7f6 fd89 	bl	800126c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a75a:	490c      	ldr	r1, [pc, #48]	; (800a78c <MX_USB_DEVICE_Init+0x5c>)
 800a75c:	4809      	ldr	r0, [pc, #36]	; (800a784 <MX_USB_DEVICE_Init+0x54>)
 800a75e:	f7fe feb5 	bl	80094cc <USBD_CDC_RegisterInterface>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d001      	beq.n	800a76c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a768:	f7f6 fd80 	bl	800126c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a76c:	4805      	ldr	r0, [pc, #20]	; (800a784 <MX_USB_DEVICE_Init+0x54>)
 800a76e:	f7fe ff90 	bl	8009692 <USBD_Start>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d001      	beq.n	800a77c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a778:	f7f6 fd78 	bl	800126c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a77c:	bf00      	nop
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	20000198 	.word	0x20000198
 800a784:	200006a0 	.word	0x200006a0
 800a788:	20000084 	.word	0x20000084
 800a78c:	20000188 	.word	0x20000188

0800a790 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a794:	2200      	movs	r2, #0
 800a796:	4905      	ldr	r1, [pc, #20]	; (800a7ac <CDC_Init_FS+0x1c>)
 800a798:	4805      	ldr	r0, [pc, #20]	; (800a7b0 <CDC_Init_FS+0x20>)
 800a79a:	f7fe feae 	bl	80094fa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a79e:	4905      	ldr	r1, [pc, #20]	; (800a7b4 <CDC_Init_FS+0x24>)
 800a7a0:	4803      	ldr	r0, [pc, #12]	; (800a7b0 <CDC_Init_FS+0x20>)
 800a7a2:	f7fe fec4 	bl	800952e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a7a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	20000d4c 	.word	0x20000d4c
 800a7b0:	200006a0 	.word	0x200006a0
 800a7b4:	20000964 	.word	0x20000964

0800a7b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a7bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	6039      	str	r1, [r7, #0]
 800a7d2:	71fb      	strb	r3, [r7, #7]
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a7d8:	79fb      	ldrb	r3, [r7, #7]
 800a7da:	2b23      	cmp	r3, #35	; 0x23
 800a7dc:	d84a      	bhi.n	800a874 <CDC_Control_FS+0xac>
 800a7de:	a201      	add	r2, pc, #4	; (adr r2, 800a7e4 <CDC_Control_FS+0x1c>)
 800a7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e4:	0800a875 	.word	0x0800a875
 800a7e8:	0800a875 	.word	0x0800a875
 800a7ec:	0800a875 	.word	0x0800a875
 800a7f0:	0800a875 	.word	0x0800a875
 800a7f4:	0800a875 	.word	0x0800a875
 800a7f8:	0800a875 	.word	0x0800a875
 800a7fc:	0800a875 	.word	0x0800a875
 800a800:	0800a875 	.word	0x0800a875
 800a804:	0800a875 	.word	0x0800a875
 800a808:	0800a875 	.word	0x0800a875
 800a80c:	0800a875 	.word	0x0800a875
 800a810:	0800a875 	.word	0x0800a875
 800a814:	0800a875 	.word	0x0800a875
 800a818:	0800a875 	.word	0x0800a875
 800a81c:	0800a875 	.word	0x0800a875
 800a820:	0800a875 	.word	0x0800a875
 800a824:	0800a875 	.word	0x0800a875
 800a828:	0800a875 	.word	0x0800a875
 800a82c:	0800a875 	.word	0x0800a875
 800a830:	0800a875 	.word	0x0800a875
 800a834:	0800a875 	.word	0x0800a875
 800a838:	0800a875 	.word	0x0800a875
 800a83c:	0800a875 	.word	0x0800a875
 800a840:	0800a875 	.word	0x0800a875
 800a844:	0800a875 	.word	0x0800a875
 800a848:	0800a875 	.word	0x0800a875
 800a84c:	0800a875 	.word	0x0800a875
 800a850:	0800a875 	.word	0x0800a875
 800a854:	0800a875 	.word	0x0800a875
 800a858:	0800a875 	.word	0x0800a875
 800a85c:	0800a875 	.word	0x0800a875
 800a860:	0800a875 	.word	0x0800a875
 800a864:	0800a875 	.word	0x0800a875
 800a868:	0800a875 	.word	0x0800a875
 800a86c:	0800a875 	.word	0x0800a875
 800a870:	0800a875 	.word	0x0800a875
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a874:	bf00      	nop
  }

  return (USBD_OK);
 800a876:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a878:	4618      	mov	r0, r3
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a88e:	6879      	ldr	r1, [r7, #4]
 800a890:	4805      	ldr	r0, [pc, #20]	; (800a8a8 <CDC_Receive_FS+0x24>)
 800a892:	f7fe fe4c 	bl	800952e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a896:	4804      	ldr	r0, [pc, #16]	; (800a8a8 <CDC_Receive_FS+0x24>)
 800a898:	f7fe fe8c 	bl	80095b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a89c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	200006a0 	.word	0x200006a0

0800a8ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a8bc:	4b0d      	ldr	r3, [pc, #52]	; (800a8f4 <CDC_Transmit_FS+0x48>)
 800a8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e00b      	b.n	800a8ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a8d2:	887b      	ldrh	r3, [r7, #2]
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	6879      	ldr	r1, [r7, #4]
 800a8d8:	4806      	ldr	r0, [pc, #24]	; (800a8f4 <CDC_Transmit_FS+0x48>)
 800a8da:	f7fe fe0e 	bl	80094fa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a8de:	4805      	ldr	r0, [pc, #20]	; (800a8f4 <CDC_Transmit_FS+0x48>)
 800a8e0:	f7fe fe39 	bl	8009556 <USBD_CDC_TransmitPacket>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	200006a0 	.word	0x200006a0

0800a8f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	4603      	mov	r3, r0
 800a900:	6039      	str	r1, [r7, #0]
 800a902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	2212      	movs	r2, #18
 800a908:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a90a:	4b03      	ldr	r3, [pc, #12]	; (800a918 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr
 800a918:	200001b4 	.word	0x200001b4

0800a91c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	4603      	mov	r3, r0
 800a924:	6039      	str	r1, [r7, #0]
 800a926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	2204      	movs	r2, #4
 800a92c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a92e:	4b03      	ldr	r3, [pc, #12]	; (800a93c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a930:	4618      	mov	r0, r3
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr
 800a93c:	200001c8 	.word	0x200001c8

0800a940 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	4603      	mov	r3, r0
 800a948:	6039      	str	r1, [r7, #0]
 800a94a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a94c:	79fb      	ldrb	r3, [r7, #7]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d105      	bne.n	800a95e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	4907      	ldr	r1, [pc, #28]	; (800a974 <USBD_FS_ProductStrDescriptor+0x34>)
 800a956:	4808      	ldr	r0, [pc, #32]	; (800a978 <USBD_FS_ProductStrDescriptor+0x38>)
 800a958:	f7ff fe0c 	bl	800a574 <USBD_GetString>
 800a95c:	e004      	b.n	800a968 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a95e:	683a      	ldr	r2, [r7, #0]
 800a960:	4904      	ldr	r1, [pc, #16]	; (800a974 <USBD_FS_ProductStrDescriptor+0x34>)
 800a962:	4805      	ldr	r0, [pc, #20]	; (800a978 <USBD_FS_ProductStrDescriptor+0x38>)
 800a964:	f7ff fe06 	bl	800a574 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a968:	4b02      	ldr	r3, [pc, #8]	; (800a974 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	20001134 	.word	0x20001134
 800a978:	0800bb60 	.word	0x0800bb60

0800a97c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	4603      	mov	r3, r0
 800a984:	6039      	str	r1, [r7, #0]
 800a986:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a988:	683a      	ldr	r2, [r7, #0]
 800a98a:	4904      	ldr	r1, [pc, #16]	; (800a99c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a98c:	4804      	ldr	r0, [pc, #16]	; (800a9a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a98e:	f7ff fdf1 	bl	800a574 <USBD_GetString>
  return USBD_StrDesc;
 800a992:	4b02      	ldr	r3, [pc, #8]	; (800a99c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a994:	4618      	mov	r0, r3
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	20001134 	.word	0x20001134
 800a9a0:	0800bb78 	.word	0x0800bb78

0800a9a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	6039      	str	r1, [r7, #0]
 800a9ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	221a      	movs	r2, #26
 800a9b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a9b6:	f000 f843 	bl	800aa40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a9ba:	4b02      	ldr	r3, [pc, #8]	; (800a9c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3708      	adds	r7, #8
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	200001cc 	.word	0x200001cc

0800a9c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	6039      	str	r1, [r7, #0]
 800a9d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a9d4:	79fb      	ldrb	r3, [r7, #7]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d105      	bne.n	800a9e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9da:	683a      	ldr	r2, [r7, #0]
 800a9dc:	4907      	ldr	r1, [pc, #28]	; (800a9fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9de:	4808      	ldr	r0, [pc, #32]	; (800aa00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9e0:	f7ff fdc8 	bl	800a574 <USBD_GetString>
 800a9e4:	e004      	b.n	800a9f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9e6:	683a      	ldr	r2, [r7, #0]
 800a9e8:	4904      	ldr	r1, [pc, #16]	; (800a9fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9ea:	4805      	ldr	r0, [pc, #20]	; (800aa00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9ec:	f7ff fdc2 	bl	800a574 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9f0:	4b02      	ldr	r3, [pc, #8]	; (800a9fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3708      	adds	r7, #8
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	20001134 	.word	0x20001134
 800aa00:	0800bb8c 	.word	0x0800bb8c

0800aa04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	6039      	str	r1, [r7, #0]
 800aa0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa10:	79fb      	ldrb	r3, [r7, #7]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d105      	bne.n	800aa22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa16:	683a      	ldr	r2, [r7, #0]
 800aa18:	4907      	ldr	r1, [pc, #28]	; (800aa38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa1a:	4808      	ldr	r0, [pc, #32]	; (800aa3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa1c:	f7ff fdaa 	bl	800a574 <USBD_GetString>
 800aa20:	e004      	b.n	800aa2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa22:	683a      	ldr	r2, [r7, #0]
 800aa24:	4904      	ldr	r1, [pc, #16]	; (800aa38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa26:	4805      	ldr	r0, [pc, #20]	; (800aa3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa28:	f7ff fda4 	bl	800a574 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa2c:	4b02      	ldr	r3, [pc, #8]	; (800aa38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3708      	adds	r7, #8
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	20001134 	.word	0x20001134
 800aa3c:	0800bb98 	.word	0x0800bb98

0800aa40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa46:	4b0f      	ldr	r3, [pc, #60]	; (800aa84 <Get_SerialNum+0x44>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aa4c:	4b0e      	ldr	r3, [pc, #56]	; (800aa88 <Get_SerialNum+0x48>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aa52:	4b0e      	ldr	r3, [pc, #56]	; (800aa8c <Get_SerialNum+0x4c>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d009      	beq.n	800aa7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa66:	2208      	movs	r2, #8
 800aa68:	4909      	ldr	r1, [pc, #36]	; (800aa90 <Get_SerialNum+0x50>)
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f000 f814 	bl	800aa98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa70:	2204      	movs	r2, #4
 800aa72:	4908      	ldr	r1, [pc, #32]	; (800aa94 <Get_SerialNum+0x54>)
 800aa74:	68b8      	ldr	r0, [r7, #8]
 800aa76:	f000 f80f 	bl	800aa98 <IntToUnicode>
  }
}
 800aa7a:	bf00      	nop
 800aa7c:	3710      	adds	r7, #16
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	1ffff7ac 	.word	0x1ffff7ac
 800aa88:	1ffff7b0 	.word	0x1ffff7b0
 800aa8c:	1ffff7b4 	.word	0x1ffff7b4
 800aa90:	200001ce 	.word	0x200001ce
 800aa94:	200001de 	.word	0x200001de

0800aa98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b087      	sub	sp, #28
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aaaa:	2300      	movs	r3, #0
 800aaac:	75fb      	strb	r3, [r7, #23]
 800aaae:	e027      	b.n	800ab00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	0f1b      	lsrs	r3, r3, #28
 800aab4:	2b09      	cmp	r3, #9
 800aab6:	d80b      	bhi.n	800aad0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	0f1b      	lsrs	r3, r3, #28
 800aabc:	b2da      	uxtb	r2, r3
 800aabe:	7dfb      	ldrb	r3, [r7, #23]
 800aac0:	005b      	lsls	r3, r3, #1
 800aac2:	4619      	mov	r1, r3
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	440b      	add	r3, r1
 800aac8:	3230      	adds	r2, #48	; 0x30
 800aaca:	b2d2      	uxtb	r2, r2
 800aacc:	701a      	strb	r2, [r3, #0]
 800aace:	e00a      	b.n	800aae6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	0f1b      	lsrs	r3, r3, #28
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	7dfb      	ldrb	r3, [r7, #23]
 800aad8:	005b      	lsls	r3, r3, #1
 800aada:	4619      	mov	r1, r3
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	440b      	add	r3, r1
 800aae0:	3237      	adds	r2, #55	; 0x37
 800aae2:	b2d2      	uxtb	r2, r2
 800aae4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	011b      	lsls	r3, r3, #4
 800aaea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aaec:	7dfb      	ldrb	r3, [r7, #23]
 800aaee:	005b      	lsls	r3, r3, #1
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	68ba      	ldr	r2, [r7, #8]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aafa:	7dfb      	ldrb	r3, [r7, #23]
 800aafc:	3301      	adds	r3, #1
 800aafe:	75fb      	strb	r3, [r7, #23]
 800ab00:	7dfa      	ldrb	r2, [r7, #23]
 800ab02:	79fb      	ldrb	r3, [r7, #7]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d3d3      	bcc.n	800aab0 <IntToUnicode+0x18>
  }
}
 800ab08:	bf00      	nop
 800ab0a:	371c      	adds	r7, #28
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b08a      	sub	sp, #40	; 0x28
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab1c:	f107 0314 	add.w	r3, r7, #20
 800ab20:	2200      	movs	r2, #0
 800ab22:	601a      	str	r2, [r3, #0]
 800ab24:	605a      	str	r2, [r3, #4]
 800ab26:	609a      	str	r2, [r3, #8]
 800ab28:	60da      	str	r2, [r3, #12]
 800ab2a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a1c      	ldr	r2, [pc, #112]	; (800aba4 <HAL_PCD_MspInit+0x90>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d131      	bne.n	800ab9a <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab36:	4b1c      	ldr	r3, [pc, #112]	; (800aba8 <HAL_PCD_MspInit+0x94>)
 800ab38:	695b      	ldr	r3, [r3, #20]
 800ab3a:	4a1b      	ldr	r2, [pc, #108]	; (800aba8 <HAL_PCD_MspInit+0x94>)
 800ab3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab40:	6153      	str	r3, [r2, #20]
 800ab42:	4b19      	ldr	r3, [pc, #100]	; (800aba8 <HAL_PCD_MspInit+0x94>)
 800ab44:	695b      	ldr	r3, [r3, #20]
 800ab46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab4a:	613b      	str	r3, [r7, #16]
 800ab4c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ab4e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ab52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab54:	2302      	movs	r3, #2
 800ab56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800ab60:	230e      	movs	r3, #14
 800ab62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab64:	f107 0314 	add.w	r3, r7, #20
 800ab68:	4619      	mov	r1, r3
 800ab6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ab6e:	f7f7 f94f 	bl	8001e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ab72:	4b0d      	ldr	r3, [pc, #52]	; (800aba8 <HAL_PCD_MspInit+0x94>)
 800ab74:	69db      	ldr	r3, [r3, #28]
 800ab76:	4a0c      	ldr	r2, [pc, #48]	; (800aba8 <HAL_PCD_MspInit+0x94>)
 800ab78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ab7c:	61d3      	str	r3, [r2, #28]
 800ab7e:	4b0a      	ldr	r3, [pc, #40]	; (800aba8 <HAL_PCD_MspInit+0x94>)
 800ab80:	69db      	ldr	r3, [r3, #28]
 800ab82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab86:	60fb      	str	r3, [r7, #12]
 800ab88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	2014      	movs	r0, #20
 800ab90:	f7f7 f8d6 	bl	8001d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800ab94:	2014      	movs	r0, #20
 800ab96:	f7f7 f8ff 	bl	8001d98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ab9a:	bf00      	nop
 800ab9c:	3728      	adds	r7, #40	; 0x28
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	40005c00 	.word	0x40005c00
 800aba8:	40021000 	.word	0x40021000

0800abac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800abc0:	4619      	mov	r1, r3
 800abc2:	4610      	mov	r0, r2
 800abc4:	f7fe fdae 	bl	8009724 <USBD_LL_SetupStage>
}
 800abc8:	bf00      	nop
 800abca:	3708      	adds	r7, #8
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	460b      	mov	r3, r1
 800abda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800abe2:	78fa      	ldrb	r2, [r7, #3]
 800abe4:	6879      	ldr	r1, [r7, #4]
 800abe6:	4613      	mov	r3, r2
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	4413      	add	r3, r2
 800abec:	00db      	lsls	r3, r3, #3
 800abee:	440b      	add	r3, r1
 800abf0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	78fb      	ldrb	r3, [r7, #3]
 800abf8:	4619      	mov	r1, r3
 800abfa:	f7fe fdde 	bl	80097ba <USBD_LL_DataOutStage>
}
 800abfe:	bf00      	nop
 800ac00:	3708      	adds	r7, #8
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b082      	sub	sp, #8
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	460b      	mov	r3, r1
 800ac10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ac18:	78fa      	ldrb	r2, [r7, #3]
 800ac1a:	6879      	ldr	r1, [r7, #4]
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	4413      	add	r3, r2
 800ac22:	00db      	lsls	r3, r3, #3
 800ac24:	440b      	add	r3, r1
 800ac26:	333c      	adds	r3, #60	; 0x3c
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	78fb      	ldrb	r3, [r7, #3]
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	f7fe fe35 	bl	800989c <USBD_LL_DataInStage>
}
 800ac32:	bf00      	nop
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b082      	sub	sp, #8
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7fe ff48 	bl	8009ade <USBD_LL_SOF>
}
 800ac4e:	bf00      	nop
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b084      	sub	sp, #16
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	d001      	beq.n	800ac6e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ac6a:	f7f6 faff 	bl	800126c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ac74:	7bfa      	ldrb	r2, [r7, #15]
 800ac76:	4611      	mov	r1, r2
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7fe fef5 	bl	8009a68 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7fe feae 	bl	80099e6 <USBD_LL_Reset>
}
 800ac8a:	bf00      	nop
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
	...

0800ac94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7fe fef0 	bl	8009a88 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	699b      	ldr	r3, [r3, #24]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d005      	beq.n	800acbc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800acb0:	4b04      	ldr	r3, [pc, #16]	; (800acc4 <HAL_PCD_SuspendCallback+0x30>)
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	4a03      	ldr	r2, [pc, #12]	; (800acc4 <HAL_PCD_SuspendCallback+0x30>)
 800acb6:	f043 0306 	orr.w	r3, r3, #6
 800acba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800acbc:	bf00      	nop
 800acbe:	3708      	adds	r7, #8
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	e000ed00 	.word	0xe000ed00

0800acc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7fe feeb 	bl	8009ab2 <USBD_LL_Resume>
}
 800acdc:	bf00      	nop
 800acde:	3708      	adds	r7, #8
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800acec:	4a28      	ldr	r2, [pc, #160]	; (800ad90 <USBD_LL_Init+0xac>)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a26      	ldr	r2, [pc, #152]	; (800ad90 <USBD_LL_Init+0xac>)
 800acf8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800acfc:	4b24      	ldr	r3, [pc, #144]	; (800ad90 <USBD_LL_Init+0xac>)
 800acfe:	4a25      	ldr	r2, [pc, #148]	; (800ad94 <USBD_LL_Init+0xb0>)
 800ad00:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ad02:	4b23      	ldr	r3, [pc, #140]	; (800ad90 <USBD_LL_Init+0xac>)
 800ad04:	2208      	movs	r2, #8
 800ad06:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ad08:	4b21      	ldr	r3, [pc, #132]	; (800ad90 <USBD_LL_Init+0xac>)
 800ad0a:	2202      	movs	r2, #2
 800ad0c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ad0e:	4b20      	ldr	r3, [pc, #128]	; (800ad90 <USBD_LL_Init+0xac>)
 800ad10:	2202      	movs	r2, #2
 800ad12:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ad14:	4b1e      	ldr	r3, [pc, #120]	; (800ad90 <USBD_LL_Init+0xac>)
 800ad16:	2200      	movs	r2, #0
 800ad18:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ad1a:	4b1d      	ldr	r3, [pc, #116]	; (800ad90 <USBD_LL_Init+0xac>)
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ad20:	481b      	ldr	r0, [pc, #108]	; (800ad90 <USBD_LL_Init+0xac>)
 800ad22:	f7f8 fa93 	bl	800324c <HAL_PCD_Init>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d001      	beq.n	800ad30 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ad2c:	f7f6 fa9e 	bl	800126c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad36:	2318      	movs	r3, #24
 800ad38:	2200      	movs	r2, #0
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	f7f9 fd3d 	bl	80047ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad46:	2358      	movs	r3, #88	; 0x58
 800ad48:	2200      	movs	r2, #0
 800ad4a:	2180      	movs	r1, #128	; 0x80
 800ad4c:	f7f9 fd35 	bl	80047ba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad56:	23c0      	movs	r3, #192	; 0xc0
 800ad58:	2200      	movs	r2, #0
 800ad5a:	2181      	movs	r1, #129	; 0x81
 800ad5c:	f7f9 fd2d 	bl	80047ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad66:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	2101      	movs	r1, #1
 800ad6e:	f7f9 fd24 	bl	80047ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad78:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	2182      	movs	r1, #130	; 0x82
 800ad80:	f7f9 fd1b 	bl	80047ba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3708      	adds	r7, #8
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	20001334 	.word	0x20001334
 800ad94:	40005c00 	.word	0x40005c00

0800ad98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ada0:	2300      	movs	r3, #0
 800ada2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ada4:	2300      	movs	r3, #0
 800ada6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800adae:	4618      	mov	r0, r3
 800adb0:	f7f8 fb38 	bl	8003424 <HAL_PCD_Start>
 800adb4:	4603      	mov	r3, r0
 800adb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adb8:	7bfb      	ldrb	r3, [r7, #15]
 800adba:	4618      	mov	r0, r3
 800adbc:	f000 f954 	bl	800b068 <USBD_Get_USB_Status>
 800adc0:	4603      	mov	r3, r0
 800adc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b084      	sub	sp, #16
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
 800add6:	4608      	mov	r0, r1
 800add8:	4611      	mov	r1, r2
 800adda:	461a      	mov	r2, r3
 800addc:	4603      	mov	r3, r0
 800adde:	70fb      	strb	r3, [r7, #3]
 800ade0:	460b      	mov	r3, r1
 800ade2:	70bb      	strb	r3, [r7, #2]
 800ade4:	4613      	mov	r3, r2
 800ade6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ade8:	2300      	movs	r3, #0
 800adea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adec:	2300      	movs	r3, #0
 800adee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800adf6:	78bb      	ldrb	r3, [r7, #2]
 800adf8:	883a      	ldrh	r2, [r7, #0]
 800adfa:	78f9      	ldrb	r1, [r7, #3]
 800adfc:	f7f8 fc54 	bl	80036a8 <HAL_PCD_EP_Open>
 800ae00:	4603      	mov	r3, r0
 800ae02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae04:	7bfb      	ldrb	r3, [r7, #15]
 800ae06:	4618      	mov	r0, r3
 800ae08:	f000 f92e 	bl	800b068 <USBD_Get_USB_Status>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae10:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b084      	sub	sp, #16
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	460b      	mov	r3, r1
 800ae24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae26:	2300      	movs	r3, #0
 800ae28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae34:	78fa      	ldrb	r2, [r7, #3]
 800ae36:	4611      	mov	r1, r2
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7f8 fc9b 	bl	8003774 <HAL_PCD_EP_Close>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae42:	7bfb      	ldrb	r3, [r7, #15]
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 f90f 	bl	800b068 <USBD_Get_USB_Status>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	460b      	mov	r3, r1
 800ae62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae64:	2300      	movs	r3, #0
 800ae66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae72:	78fa      	ldrb	r2, [r7, #3]
 800ae74:	4611      	mov	r1, r2
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7f8 fd5c 	bl	8003934 <HAL_PCD_EP_SetStall>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae80:	7bfb      	ldrb	r3, [r7, #15]
 800ae82:	4618      	mov	r0, r3
 800ae84:	f000 f8f0 	bl	800b068 <USBD_Get_USB_Status>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b084      	sub	sp, #16
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
 800ae9e:	460b      	mov	r3, r1
 800aea0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aea2:	2300      	movs	r3, #0
 800aea4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aea6:	2300      	movs	r3, #0
 800aea8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aeb0:	78fa      	ldrb	r2, [r7, #3]
 800aeb2:	4611      	mov	r1, r2
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7f8 fd8f 	bl	80039d8 <HAL_PCD_EP_ClrStall>
 800aeba:	4603      	mov	r3, r0
 800aebc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aebe:	7bfb      	ldrb	r3, [r7, #15]
 800aec0:	4618      	mov	r0, r3
 800aec2:	f000 f8d1 	bl	800b068 <USBD_Get_USB_Status>
 800aec6:	4603      	mov	r3, r0
 800aec8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeca:	7bbb      	ldrb	r3, [r7, #14]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	460b      	mov	r3, r1
 800aede:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aee6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	da0c      	bge.n	800af0a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aef0:	78fb      	ldrb	r3, [r7, #3]
 800aef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aef6:	68f9      	ldr	r1, [r7, #12]
 800aef8:	1c5a      	adds	r2, r3, #1
 800aefa:	4613      	mov	r3, r2
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	4413      	add	r3, r2
 800af00:	00db      	lsls	r3, r3, #3
 800af02:	440b      	add	r3, r1
 800af04:	3302      	adds	r3, #2
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	e00b      	b.n	800af22 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800af0a:	78fb      	ldrb	r3, [r7, #3]
 800af0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af10:	68f9      	ldr	r1, [r7, #12]
 800af12:	4613      	mov	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	4413      	add	r3, r2
 800af18:	00db      	lsls	r3, r3, #3
 800af1a:	440b      	add	r3, r1
 800af1c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800af20:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af22:	4618      	mov	r0, r3
 800af24:	3714      	adds	r7, #20
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr

0800af2e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800af2e:	b580      	push	{r7, lr}
 800af30:	b084      	sub	sp, #16
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
 800af36:	460b      	mov	r3, r1
 800af38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af3a:	2300      	movs	r3, #0
 800af3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af3e:	2300      	movs	r3, #0
 800af40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af48:	78fa      	ldrb	r2, [r7, #3]
 800af4a:	4611      	mov	r1, r2
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7f8 fb86 	bl	800365e <HAL_PCD_SetAddress>
 800af52:	4603      	mov	r3, r0
 800af54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af56:	7bfb      	ldrb	r3, [r7, #15]
 800af58:	4618      	mov	r0, r3
 800af5a:	f000 f885 	bl	800b068 <USBD_Get_USB_Status>
 800af5e:	4603      	mov	r3, r0
 800af60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af62:	7bbb      	ldrb	r3, [r7, #14]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b086      	sub	sp, #24
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	607a      	str	r2, [r7, #4]
 800af76:	461a      	mov	r2, r3
 800af78:	460b      	mov	r3, r1
 800af7a:	72fb      	strb	r3, [r7, #11]
 800af7c:	4613      	mov	r3, r2
 800af7e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af80:	2300      	movs	r3, #0
 800af82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af84:	2300      	movs	r3, #0
 800af86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af8e:	893b      	ldrh	r3, [r7, #8]
 800af90:	7af9      	ldrb	r1, [r7, #11]
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	f7f8 fc8b 	bl	80038ae <HAL_PCD_EP_Transmit>
 800af98:	4603      	mov	r3, r0
 800af9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af9c:	7dfb      	ldrb	r3, [r7, #23]
 800af9e:	4618      	mov	r0, r3
 800afa0:	f000 f862 	bl	800b068 <USBD_Get_USB_Status>
 800afa4:	4603      	mov	r3, r0
 800afa6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800afa8:	7dbb      	ldrb	r3, [r7, #22]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b086      	sub	sp, #24
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	60f8      	str	r0, [r7, #12]
 800afba:	607a      	str	r2, [r7, #4]
 800afbc:	461a      	mov	r2, r3
 800afbe:	460b      	mov	r3, r1
 800afc0:	72fb      	strb	r3, [r7, #11]
 800afc2:	4613      	mov	r3, r2
 800afc4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afc6:	2300      	movs	r3, #0
 800afc8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afca:	2300      	movs	r3, #0
 800afcc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800afd4:	893b      	ldrh	r3, [r7, #8]
 800afd6:	7af9      	ldrb	r1, [r7, #11]
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	f7f8 fc13 	bl	8003804 <HAL_PCD_EP_Receive>
 800afde:	4603      	mov	r3, r0
 800afe0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afe2:	7dfb      	ldrb	r3, [r7, #23]
 800afe4:	4618      	mov	r0, r3
 800afe6:	f000 f83f 	bl	800b068 <USBD_Get_USB_Status>
 800afea:	4603      	mov	r3, r0
 800afec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800afee:	7dbb      	ldrb	r3, [r7, #22]
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3718      	adds	r7, #24
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	460b      	mov	r3, r1
 800b002:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b00a:	78fa      	ldrb	r2, [r7, #3]
 800b00c:	4611      	mov	r1, r2
 800b00e:	4618      	mov	r0, r3
 800b010:	f7f8 fc35 	bl	800387e <HAL_PCD_EP_GetRxCount>
 800b014:	4603      	mov	r3, r0
}
 800b016:	4618      	mov	r0, r3
 800b018:	3708      	adds	r7, #8
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
	...

0800b020 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b028:	4b03      	ldr	r3, [pc, #12]	; (800b038 <USBD_static_malloc+0x18>)
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	370c      	adds	r7, #12
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	200003c4 	.word	0x200003c4

0800b03c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]

}
 800b044:	bf00      	nop
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	460b      	mov	r3, r1
 800b05a:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b05c:	bf00      	nop
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	4603      	mov	r3, r0
 800b070:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b072:	2300      	movs	r3, #0
 800b074:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b076:	79fb      	ldrb	r3, [r7, #7]
 800b078:	2b03      	cmp	r3, #3
 800b07a:	d817      	bhi.n	800b0ac <USBD_Get_USB_Status+0x44>
 800b07c:	a201      	add	r2, pc, #4	; (adr r2, 800b084 <USBD_Get_USB_Status+0x1c>)
 800b07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b082:	bf00      	nop
 800b084:	0800b095 	.word	0x0800b095
 800b088:	0800b09b 	.word	0x0800b09b
 800b08c:	0800b0a1 	.word	0x0800b0a1
 800b090:	0800b0a7 	.word	0x0800b0a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b094:	2300      	movs	r3, #0
 800b096:	73fb      	strb	r3, [r7, #15]
    break;
 800b098:	e00b      	b.n	800b0b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b09a:	2302      	movs	r3, #2
 800b09c:	73fb      	strb	r3, [r7, #15]
    break;
 800b09e:	e008      	b.n	800b0b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	73fb      	strb	r3, [r7, #15]
    break;
 800b0a4:	e005      	b.n	800b0b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b0a6:	2302      	movs	r3, #2
 800b0a8:	73fb      	strb	r3, [r7, #15]
    break;
 800b0aa:	e002      	b.n	800b0b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b0b0:	bf00      	nop
  }
  return usb_status;
 800b0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3714      	adds	r7, #20
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <__errno>:
 800b0c0:	4b01      	ldr	r3, [pc, #4]	; (800b0c8 <__errno+0x8>)
 800b0c2:	6818      	ldr	r0, [r3, #0]
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop
 800b0c8:	200001e8 	.word	0x200001e8

0800b0cc <__libc_init_array>:
 800b0cc:	b570      	push	{r4, r5, r6, lr}
 800b0ce:	4e0d      	ldr	r6, [pc, #52]	; (800b104 <__libc_init_array+0x38>)
 800b0d0:	4c0d      	ldr	r4, [pc, #52]	; (800b108 <__libc_init_array+0x3c>)
 800b0d2:	1ba4      	subs	r4, r4, r6
 800b0d4:	10a4      	asrs	r4, r4, #2
 800b0d6:	2500      	movs	r5, #0
 800b0d8:	42a5      	cmp	r5, r4
 800b0da:	d109      	bne.n	800b0f0 <__libc_init_array+0x24>
 800b0dc:	4e0b      	ldr	r6, [pc, #44]	; (800b10c <__libc_init_array+0x40>)
 800b0de:	4c0c      	ldr	r4, [pc, #48]	; (800b110 <__libc_init_array+0x44>)
 800b0e0:	f000 fc26 	bl	800b930 <_init>
 800b0e4:	1ba4      	subs	r4, r4, r6
 800b0e6:	10a4      	asrs	r4, r4, #2
 800b0e8:	2500      	movs	r5, #0
 800b0ea:	42a5      	cmp	r5, r4
 800b0ec:	d105      	bne.n	800b0fa <__libc_init_array+0x2e>
 800b0ee:	bd70      	pop	{r4, r5, r6, pc}
 800b0f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b0f4:	4798      	blx	r3
 800b0f6:	3501      	adds	r5, #1
 800b0f8:	e7ee      	b.n	800b0d8 <__libc_init_array+0xc>
 800b0fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b0fe:	4798      	blx	r3
 800b100:	3501      	adds	r5, #1
 800b102:	e7f2      	b.n	800b0ea <__libc_init_array+0x1e>
 800b104:	0800bc0c 	.word	0x0800bc0c
 800b108:	0800bc0c 	.word	0x0800bc0c
 800b10c:	0800bc0c 	.word	0x0800bc0c
 800b110:	0800bc10 	.word	0x0800bc10

0800b114 <memset>:
 800b114:	4402      	add	r2, r0
 800b116:	4603      	mov	r3, r0
 800b118:	4293      	cmp	r3, r2
 800b11a:	d100      	bne.n	800b11e <memset+0xa>
 800b11c:	4770      	bx	lr
 800b11e:	f803 1b01 	strb.w	r1, [r3], #1
 800b122:	e7f9      	b.n	800b118 <memset+0x4>

0800b124 <siprintf>:
 800b124:	b40e      	push	{r1, r2, r3}
 800b126:	b500      	push	{lr}
 800b128:	b09c      	sub	sp, #112	; 0x70
 800b12a:	ab1d      	add	r3, sp, #116	; 0x74
 800b12c:	9002      	str	r0, [sp, #8]
 800b12e:	9006      	str	r0, [sp, #24]
 800b130:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b134:	4809      	ldr	r0, [pc, #36]	; (800b15c <siprintf+0x38>)
 800b136:	9107      	str	r1, [sp, #28]
 800b138:	9104      	str	r1, [sp, #16]
 800b13a:	4909      	ldr	r1, [pc, #36]	; (800b160 <siprintf+0x3c>)
 800b13c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b140:	9105      	str	r1, [sp, #20]
 800b142:	6800      	ldr	r0, [r0, #0]
 800b144:	9301      	str	r3, [sp, #4]
 800b146:	a902      	add	r1, sp, #8
 800b148:	f000 f866 	bl	800b218 <_svfiprintf_r>
 800b14c:	9b02      	ldr	r3, [sp, #8]
 800b14e:	2200      	movs	r2, #0
 800b150:	701a      	strb	r2, [r3, #0]
 800b152:	b01c      	add	sp, #112	; 0x70
 800b154:	f85d eb04 	ldr.w	lr, [sp], #4
 800b158:	b003      	add	sp, #12
 800b15a:	4770      	bx	lr
 800b15c:	200001e8 	.word	0x200001e8
 800b160:	ffff0208 	.word	0xffff0208

0800b164 <__ssputs_r>:
 800b164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b168:	688e      	ldr	r6, [r1, #8]
 800b16a:	429e      	cmp	r6, r3
 800b16c:	4682      	mov	sl, r0
 800b16e:	460c      	mov	r4, r1
 800b170:	4690      	mov	r8, r2
 800b172:	4699      	mov	r9, r3
 800b174:	d837      	bhi.n	800b1e6 <__ssputs_r+0x82>
 800b176:	898a      	ldrh	r2, [r1, #12]
 800b178:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b17c:	d031      	beq.n	800b1e2 <__ssputs_r+0x7e>
 800b17e:	6825      	ldr	r5, [r4, #0]
 800b180:	6909      	ldr	r1, [r1, #16]
 800b182:	1a6f      	subs	r7, r5, r1
 800b184:	6965      	ldr	r5, [r4, #20]
 800b186:	2302      	movs	r3, #2
 800b188:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b18c:	fb95 f5f3 	sdiv	r5, r5, r3
 800b190:	f109 0301 	add.w	r3, r9, #1
 800b194:	443b      	add	r3, r7
 800b196:	429d      	cmp	r5, r3
 800b198:	bf38      	it	cc
 800b19a:	461d      	movcc	r5, r3
 800b19c:	0553      	lsls	r3, r2, #21
 800b19e:	d530      	bpl.n	800b202 <__ssputs_r+0x9e>
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	f000 fb2b 	bl	800b7fc <_malloc_r>
 800b1a6:	4606      	mov	r6, r0
 800b1a8:	b950      	cbnz	r0, 800b1c0 <__ssputs_r+0x5c>
 800b1aa:	230c      	movs	r3, #12
 800b1ac:	f8ca 3000 	str.w	r3, [sl]
 800b1b0:	89a3      	ldrh	r3, [r4, #12]
 800b1b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1b6:	81a3      	strh	r3, [r4, #12]
 800b1b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1c0:	463a      	mov	r2, r7
 800b1c2:	6921      	ldr	r1, [r4, #16]
 800b1c4:	f000 faa8 	bl	800b718 <memcpy>
 800b1c8:	89a3      	ldrh	r3, [r4, #12]
 800b1ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1d2:	81a3      	strh	r3, [r4, #12]
 800b1d4:	6126      	str	r6, [r4, #16]
 800b1d6:	6165      	str	r5, [r4, #20]
 800b1d8:	443e      	add	r6, r7
 800b1da:	1bed      	subs	r5, r5, r7
 800b1dc:	6026      	str	r6, [r4, #0]
 800b1de:	60a5      	str	r5, [r4, #8]
 800b1e0:	464e      	mov	r6, r9
 800b1e2:	454e      	cmp	r6, r9
 800b1e4:	d900      	bls.n	800b1e8 <__ssputs_r+0x84>
 800b1e6:	464e      	mov	r6, r9
 800b1e8:	4632      	mov	r2, r6
 800b1ea:	4641      	mov	r1, r8
 800b1ec:	6820      	ldr	r0, [r4, #0]
 800b1ee:	f000 fa9e 	bl	800b72e <memmove>
 800b1f2:	68a3      	ldr	r3, [r4, #8]
 800b1f4:	1b9b      	subs	r3, r3, r6
 800b1f6:	60a3      	str	r3, [r4, #8]
 800b1f8:	6823      	ldr	r3, [r4, #0]
 800b1fa:	441e      	add	r6, r3
 800b1fc:	6026      	str	r6, [r4, #0]
 800b1fe:	2000      	movs	r0, #0
 800b200:	e7dc      	b.n	800b1bc <__ssputs_r+0x58>
 800b202:	462a      	mov	r2, r5
 800b204:	f000 fb54 	bl	800b8b0 <_realloc_r>
 800b208:	4606      	mov	r6, r0
 800b20a:	2800      	cmp	r0, #0
 800b20c:	d1e2      	bne.n	800b1d4 <__ssputs_r+0x70>
 800b20e:	6921      	ldr	r1, [r4, #16]
 800b210:	4650      	mov	r0, sl
 800b212:	f000 faa5 	bl	800b760 <_free_r>
 800b216:	e7c8      	b.n	800b1aa <__ssputs_r+0x46>

0800b218 <_svfiprintf_r>:
 800b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21c:	461d      	mov	r5, r3
 800b21e:	898b      	ldrh	r3, [r1, #12]
 800b220:	061f      	lsls	r7, r3, #24
 800b222:	b09d      	sub	sp, #116	; 0x74
 800b224:	4680      	mov	r8, r0
 800b226:	460c      	mov	r4, r1
 800b228:	4616      	mov	r6, r2
 800b22a:	d50f      	bpl.n	800b24c <_svfiprintf_r+0x34>
 800b22c:	690b      	ldr	r3, [r1, #16]
 800b22e:	b96b      	cbnz	r3, 800b24c <_svfiprintf_r+0x34>
 800b230:	2140      	movs	r1, #64	; 0x40
 800b232:	f000 fae3 	bl	800b7fc <_malloc_r>
 800b236:	6020      	str	r0, [r4, #0]
 800b238:	6120      	str	r0, [r4, #16]
 800b23a:	b928      	cbnz	r0, 800b248 <_svfiprintf_r+0x30>
 800b23c:	230c      	movs	r3, #12
 800b23e:	f8c8 3000 	str.w	r3, [r8]
 800b242:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b246:	e0c8      	b.n	800b3da <_svfiprintf_r+0x1c2>
 800b248:	2340      	movs	r3, #64	; 0x40
 800b24a:	6163      	str	r3, [r4, #20]
 800b24c:	2300      	movs	r3, #0
 800b24e:	9309      	str	r3, [sp, #36]	; 0x24
 800b250:	2320      	movs	r3, #32
 800b252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b256:	2330      	movs	r3, #48	; 0x30
 800b258:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b25c:	9503      	str	r5, [sp, #12]
 800b25e:	f04f 0b01 	mov.w	fp, #1
 800b262:	4637      	mov	r7, r6
 800b264:	463d      	mov	r5, r7
 800b266:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b26a:	b10b      	cbz	r3, 800b270 <_svfiprintf_r+0x58>
 800b26c:	2b25      	cmp	r3, #37	; 0x25
 800b26e:	d13e      	bne.n	800b2ee <_svfiprintf_r+0xd6>
 800b270:	ebb7 0a06 	subs.w	sl, r7, r6
 800b274:	d00b      	beq.n	800b28e <_svfiprintf_r+0x76>
 800b276:	4653      	mov	r3, sl
 800b278:	4632      	mov	r2, r6
 800b27a:	4621      	mov	r1, r4
 800b27c:	4640      	mov	r0, r8
 800b27e:	f7ff ff71 	bl	800b164 <__ssputs_r>
 800b282:	3001      	adds	r0, #1
 800b284:	f000 80a4 	beq.w	800b3d0 <_svfiprintf_r+0x1b8>
 800b288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b28a:	4453      	add	r3, sl
 800b28c:	9309      	str	r3, [sp, #36]	; 0x24
 800b28e:	783b      	ldrb	r3, [r7, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	f000 809d 	beq.w	800b3d0 <_svfiprintf_r+0x1b8>
 800b296:	2300      	movs	r3, #0
 800b298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b29c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2a0:	9304      	str	r3, [sp, #16]
 800b2a2:	9307      	str	r3, [sp, #28]
 800b2a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2a8:	931a      	str	r3, [sp, #104]	; 0x68
 800b2aa:	462f      	mov	r7, r5
 800b2ac:	2205      	movs	r2, #5
 800b2ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b2b2:	4850      	ldr	r0, [pc, #320]	; (800b3f4 <_svfiprintf_r+0x1dc>)
 800b2b4:	f7f4 ff94 	bl	80001e0 <memchr>
 800b2b8:	9b04      	ldr	r3, [sp, #16]
 800b2ba:	b9d0      	cbnz	r0, 800b2f2 <_svfiprintf_r+0xda>
 800b2bc:	06d9      	lsls	r1, r3, #27
 800b2be:	bf44      	itt	mi
 800b2c0:	2220      	movmi	r2, #32
 800b2c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b2c6:	071a      	lsls	r2, r3, #28
 800b2c8:	bf44      	itt	mi
 800b2ca:	222b      	movmi	r2, #43	; 0x2b
 800b2cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b2d0:	782a      	ldrb	r2, [r5, #0]
 800b2d2:	2a2a      	cmp	r2, #42	; 0x2a
 800b2d4:	d015      	beq.n	800b302 <_svfiprintf_r+0xea>
 800b2d6:	9a07      	ldr	r2, [sp, #28]
 800b2d8:	462f      	mov	r7, r5
 800b2da:	2000      	movs	r0, #0
 800b2dc:	250a      	movs	r5, #10
 800b2de:	4639      	mov	r1, r7
 800b2e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2e4:	3b30      	subs	r3, #48	; 0x30
 800b2e6:	2b09      	cmp	r3, #9
 800b2e8:	d94d      	bls.n	800b386 <_svfiprintf_r+0x16e>
 800b2ea:	b1b8      	cbz	r0, 800b31c <_svfiprintf_r+0x104>
 800b2ec:	e00f      	b.n	800b30e <_svfiprintf_r+0xf6>
 800b2ee:	462f      	mov	r7, r5
 800b2f0:	e7b8      	b.n	800b264 <_svfiprintf_r+0x4c>
 800b2f2:	4a40      	ldr	r2, [pc, #256]	; (800b3f4 <_svfiprintf_r+0x1dc>)
 800b2f4:	1a80      	subs	r0, r0, r2
 800b2f6:	fa0b f000 	lsl.w	r0, fp, r0
 800b2fa:	4318      	orrs	r0, r3
 800b2fc:	9004      	str	r0, [sp, #16]
 800b2fe:	463d      	mov	r5, r7
 800b300:	e7d3      	b.n	800b2aa <_svfiprintf_r+0x92>
 800b302:	9a03      	ldr	r2, [sp, #12]
 800b304:	1d11      	adds	r1, r2, #4
 800b306:	6812      	ldr	r2, [r2, #0]
 800b308:	9103      	str	r1, [sp, #12]
 800b30a:	2a00      	cmp	r2, #0
 800b30c:	db01      	blt.n	800b312 <_svfiprintf_r+0xfa>
 800b30e:	9207      	str	r2, [sp, #28]
 800b310:	e004      	b.n	800b31c <_svfiprintf_r+0x104>
 800b312:	4252      	negs	r2, r2
 800b314:	f043 0302 	orr.w	r3, r3, #2
 800b318:	9207      	str	r2, [sp, #28]
 800b31a:	9304      	str	r3, [sp, #16]
 800b31c:	783b      	ldrb	r3, [r7, #0]
 800b31e:	2b2e      	cmp	r3, #46	; 0x2e
 800b320:	d10c      	bne.n	800b33c <_svfiprintf_r+0x124>
 800b322:	787b      	ldrb	r3, [r7, #1]
 800b324:	2b2a      	cmp	r3, #42	; 0x2a
 800b326:	d133      	bne.n	800b390 <_svfiprintf_r+0x178>
 800b328:	9b03      	ldr	r3, [sp, #12]
 800b32a:	1d1a      	adds	r2, r3, #4
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	9203      	str	r2, [sp, #12]
 800b330:	2b00      	cmp	r3, #0
 800b332:	bfb8      	it	lt
 800b334:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b338:	3702      	adds	r7, #2
 800b33a:	9305      	str	r3, [sp, #20]
 800b33c:	4d2e      	ldr	r5, [pc, #184]	; (800b3f8 <_svfiprintf_r+0x1e0>)
 800b33e:	7839      	ldrb	r1, [r7, #0]
 800b340:	2203      	movs	r2, #3
 800b342:	4628      	mov	r0, r5
 800b344:	f7f4 ff4c 	bl	80001e0 <memchr>
 800b348:	b138      	cbz	r0, 800b35a <_svfiprintf_r+0x142>
 800b34a:	2340      	movs	r3, #64	; 0x40
 800b34c:	1b40      	subs	r0, r0, r5
 800b34e:	fa03 f000 	lsl.w	r0, r3, r0
 800b352:	9b04      	ldr	r3, [sp, #16]
 800b354:	4303      	orrs	r3, r0
 800b356:	3701      	adds	r7, #1
 800b358:	9304      	str	r3, [sp, #16]
 800b35a:	7839      	ldrb	r1, [r7, #0]
 800b35c:	4827      	ldr	r0, [pc, #156]	; (800b3fc <_svfiprintf_r+0x1e4>)
 800b35e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b362:	2206      	movs	r2, #6
 800b364:	1c7e      	adds	r6, r7, #1
 800b366:	f7f4 ff3b 	bl	80001e0 <memchr>
 800b36a:	2800      	cmp	r0, #0
 800b36c:	d038      	beq.n	800b3e0 <_svfiprintf_r+0x1c8>
 800b36e:	4b24      	ldr	r3, [pc, #144]	; (800b400 <_svfiprintf_r+0x1e8>)
 800b370:	bb13      	cbnz	r3, 800b3b8 <_svfiprintf_r+0x1a0>
 800b372:	9b03      	ldr	r3, [sp, #12]
 800b374:	3307      	adds	r3, #7
 800b376:	f023 0307 	bic.w	r3, r3, #7
 800b37a:	3308      	adds	r3, #8
 800b37c:	9303      	str	r3, [sp, #12]
 800b37e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b380:	444b      	add	r3, r9
 800b382:	9309      	str	r3, [sp, #36]	; 0x24
 800b384:	e76d      	b.n	800b262 <_svfiprintf_r+0x4a>
 800b386:	fb05 3202 	mla	r2, r5, r2, r3
 800b38a:	2001      	movs	r0, #1
 800b38c:	460f      	mov	r7, r1
 800b38e:	e7a6      	b.n	800b2de <_svfiprintf_r+0xc6>
 800b390:	2300      	movs	r3, #0
 800b392:	3701      	adds	r7, #1
 800b394:	9305      	str	r3, [sp, #20]
 800b396:	4619      	mov	r1, r3
 800b398:	250a      	movs	r5, #10
 800b39a:	4638      	mov	r0, r7
 800b39c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3a0:	3a30      	subs	r2, #48	; 0x30
 800b3a2:	2a09      	cmp	r2, #9
 800b3a4:	d903      	bls.n	800b3ae <_svfiprintf_r+0x196>
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d0c8      	beq.n	800b33c <_svfiprintf_r+0x124>
 800b3aa:	9105      	str	r1, [sp, #20]
 800b3ac:	e7c6      	b.n	800b33c <_svfiprintf_r+0x124>
 800b3ae:	fb05 2101 	mla	r1, r5, r1, r2
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	4607      	mov	r7, r0
 800b3b6:	e7f0      	b.n	800b39a <_svfiprintf_r+0x182>
 800b3b8:	ab03      	add	r3, sp, #12
 800b3ba:	9300      	str	r3, [sp, #0]
 800b3bc:	4622      	mov	r2, r4
 800b3be:	4b11      	ldr	r3, [pc, #68]	; (800b404 <_svfiprintf_r+0x1ec>)
 800b3c0:	a904      	add	r1, sp, #16
 800b3c2:	4640      	mov	r0, r8
 800b3c4:	f3af 8000 	nop.w
 800b3c8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b3cc:	4681      	mov	r9, r0
 800b3ce:	d1d6      	bne.n	800b37e <_svfiprintf_r+0x166>
 800b3d0:	89a3      	ldrh	r3, [r4, #12]
 800b3d2:	065b      	lsls	r3, r3, #25
 800b3d4:	f53f af35 	bmi.w	800b242 <_svfiprintf_r+0x2a>
 800b3d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3da:	b01d      	add	sp, #116	; 0x74
 800b3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e0:	ab03      	add	r3, sp, #12
 800b3e2:	9300      	str	r3, [sp, #0]
 800b3e4:	4622      	mov	r2, r4
 800b3e6:	4b07      	ldr	r3, [pc, #28]	; (800b404 <_svfiprintf_r+0x1ec>)
 800b3e8:	a904      	add	r1, sp, #16
 800b3ea:	4640      	mov	r0, r8
 800b3ec:	f000 f882 	bl	800b4f4 <_printf_i>
 800b3f0:	e7ea      	b.n	800b3c8 <_svfiprintf_r+0x1b0>
 800b3f2:	bf00      	nop
 800b3f4:	0800bbd8 	.word	0x0800bbd8
 800b3f8:	0800bbde 	.word	0x0800bbde
 800b3fc:	0800bbe2 	.word	0x0800bbe2
 800b400:	00000000 	.word	0x00000000
 800b404:	0800b165 	.word	0x0800b165

0800b408 <_printf_common>:
 800b408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b40c:	4691      	mov	r9, r2
 800b40e:	461f      	mov	r7, r3
 800b410:	688a      	ldr	r2, [r1, #8]
 800b412:	690b      	ldr	r3, [r1, #16]
 800b414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b418:	4293      	cmp	r3, r2
 800b41a:	bfb8      	it	lt
 800b41c:	4613      	movlt	r3, r2
 800b41e:	f8c9 3000 	str.w	r3, [r9]
 800b422:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b426:	4606      	mov	r6, r0
 800b428:	460c      	mov	r4, r1
 800b42a:	b112      	cbz	r2, 800b432 <_printf_common+0x2a>
 800b42c:	3301      	adds	r3, #1
 800b42e:	f8c9 3000 	str.w	r3, [r9]
 800b432:	6823      	ldr	r3, [r4, #0]
 800b434:	0699      	lsls	r1, r3, #26
 800b436:	bf42      	ittt	mi
 800b438:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b43c:	3302      	addmi	r3, #2
 800b43e:	f8c9 3000 	strmi.w	r3, [r9]
 800b442:	6825      	ldr	r5, [r4, #0]
 800b444:	f015 0506 	ands.w	r5, r5, #6
 800b448:	d107      	bne.n	800b45a <_printf_common+0x52>
 800b44a:	f104 0a19 	add.w	sl, r4, #25
 800b44e:	68e3      	ldr	r3, [r4, #12]
 800b450:	f8d9 2000 	ldr.w	r2, [r9]
 800b454:	1a9b      	subs	r3, r3, r2
 800b456:	42ab      	cmp	r3, r5
 800b458:	dc28      	bgt.n	800b4ac <_printf_common+0xa4>
 800b45a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b45e:	6822      	ldr	r2, [r4, #0]
 800b460:	3300      	adds	r3, #0
 800b462:	bf18      	it	ne
 800b464:	2301      	movne	r3, #1
 800b466:	0692      	lsls	r2, r2, #26
 800b468:	d42d      	bmi.n	800b4c6 <_printf_common+0xbe>
 800b46a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b46e:	4639      	mov	r1, r7
 800b470:	4630      	mov	r0, r6
 800b472:	47c0      	blx	r8
 800b474:	3001      	adds	r0, #1
 800b476:	d020      	beq.n	800b4ba <_printf_common+0xb2>
 800b478:	6823      	ldr	r3, [r4, #0]
 800b47a:	68e5      	ldr	r5, [r4, #12]
 800b47c:	f8d9 2000 	ldr.w	r2, [r9]
 800b480:	f003 0306 	and.w	r3, r3, #6
 800b484:	2b04      	cmp	r3, #4
 800b486:	bf08      	it	eq
 800b488:	1aad      	subeq	r5, r5, r2
 800b48a:	68a3      	ldr	r3, [r4, #8]
 800b48c:	6922      	ldr	r2, [r4, #16]
 800b48e:	bf0c      	ite	eq
 800b490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b494:	2500      	movne	r5, #0
 800b496:	4293      	cmp	r3, r2
 800b498:	bfc4      	itt	gt
 800b49a:	1a9b      	subgt	r3, r3, r2
 800b49c:	18ed      	addgt	r5, r5, r3
 800b49e:	f04f 0900 	mov.w	r9, #0
 800b4a2:	341a      	adds	r4, #26
 800b4a4:	454d      	cmp	r5, r9
 800b4a6:	d11a      	bne.n	800b4de <_printf_common+0xd6>
 800b4a8:	2000      	movs	r0, #0
 800b4aa:	e008      	b.n	800b4be <_printf_common+0xb6>
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	4652      	mov	r2, sl
 800b4b0:	4639      	mov	r1, r7
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	47c0      	blx	r8
 800b4b6:	3001      	adds	r0, #1
 800b4b8:	d103      	bne.n	800b4c2 <_printf_common+0xba>
 800b4ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4c2:	3501      	adds	r5, #1
 800b4c4:	e7c3      	b.n	800b44e <_printf_common+0x46>
 800b4c6:	18e1      	adds	r1, r4, r3
 800b4c8:	1c5a      	adds	r2, r3, #1
 800b4ca:	2030      	movs	r0, #48	; 0x30
 800b4cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4d0:	4422      	add	r2, r4
 800b4d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4da:	3302      	adds	r3, #2
 800b4dc:	e7c5      	b.n	800b46a <_printf_common+0x62>
 800b4de:	2301      	movs	r3, #1
 800b4e0:	4622      	mov	r2, r4
 800b4e2:	4639      	mov	r1, r7
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	47c0      	blx	r8
 800b4e8:	3001      	adds	r0, #1
 800b4ea:	d0e6      	beq.n	800b4ba <_printf_common+0xb2>
 800b4ec:	f109 0901 	add.w	r9, r9, #1
 800b4f0:	e7d8      	b.n	800b4a4 <_printf_common+0x9c>
	...

0800b4f4 <_printf_i>:
 800b4f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b4fc:	460c      	mov	r4, r1
 800b4fe:	7e09      	ldrb	r1, [r1, #24]
 800b500:	b085      	sub	sp, #20
 800b502:	296e      	cmp	r1, #110	; 0x6e
 800b504:	4617      	mov	r7, r2
 800b506:	4606      	mov	r6, r0
 800b508:	4698      	mov	r8, r3
 800b50a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b50c:	f000 80b3 	beq.w	800b676 <_printf_i+0x182>
 800b510:	d822      	bhi.n	800b558 <_printf_i+0x64>
 800b512:	2963      	cmp	r1, #99	; 0x63
 800b514:	d036      	beq.n	800b584 <_printf_i+0x90>
 800b516:	d80a      	bhi.n	800b52e <_printf_i+0x3a>
 800b518:	2900      	cmp	r1, #0
 800b51a:	f000 80b9 	beq.w	800b690 <_printf_i+0x19c>
 800b51e:	2958      	cmp	r1, #88	; 0x58
 800b520:	f000 8083 	beq.w	800b62a <_printf_i+0x136>
 800b524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b528:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b52c:	e032      	b.n	800b594 <_printf_i+0xa0>
 800b52e:	2964      	cmp	r1, #100	; 0x64
 800b530:	d001      	beq.n	800b536 <_printf_i+0x42>
 800b532:	2969      	cmp	r1, #105	; 0x69
 800b534:	d1f6      	bne.n	800b524 <_printf_i+0x30>
 800b536:	6820      	ldr	r0, [r4, #0]
 800b538:	6813      	ldr	r3, [r2, #0]
 800b53a:	0605      	lsls	r5, r0, #24
 800b53c:	f103 0104 	add.w	r1, r3, #4
 800b540:	d52a      	bpl.n	800b598 <_printf_i+0xa4>
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	6011      	str	r1, [r2, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	da03      	bge.n	800b552 <_printf_i+0x5e>
 800b54a:	222d      	movs	r2, #45	; 0x2d
 800b54c:	425b      	negs	r3, r3
 800b54e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b552:	486f      	ldr	r0, [pc, #444]	; (800b710 <_printf_i+0x21c>)
 800b554:	220a      	movs	r2, #10
 800b556:	e039      	b.n	800b5cc <_printf_i+0xd8>
 800b558:	2973      	cmp	r1, #115	; 0x73
 800b55a:	f000 809d 	beq.w	800b698 <_printf_i+0x1a4>
 800b55e:	d808      	bhi.n	800b572 <_printf_i+0x7e>
 800b560:	296f      	cmp	r1, #111	; 0x6f
 800b562:	d020      	beq.n	800b5a6 <_printf_i+0xb2>
 800b564:	2970      	cmp	r1, #112	; 0x70
 800b566:	d1dd      	bne.n	800b524 <_printf_i+0x30>
 800b568:	6823      	ldr	r3, [r4, #0]
 800b56a:	f043 0320 	orr.w	r3, r3, #32
 800b56e:	6023      	str	r3, [r4, #0]
 800b570:	e003      	b.n	800b57a <_printf_i+0x86>
 800b572:	2975      	cmp	r1, #117	; 0x75
 800b574:	d017      	beq.n	800b5a6 <_printf_i+0xb2>
 800b576:	2978      	cmp	r1, #120	; 0x78
 800b578:	d1d4      	bne.n	800b524 <_printf_i+0x30>
 800b57a:	2378      	movs	r3, #120	; 0x78
 800b57c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b580:	4864      	ldr	r0, [pc, #400]	; (800b714 <_printf_i+0x220>)
 800b582:	e055      	b.n	800b630 <_printf_i+0x13c>
 800b584:	6813      	ldr	r3, [r2, #0]
 800b586:	1d19      	adds	r1, r3, #4
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	6011      	str	r1, [r2, #0]
 800b58c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b590:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b594:	2301      	movs	r3, #1
 800b596:	e08c      	b.n	800b6b2 <_printf_i+0x1be>
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	6011      	str	r1, [r2, #0]
 800b59c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b5a0:	bf18      	it	ne
 800b5a2:	b21b      	sxthne	r3, r3
 800b5a4:	e7cf      	b.n	800b546 <_printf_i+0x52>
 800b5a6:	6813      	ldr	r3, [r2, #0]
 800b5a8:	6825      	ldr	r5, [r4, #0]
 800b5aa:	1d18      	adds	r0, r3, #4
 800b5ac:	6010      	str	r0, [r2, #0]
 800b5ae:	0628      	lsls	r0, r5, #24
 800b5b0:	d501      	bpl.n	800b5b6 <_printf_i+0xc2>
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	e002      	b.n	800b5bc <_printf_i+0xc8>
 800b5b6:	0668      	lsls	r0, r5, #25
 800b5b8:	d5fb      	bpl.n	800b5b2 <_printf_i+0xbe>
 800b5ba:	881b      	ldrh	r3, [r3, #0]
 800b5bc:	4854      	ldr	r0, [pc, #336]	; (800b710 <_printf_i+0x21c>)
 800b5be:	296f      	cmp	r1, #111	; 0x6f
 800b5c0:	bf14      	ite	ne
 800b5c2:	220a      	movne	r2, #10
 800b5c4:	2208      	moveq	r2, #8
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5cc:	6865      	ldr	r5, [r4, #4]
 800b5ce:	60a5      	str	r5, [r4, #8]
 800b5d0:	2d00      	cmp	r5, #0
 800b5d2:	f2c0 8095 	blt.w	800b700 <_printf_i+0x20c>
 800b5d6:	6821      	ldr	r1, [r4, #0]
 800b5d8:	f021 0104 	bic.w	r1, r1, #4
 800b5dc:	6021      	str	r1, [r4, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d13d      	bne.n	800b65e <_printf_i+0x16a>
 800b5e2:	2d00      	cmp	r5, #0
 800b5e4:	f040 808e 	bne.w	800b704 <_printf_i+0x210>
 800b5e8:	4665      	mov	r5, ip
 800b5ea:	2a08      	cmp	r2, #8
 800b5ec:	d10b      	bne.n	800b606 <_printf_i+0x112>
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	07db      	lsls	r3, r3, #31
 800b5f2:	d508      	bpl.n	800b606 <_printf_i+0x112>
 800b5f4:	6923      	ldr	r3, [r4, #16]
 800b5f6:	6862      	ldr	r2, [r4, #4]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	bfde      	ittt	le
 800b5fc:	2330      	movle	r3, #48	; 0x30
 800b5fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b602:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b606:	ebac 0305 	sub.w	r3, ip, r5
 800b60a:	6123      	str	r3, [r4, #16]
 800b60c:	f8cd 8000 	str.w	r8, [sp]
 800b610:	463b      	mov	r3, r7
 800b612:	aa03      	add	r2, sp, #12
 800b614:	4621      	mov	r1, r4
 800b616:	4630      	mov	r0, r6
 800b618:	f7ff fef6 	bl	800b408 <_printf_common>
 800b61c:	3001      	adds	r0, #1
 800b61e:	d14d      	bne.n	800b6bc <_printf_i+0x1c8>
 800b620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b624:	b005      	add	sp, #20
 800b626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b62a:	4839      	ldr	r0, [pc, #228]	; (800b710 <_printf_i+0x21c>)
 800b62c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b630:	6813      	ldr	r3, [r2, #0]
 800b632:	6821      	ldr	r1, [r4, #0]
 800b634:	1d1d      	adds	r5, r3, #4
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	6015      	str	r5, [r2, #0]
 800b63a:	060a      	lsls	r2, r1, #24
 800b63c:	d50b      	bpl.n	800b656 <_printf_i+0x162>
 800b63e:	07ca      	lsls	r2, r1, #31
 800b640:	bf44      	itt	mi
 800b642:	f041 0120 	orrmi.w	r1, r1, #32
 800b646:	6021      	strmi	r1, [r4, #0]
 800b648:	b91b      	cbnz	r3, 800b652 <_printf_i+0x15e>
 800b64a:	6822      	ldr	r2, [r4, #0]
 800b64c:	f022 0220 	bic.w	r2, r2, #32
 800b650:	6022      	str	r2, [r4, #0]
 800b652:	2210      	movs	r2, #16
 800b654:	e7b7      	b.n	800b5c6 <_printf_i+0xd2>
 800b656:	064d      	lsls	r5, r1, #25
 800b658:	bf48      	it	mi
 800b65a:	b29b      	uxthmi	r3, r3
 800b65c:	e7ef      	b.n	800b63e <_printf_i+0x14a>
 800b65e:	4665      	mov	r5, ip
 800b660:	fbb3 f1f2 	udiv	r1, r3, r2
 800b664:	fb02 3311 	mls	r3, r2, r1, r3
 800b668:	5cc3      	ldrb	r3, [r0, r3]
 800b66a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b66e:	460b      	mov	r3, r1
 800b670:	2900      	cmp	r1, #0
 800b672:	d1f5      	bne.n	800b660 <_printf_i+0x16c>
 800b674:	e7b9      	b.n	800b5ea <_printf_i+0xf6>
 800b676:	6813      	ldr	r3, [r2, #0]
 800b678:	6825      	ldr	r5, [r4, #0]
 800b67a:	6961      	ldr	r1, [r4, #20]
 800b67c:	1d18      	adds	r0, r3, #4
 800b67e:	6010      	str	r0, [r2, #0]
 800b680:	0628      	lsls	r0, r5, #24
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	d501      	bpl.n	800b68a <_printf_i+0x196>
 800b686:	6019      	str	r1, [r3, #0]
 800b688:	e002      	b.n	800b690 <_printf_i+0x19c>
 800b68a:	066a      	lsls	r2, r5, #25
 800b68c:	d5fb      	bpl.n	800b686 <_printf_i+0x192>
 800b68e:	8019      	strh	r1, [r3, #0]
 800b690:	2300      	movs	r3, #0
 800b692:	6123      	str	r3, [r4, #16]
 800b694:	4665      	mov	r5, ip
 800b696:	e7b9      	b.n	800b60c <_printf_i+0x118>
 800b698:	6813      	ldr	r3, [r2, #0]
 800b69a:	1d19      	adds	r1, r3, #4
 800b69c:	6011      	str	r1, [r2, #0]
 800b69e:	681d      	ldr	r5, [r3, #0]
 800b6a0:	6862      	ldr	r2, [r4, #4]
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	f7f4 fd9b 	bl	80001e0 <memchr>
 800b6aa:	b108      	cbz	r0, 800b6b0 <_printf_i+0x1bc>
 800b6ac:	1b40      	subs	r0, r0, r5
 800b6ae:	6060      	str	r0, [r4, #4]
 800b6b0:	6863      	ldr	r3, [r4, #4]
 800b6b2:	6123      	str	r3, [r4, #16]
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6ba:	e7a7      	b.n	800b60c <_printf_i+0x118>
 800b6bc:	6923      	ldr	r3, [r4, #16]
 800b6be:	462a      	mov	r2, r5
 800b6c0:	4639      	mov	r1, r7
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	47c0      	blx	r8
 800b6c6:	3001      	adds	r0, #1
 800b6c8:	d0aa      	beq.n	800b620 <_printf_i+0x12c>
 800b6ca:	6823      	ldr	r3, [r4, #0]
 800b6cc:	079b      	lsls	r3, r3, #30
 800b6ce:	d413      	bmi.n	800b6f8 <_printf_i+0x204>
 800b6d0:	68e0      	ldr	r0, [r4, #12]
 800b6d2:	9b03      	ldr	r3, [sp, #12]
 800b6d4:	4298      	cmp	r0, r3
 800b6d6:	bfb8      	it	lt
 800b6d8:	4618      	movlt	r0, r3
 800b6da:	e7a3      	b.n	800b624 <_printf_i+0x130>
 800b6dc:	2301      	movs	r3, #1
 800b6de:	464a      	mov	r2, r9
 800b6e0:	4639      	mov	r1, r7
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	47c0      	blx	r8
 800b6e6:	3001      	adds	r0, #1
 800b6e8:	d09a      	beq.n	800b620 <_printf_i+0x12c>
 800b6ea:	3501      	adds	r5, #1
 800b6ec:	68e3      	ldr	r3, [r4, #12]
 800b6ee:	9a03      	ldr	r2, [sp, #12]
 800b6f0:	1a9b      	subs	r3, r3, r2
 800b6f2:	42ab      	cmp	r3, r5
 800b6f4:	dcf2      	bgt.n	800b6dc <_printf_i+0x1e8>
 800b6f6:	e7eb      	b.n	800b6d0 <_printf_i+0x1dc>
 800b6f8:	2500      	movs	r5, #0
 800b6fa:	f104 0919 	add.w	r9, r4, #25
 800b6fe:	e7f5      	b.n	800b6ec <_printf_i+0x1f8>
 800b700:	2b00      	cmp	r3, #0
 800b702:	d1ac      	bne.n	800b65e <_printf_i+0x16a>
 800b704:	7803      	ldrb	r3, [r0, #0]
 800b706:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b70a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b70e:	e76c      	b.n	800b5ea <_printf_i+0xf6>
 800b710:	0800bbe9 	.word	0x0800bbe9
 800b714:	0800bbfa 	.word	0x0800bbfa

0800b718 <memcpy>:
 800b718:	b510      	push	{r4, lr}
 800b71a:	1e43      	subs	r3, r0, #1
 800b71c:	440a      	add	r2, r1
 800b71e:	4291      	cmp	r1, r2
 800b720:	d100      	bne.n	800b724 <memcpy+0xc>
 800b722:	bd10      	pop	{r4, pc}
 800b724:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b728:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b72c:	e7f7      	b.n	800b71e <memcpy+0x6>

0800b72e <memmove>:
 800b72e:	4288      	cmp	r0, r1
 800b730:	b510      	push	{r4, lr}
 800b732:	eb01 0302 	add.w	r3, r1, r2
 800b736:	d807      	bhi.n	800b748 <memmove+0x1a>
 800b738:	1e42      	subs	r2, r0, #1
 800b73a:	4299      	cmp	r1, r3
 800b73c:	d00a      	beq.n	800b754 <memmove+0x26>
 800b73e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b742:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b746:	e7f8      	b.n	800b73a <memmove+0xc>
 800b748:	4283      	cmp	r3, r0
 800b74a:	d9f5      	bls.n	800b738 <memmove+0xa>
 800b74c:	1881      	adds	r1, r0, r2
 800b74e:	1ad2      	subs	r2, r2, r3
 800b750:	42d3      	cmn	r3, r2
 800b752:	d100      	bne.n	800b756 <memmove+0x28>
 800b754:	bd10      	pop	{r4, pc}
 800b756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b75a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b75e:	e7f7      	b.n	800b750 <memmove+0x22>

0800b760 <_free_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4605      	mov	r5, r0
 800b764:	2900      	cmp	r1, #0
 800b766:	d045      	beq.n	800b7f4 <_free_r+0x94>
 800b768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b76c:	1f0c      	subs	r4, r1, #4
 800b76e:	2b00      	cmp	r3, #0
 800b770:	bfb8      	it	lt
 800b772:	18e4      	addlt	r4, r4, r3
 800b774:	f000 f8d2 	bl	800b91c <__malloc_lock>
 800b778:	4a1f      	ldr	r2, [pc, #124]	; (800b7f8 <_free_r+0x98>)
 800b77a:	6813      	ldr	r3, [r2, #0]
 800b77c:	4610      	mov	r0, r2
 800b77e:	b933      	cbnz	r3, 800b78e <_free_r+0x2e>
 800b780:	6063      	str	r3, [r4, #4]
 800b782:	6014      	str	r4, [r2, #0]
 800b784:	4628      	mov	r0, r5
 800b786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b78a:	f000 b8c8 	b.w	800b91e <__malloc_unlock>
 800b78e:	42a3      	cmp	r3, r4
 800b790:	d90c      	bls.n	800b7ac <_free_r+0x4c>
 800b792:	6821      	ldr	r1, [r4, #0]
 800b794:	1862      	adds	r2, r4, r1
 800b796:	4293      	cmp	r3, r2
 800b798:	bf04      	itt	eq
 800b79a:	681a      	ldreq	r2, [r3, #0]
 800b79c:	685b      	ldreq	r3, [r3, #4]
 800b79e:	6063      	str	r3, [r4, #4]
 800b7a0:	bf04      	itt	eq
 800b7a2:	1852      	addeq	r2, r2, r1
 800b7a4:	6022      	streq	r2, [r4, #0]
 800b7a6:	6004      	str	r4, [r0, #0]
 800b7a8:	e7ec      	b.n	800b784 <_free_r+0x24>
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	685a      	ldr	r2, [r3, #4]
 800b7ae:	b10a      	cbz	r2, 800b7b4 <_free_r+0x54>
 800b7b0:	42a2      	cmp	r2, r4
 800b7b2:	d9fa      	bls.n	800b7aa <_free_r+0x4a>
 800b7b4:	6819      	ldr	r1, [r3, #0]
 800b7b6:	1858      	adds	r0, r3, r1
 800b7b8:	42a0      	cmp	r0, r4
 800b7ba:	d10b      	bne.n	800b7d4 <_free_r+0x74>
 800b7bc:	6820      	ldr	r0, [r4, #0]
 800b7be:	4401      	add	r1, r0
 800b7c0:	1858      	adds	r0, r3, r1
 800b7c2:	4282      	cmp	r2, r0
 800b7c4:	6019      	str	r1, [r3, #0]
 800b7c6:	d1dd      	bne.n	800b784 <_free_r+0x24>
 800b7c8:	6810      	ldr	r0, [r2, #0]
 800b7ca:	6852      	ldr	r2, [r2, #4]
 800b7cc:	605a      	str	r2, [r3, #4]
 800b7ce:	4401      	add	r1, r0
 800b7d0:	6019      	str	r1, [r3, #0]
 800b7d2:	e7d7      	b.n	800b784 <_free_r+0x24>
 800b7d4:	d902      	bls.n	800b7dc <_free_r+0x7c>
 800b7d6:	230c      	movs	r3, #12
 800b7d8:	602b      	str	r3, [r5, #0]
 800b7da:	e7d3      	b.n	800b784 <_free_r+0x24>
 800b7dc:	6820      	ldr	r0, [r4, #0]
 800b7de:	1821      	adds	r1, r4, r0
 800b7e0:	428a      	cmp	r2, r1
 800b7e2:	bf04      	itt	eq
 800b7e4:	6811      	ldreq	r1, [r2, #0]
 800b7e6:	6852      	ldreq	r2, [r2, #4]
 800b7e8:	6062      	str	r2, [r4, #4]
 800b7ea:	bf04      	itt	eq
 800b7ec:	1809      	addeq	r1, r1, r0
 800b7ee:	6021      	streq	r1, [r4, #0]
 800b7f0:	605c      	str	r4, [r3, #4]
 800b7f2:	e7c7      	b.n	800b784 <_free_r+0x24>
 800b7f4:	bd38      	pop	{r3, r4, r5, pc}
 800b7f6:	bf00      	nop
 800b7f8:	200005e4 	.word	0x200005e4

0800b7fc <_malloc_r>:
 800b7fc:	b570      	push	{r4, r5, r6, lr}
 800b7fe:	1ccd      	adds	r5, r1, #3
 800b800:	f025 0503 	bic.w	r5, r5, #3
 800b804:	3508      	adds	r5, #8
 800b806:	2d0c      	cmp	r5, #12
 800b808:	bf38      	it	cc
 800b80a:	250c      	movcc	r5, #12
 800b80c:	2d00      	cmp	r5, #0
 800b80e:	4606      	mov	r6, r0
 800b810:	db01      	blt.n	800b816 <_malloc_r+0x1a>
 800b812:	42a9      	cmp	r1, r5
 800b814:	d903      	bls.n	800b81e <_malloc_r+0x22>
 800b816:	230c      	movs	r3, #12
 800b818:	6033      	str	r3, [r6, #0]
 800b81a:	2000      	movs	r0, #0
 800b81c:	bd70      	pop	{r4, r5, r6, pc}
 800b81e:	f000 f87d 	bl	800b91c <__malloc_lock>
 800b822:	4a21      	ldr	r2, [pc, #132]	; (800b8a8 <_malloc_r+0xac>)
 800b824:	6814      	ldr	r4, [r2, #0]
 800b826:	4621      	mov	r1, r4
 800b828:	b991      	cbnz	r1, 800b850 <_malloc_r+0x54>
 800b82a:	4c20      	ldr	r4, [pc, #128]	; (800b8ac <_malloc_r+0xb0>)
 800b82c:	6823      	ldr	r3, [r4, #0]
 800b82e:	b91b      	cbnz	r3, 800b838 <_malloc_r+0x3c>
 800b830:	4630      	mov	r0, r6
 800b832:	f000 f863 	bl	800b8fc <_sbrk_r>
 800b836:	6020      	str	r0, [r4, #0]
 800b838:	4629      	mov	r1, r5
 800b83a:	4630      	mov	r0, r6
 800b83c:	f000 f85e 	bl	800b8fc <_sbrk_r>
 800b840:	1c43      	adds	r3, r0, #1
 800b842:	d124      	bne.n	800b88e <_malloc_r+0x92>
 800b844:	230c      	movs	r3, #12
 800b846:	6033      	str	r3, [r6, #0]
 800b848:	4630      	mov	r0, r6
 800b84a:	f000 f868 	bl	800b91e <__malloc_unlock>
 800b84e:	e7e4      	b.n	800b81a <_malloc_r+0x1e>
 800b850:	680b      	ldr	r3, [r1, #0]
 800b852:	1b5b      	subs	r3, r3, r5
 800b854:	d418      	bmi.n	800b888 <_malloc_r+0x8c>
 800b856:	2b0b      	cmp	r3, #11
 800b858:	d90f      	bls.n	800b87a <_malloc_r+0x7e>
 800b85a:	600b      	str	r3, [r1, #0]
 800b85c:	50cd      	str	r5, [r1, r3]
 800b85e:	18cc      	adds	r4, r1, r3
 800b860:	4630      	mov	r0, r6
 800b862:	f000 f85c 	bl	800b91e <__malloc_unlock>
 800b866:	f104 000b 	add.w	r0, r4, #11
 800b86a:	1d23      	adds	r3, r4, #4
 800b86c:	f020 0007 	bic.w	r0, r0, #7
 800b870:	1ac3      	subs	r3, r0, r3
 800b872:	d0d3      	beq.n	800b81c <_malloc_r+0x20>
 800b874:	425a      	negs	r2, r3
 800b876:	50e2      	str	r2, [r4, r3]
 800b878:	e7d0      	b.n	800b81c <_malloc_r+0x20>
 800b87a:	428c      	cmp	r4, r1
 800b87c:	684b      	ldr	r3, [r1, #4]
 800b87e:	bf16      	itet	ne
 800b880:	6063      	strne	r3, [r4, #4]
 800b882:	6013      	streq	r3, [r2, #0]
 800b884:	460c      	movne	r4, r1
 800b886:	e7eb      	b.n	800b860 <_malloc_r+0x64>
 800b888:	460c      	mov	r4, r1
 800b88a:	6849      	ldr	r1, [r1, #4]
 800b88c:	e7cc      	b.n	800b828 <_malloc_r+0x2c>
 800b88e:	1cc4      	adds	r4, r0, #3
 800b890:	f024 0403 	bic.w	r4, r4, #3
 800b894:	42a0      	cmp	r0, r4
 800b896:	d005      	beq.n	800b8a4 <_malloc_r+0xa8>
 800b898:	1a21      	subs	r1, r4, r0
 800b89a:	4630      	mov	r0, r6
 800b89c:	f000 f82e 	bl	800b8fc <_sbrk_r>
 800b8a0:	3001      	adds	r0, #1
 800b8a2:	d0cf      	beq.n	800b844 <_malloc_r+0x48>
 800b8a4:	6025      	str	r5, [r4, #0]
 800b8a6:	e7db      	b.n	800b860 <_malloc_r+0x64>
 800b8a8:	200005e4 	.word	0x200005e4
 800b8ac:	200005e8 	.word	0x200005e8

0800b8b0 <_realloc_r>:
 800b8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b2:	4607      	mov	r7, r0
 800b8b4:	4614      	mov	r4, r2
 800b8b6:	460e      	mov	r6, r1
 800b8b8:	b921      	cbnz	r1, 800b8c4 <_realloc_r+0x14>
 800b8ba:	4611      	mov	r1, r2
 800b8bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b8c0:	f7ff bf9c 	b.w	800b7fc <_malloc_r>
 800b8c4:	b922      	cbnz	r2, 800b8d0 <_realloc_r+0x20>
 800b8c6:	f7ff ff4b 	bl	800b760 <_free_r>
 800b8ca:	4625      	mov	r5, r4
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8d0:	f000 f826 	bl	800b920 <_malloc_usable_size_r>
 800b8d4:	42a0      	cmp	r0, r4
 800b8d6:	d20f      	bcs.n	800b8f8 <_realloc_r+0x48>
 800b8d8:	4621      	mov	r1, r4
 800b8da:	4638      	mov	r0, r7
 800b8dc:	f7ff ff8e 	bl	800b7fc <_malloc_r>
 800b8e0:	4605      	mov	r5, r0
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	d0f2      	beq.n	800b8cc <_realloc_r+0x1c>
 800b8e6:	4631      	mov	r1, r6
 800b8e8:	4622      	mov	r2, r4
 800b8ea:	f7ff ff15 	bl	800b718 <memcpy>
 800b8ee:	4631      	mov	r1, r6
 800b8f0:	4638      	mov	r0, r7
 800b8f2:	f7ff ff35 	bl	800b760 <_free_r>
 800b8f6:	e7e9      	b.n	800b8cc <_realloc_r+0x1c>
 800b8f8:	4635      	mov	r5, r6
 800b8fa:	e7e7      	b.n	800b8cc <_realloc_r+0x1c>

0800b8fc <_sbrk_r>:
 800b8fc:	b538      	push	{r3, r4, r5, lr}
 800b8fe:	4c06      	ldr	r4, [pc, #24]	; (800b918 <_sbrk_r+0x1c>)
 800b900:	2300      	movs	r3, #0
 800b902:	4605      	mov	r5, r0
 800b904:	4608      	mov	r0, r1
 800b906:	6023      	str	r3, [r4, #0]
 800b908:	f7f6 f814 	bl	8001934 <_sbrk>
 800b90c:	1c43      	adds	r3, r0, #1
 800b90e:	d102      	bne.n	800b916 <_sbrk_r+0x1a>
 800b910:	6823      	ldr	r3, [r4, #0]
 800b912:	b103      	cbz	r3, 800b916 <_sbrk_r+0x1a>
 800b914:	602b      	str	r3, [r5, #0]
 800b916:	bd38      	pop	{r3, r4, r5, pc}
 800b918:	20001620 	.word	0x20001620

0800b91c <__malloc_lock>:
 800b91c:	4770      	bx	lr

0800b91e <__malloc_unlock>:
 800b91e:	4770      	bx	lr

0800b920 <_malloc_usable_size_r>:
 800b920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b924:	1f18      	subs	r0, r3, #4
 800b926:	2b00      	cmp	r3, #0
 800b928:	bfbc      	itt	lt
 800b92a:	580b      	ldrlt	r3, [r1, r0]
 800b92c:	18c0      	addlt	r0, r0, r3
 800b92e:	4770      	bx	lr

0800b930 <_init>:
 800b930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b932:	bf00      	nop
 800b934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b936:	bc08      	pop	{r3}
 800b938:	469e      	mov	lr, r3
 800b93a:	4770      	bx	lr

0800b93c <_fini>:
 800b93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93e:	bf00      	nop
 800b940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b942:	bc08      	pop	{r3}
 800b944:	469e      	mov	lr, r3
 800b946:	4770      	bx	lr
